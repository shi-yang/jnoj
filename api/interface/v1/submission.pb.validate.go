// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/submission.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Submission with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Submission) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Submission with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SubmissionMultiError, or
// nil if none found.
func (m *Submission) ValidateAll() error {
	return m.validate(true)
}

func (m *Submission) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ProblemId

	// no validation rules for Language

	// no validation rules for Source

	// no validation rules for Memory

	// no validation rules for Time

	// no validation rules for Verdict

	// no validation rules for Score

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubmissionValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubmissionValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubmissionValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubmissionValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubmissionValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubmissionValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SubmissionMultiError(errors)
	}

	return nil
}

// SubmissionMultiError is an error wrapping multiple validation errors
// returned by Submission.ValidateAll() if the designated constraints aren't met.
type SubmissionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubmissionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubmissionMultiError) AllErrors() []error { return m }

// SubmissionValidationError is the validation error returned by
// Submission.Validate if the designated constraints aren't met.
type SubmissionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmissionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubmissionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubmissionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubmissionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmissionValidationError) ErrorName() string { return "SubmissionValidationError" }

// Error satisfies the builtin error interface
func (e SubmissionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmission.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmissionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmissionValidationError{}

// Validate checks the field values on ListSubmissionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSubmissionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSubmissionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSubmissionsRequestMultiError, or nil if none found.
func (m *ListSubmissionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSubmissionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EntityId

	// no validation rules for EntityType

	// no validation rules for UserId

	// no validation rules for Page

	// no validation rules for PerPage

	if m.ProblemId != nil {
		// no validation rules for ProblemId
	}

	if len(errors) > 0 {
		return ListSubmissionsRequestMultiError(errors)
	}

	return nil
}

// ListSubmissionsRequestMultiError is an error wrapping multiple validation
// errors returned by ListSubmissionsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListSubmissionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSubmissionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSubmissionsRequestMultiError) AllErrors() []error { return m }

// ListSubmissionsRequestValidationError is the validation error returned by
// ListSubmissionsRequest.Validate if the designated constraints aren't met.
type ListSubmissionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSubmissionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSubmissionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSubmissionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSubmissionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSubmissionsRequestValidationError) ErrorName() string {
	return "ListSubmissionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListSubmissionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSubmissionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSubmissionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSubmissionsRequestValidationError{}

// Validate checks the field values on ListSubmissionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSubmissionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSubmissionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSubmissionsResponseMultiError, or nil if none found.
func (m *ListSubmissionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSubmissionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSubmissionsResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSubmissionsResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSubmissionsResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListSubmissionsResponseMultiError(errors)
	}

	return nil
}

// ListSubmissionsResponseMultiError is an error wrapping multiple validation
// errors returned by ListSubmissionsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListSubmissionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSubmissionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSubmissionsResponseMultiError) AllErrors() []error { return m }

// ListSubmissionsResponseValidationError is the validation error returned by
// ListSubmissionsResponse.Validate if the designated constraints aren't met.
type ListSubmissionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSubmissionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSubmissionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSubmissionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSubmissionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSubmissionsResponseValidationError) ErrorName() string {
	return "ListSubmissionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListSubmissionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSubmissionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSubmissionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSubmissionsResponseValidationError{}

// Validate checks the field values on GetSubmissionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSubmissionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSubmissionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSubmissionRequestMultiError, or nil if none found.
func (m *GetSubmissionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSubmissionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetSubmissionRequestMultiError(errors)
	}

	return nil
}

// GetSubmissionRequestMultiError is an error wrapping multiple validation
// errors returned by GetSubmissionRequest.ValidateAll() if the designated
// constraints aren't met.
type GetSubmissionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSubmissionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSubmissionRequestMultiError) AllErrors() []error { return m }

// GetSubmissionRequestValidationError is the validation error returned by
// GetSubmissionRequest.Validate if the designated constraints aren't met.
type GetSubmissionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSubmissionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSubmissionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSubmissionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSubmissionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSubmissionRequestValidationError) ErrorName() string {
	return "GetSubmissionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSubmissionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSubmissionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSubmissionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSubmissionRequestValidationError{}

// Validate checks the field values on CreateSubmissionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSubmissionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSubmissionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSubmissionRequestMultiError, or nil if none found.
func (m *CreateSubmissionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSubmissionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProblemId

	// no validation rules for Language

	// no validation rules for Source

	// no validation rules for ContestId

	// no validation rules for ProblemNumber

	if len(errors) > 0 {
		return CreateSubmissionRequestMultiError(errors)
	}

	return nil
}

// CreateSubmissionRequestMultiError is an error wrapping multiple validation
// errors returned by CreateSubmissionRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateSubmissionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSubmissionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSubmissionRequestMultiError) AllErrors() []error { return m }

// CreateSubmissionRequestValidationError is the validation error returned by
// CreateSubmissionRequest.Validate if the designated constraints aren't met.
type CreateSubmissionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSubmissionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSubmissionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSubmissionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSubmissionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSubmissionRequestValidationError) ErrorName() string {
	return "CreateSubmissionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSubmissionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSubmissionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSubmissionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSubmissionRequestValidationError{}

// Validate checks the field values on GetSubmissionInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSubmissionInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSubmissionInfoRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSubmissionInfoRequestMultiError, or nil if none found.
func (m *GetSubmissionInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSubmissionInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetSubmissionInfoRequestMultiError(errors)
	}

	return nil
}

// GetSubmissionInfoRequestMultiError is an error wrapping multiple validation
// errors returned by GetSubmissionInfoRequest.ValidateAll() if the designated
// constraints aren't met.
type GetSubmissionInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSubmissionInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSubmissionInfoRequestMultiError) AllErrors() []error { return m }

// GetSubmissionInfoRequestValidationError is the validation error returned by
// GetSubmissionInfoRequest.Validate if the designated constraints aren't met.
type GetSubmissionInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSubmissionInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSubmissionInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSubmissionInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSubmissionInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSubmissionInfoRequestValidationError) ErrorName() string {
	return "GetSubmissionInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSubmissionInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSubmissionInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSubmissionInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSubmissionInfoRequestValidationError{}

// Validate checks the field values on SubmissionInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SubmissionInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubmissionInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SubmissionInfoMultiError,
// or nil if none found.
func (m *SubmissionInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *SubmissionInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CompileMsg

	// no validation rules for Score

	// no validation rules for Memory

	// no validation rules for Time

	// no validation rules for TotalTestCount

	// no validation rules for AcceptedTestCount

	// no validation rules for HasSubtask

	for idx, item := range m.GetSubtasks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SubmissionInfoValidationError{
						field:  fmt.Sprintf("Subtasks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SubmissionInfoValidationError{
						field:  fmt.Sprintf("Subtasks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SubmissionInfoValidationError{
					field:  fmt.Sprintf("Subtasks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SubmissionInfoMultiError(errors)
	}

	return nil
}

// SubmissionInfoMultiError is an error wrapping multiple validation errors
// returned by SubmissionInfo.ValidateAll() if the designated constraints
// aren't met.
type SubmissionInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubmissionInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubmissionInfoMultiError) AllErrors() []error { return m }

// SubmissionInfoValidationError is the validation error returned by
// SubmissionInfo.Validate if the designated constraints aren't met.
type SubmissionInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmissionInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubmissionInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubmissionInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubmissionInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmissionInfoValidationError) ErrorName() string { return "SubmissionInfoValidationError" }

// Error satisfies the builtin error interface
func (e SubmissionInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmissionInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmissionInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmissionInfoValidationError{}

// Validate checks the field values on GetLastSubmissionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLastSubmissionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLastSubmissionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLastSubmissionRequestMultiError, or nil if none found.
func (m *GetLastSubmissionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLastSubmissionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProblemId

	// no validation rules for EntityId

	// no validation rules for EntityType

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetLastSubmissionRequestMultiError(errors)
	}

	return nil
}

// GetLastSubmissionRequestMultiError is an error wrapping multiple validation
// errors returned by GetLastSubmissionRequest.ValidateAll() if the designated
// constraints aren't met.
type GetLastSubmissionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLastSubmissionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLastSubmissionRequestMultiError) AllErrors() []error { return m }

// GetLastSubmissionRequestValidationError is the validation error returned by
// GetLastSubmissionRequest.Validate if the designated constraints aren't met.
type GetLastSubmissionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLastSubmissionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLastSubmissionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLastSubmissionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLastSubmissionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLastSubmissionRequestValidationError) ErrorName() string {
	return "GetLastSubmissionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetLastSubmissionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLastSubmissionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLastSubmissionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLastSubmissionRequestValidationError{}

// Validate checks the field values on SubmissionInfo_SubmissionTest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubmissionInfo_SubmissionTest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubmissionInfo_SubmissionTest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SubmissionInfo_SubmissionTestMultiError, or nil if none found.
func (m *SubmissionInfo_SubmissionTest) ValidateAll() error {
	return m.validate(true)
}

func (m *SubmissionInfo_SubmissionTest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Verdict

	// no validation rules for Stdin

	// no validation rules for Stdout

	// no validation rules for Stderr

	// no validation rules for Answer

	// no validation rules for Time

	// no validation rules for Memory

	// no validation rules for ExitCode

	// no validation rules for Score

	// no validation rules for CheckerStdout

	// no validation rules for CheckerExitCode

	if len(errors) > 0 {
		return SubmissionInfo_SubmissionTestMultiError(errors)
	}

	return nil
}

// SubmissionInfo_SubmissionTestMultiError is an error wrapping multiple
// validation errors returned by SubmissionInfo_SubmissionTest.ValidateAll()
// if the designated constraints aren't met.
type SubmissionInfo_SubmissionTestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubmissionInfo_SubmissionTestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubmissionInfo_SubmissionTestMultiError) AllErrors() []error { return m }

// SubmissionInfo_SubmissionTestValidationError is the validation error
// returned by SubmissionInfo_SubmissionTest.Validate if the designated
// constraints aren't met.
type SubmissionInfo_SubmissionTestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmissionInfo_SubmissionTestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubmissionInfo_SubmissionTestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubmissionInfo_SubmissionTestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubmissionInfo_SubmissionTestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmissionInfo_SubmissionTestValidationError) ErrorName() string {
	return "SubmissionInfo_SubmissionTestValidationError"
}

// Error satisfies the builtin error interface
func (e SubmissionInfo_SubmissionTestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmissionInfo_SubmissionTest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmissionInfo_SubmissionTestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmissionInfo_SubmissionTestValidationError{}

// Validate checks the field values on SubmissionInfo_SubmissionSubtaskResult
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *SubmissionInfo_SubmissionSubtaskResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SubmissionInfo_SubmissionSubtaskResult with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// SubmissionInfo_SubmissionSubtaskResultMultiError, or nil if none found.
func (m *SubmissionInfo_SubmissionSubtaskResult) ValidateAll() error {
	return m.validate(true)
}

func (m *SubmissionInfo_SubmissionSubtaskResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Score

	// no validation rules for Time

	// no validation rules for Memory

	// no validation rules for Verdict

	for idx, item := range m.GetTests() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SubmissionInfo_SubmissionSubtaskResultValidationError{
						field:  fmt.Sprintf("Tests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SubmissionInfo_SubmissionSubtaskResultValidationError{
						field:  fmt.Sprintf("Tests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SubmissionInfo_SubmissionSubtaskResultValidationError{
					field:  fmt.Sprintf("Tests[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SubmissionInfo_SubmissionSubtaskResultMultiError(errors)
	}

	return nil
}

// SubmissionInfo_SubmissionSubtaskResultMultiError is an error wrapping
// multiple validation errors returned by
// SubmissionInfo_SubmissionSubtaskResult.ValidateAll() if the designated
// constraints aren't met.
type SubmissionInfo_SubmissionSubtaskResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubmissionInfo_SubmissionSubtaskResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubmissionInfo_SubmissionSubtaskResultMultiError) AllErrors() []error { return m }

// SubmissionInfo_SubmissionSubtaskResultValidationError is the validation
// error returned by SubmissionInfo_SubmissionSubtaskResult.Validate if the
// designated constraints aren't met.
type SubmissionInfo_SubmissionSubtaskResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmissionInfo_SubmissionSubtaskResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubmissionInfo_SubmissionSubtaskResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubmissionInfo_SubmissionSubtaskResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubmissionInfo_SubmissionSubtaskResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmissionInfo_SubmissionSubtaskResultValidationError) ErrorName() string {
	return "SubmissionInfo_SubmissionSubtaskResultValidationError"
}

// Error satisfies the builtin error interface
func (e SubmissionInfo_SubmissionSubtaskResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmissionInfo_SubmissionSubtaskResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmissionInfo_SubmissionSubtaskResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmissionInfo_SubmissionSubtaskResultValidationError{}
