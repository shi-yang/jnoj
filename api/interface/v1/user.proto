syntax = "proto3";

package jnoj.interface.v1;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "validate/validate.proto";

option go_package = "api/interface/v1;v1";

service UserService {
    // 登录
    rpc Login (LoginRequest) returns (LoginResponse) {
        option (google.api.http) = {
            post: "/login"
            body: "*"
        };
    };
    // 注册
    rpc Register (RegisterRequest) returns (RegisterResponse) {
        option (google.api.http) = {
            post: "/register"
            body: "*"
        };
    };
    // 获取验证码
    rpc GetCaptcha (GetCaptchaRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/captcha"
        };
    };
    // 获取登录用户信息
    rpc GetUserInfo (google.protobuf.Empty) returns (GetUserInfoResponse) {
        option (google.api.http) = {
            get: "/user/info"
        };
    };
    // 获取用户主页信息
    rpc GetUser (GetUserRequest) returns (User) {
        option (google.api.http) = {
            get: "/users/{id}"
        };
    };
    // 修改用户信息
    rpc UpdateUser (UpdateUserRequest) returns (User) {
        option (google.api.http) = {
            put: "/users/{id}"
            body: "*"
        };
    };
    // 修改用户密码
    rpc UpdateUserPassword (UpdateUserPasswordRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/users/{id}/password"
            body: "*"
        };
    };
    // 用户主页提交统计
    rpc GetUserProfileCalendar (GetUserProfileCalendarRequest) returns (GetUserProfileCalendarResponse) {
        option (google.api.http) = {
            get: "/users/{id}/profile_calendar"
        };
    };
    // 用户主页提交统计
    rpc GetUserProfileProblemSolved (GetUserProfileProblemSolvedRequest) returns (GetUserProfileProblemSolvedResponse) {
        option (google.api.http) = {
            get: "/users/{id}/profile_problemsolved"
        };
    };
}

message LoginRequest {
    string username = 1;
    string password = 2;
}

message LoginResponse {
    string token = 1;
}

message RegisterRequest {
    oneof id {
        // either phone or email must be set.
        option (validate.required) = true;

        // 手机号
        string phone = 1 [(validate.rules).string = { pattern: "^1[3456789][0-9]{9}$" }];
        // 邮箱
        string email = 2 [(validate.rules).string.email = true];
    }
    // 用户名
    string username = 3 [(validate.rules).string = {
        // 以字母、数字、下划线，且非纯数字，长度在 5 - 16 位之间
        pattern:   "^[a-zA-Z][a-zA-Z0-9_-]{4,15}$",
    }];
    // 验证码
    string captcha = 4 [(validate.rules).string.len = 6];
    // 密码
    string password = 5 [(validate.rules).string = {min_len: 6, max_len: 16}];
}

message RegisterResponse {
    // 用户ID
    int32 id = 1;
    // 登录 token
    string token = 2;
}

message GetCaptchaRequest {
    oneof key {
        // either phone or email must be set.
        option (validate.required) = true;

        // 手机号
        string phone = 1 [(validate.rules).string = { pattern: "^1[3456789][0-9]{9}$" }];
        // 邮箱
        string email = 2 [(validate.rules).string.email = true];
    }
}

message GetUserInfoResponse {
    int32 id = 1;
    string nickname = 2;
    string username = 3;
    map<string, google.protobuf.ListValue> permissions = 4;
}

message User {
    enum UserRole {
        REGULAR_USER = 0;
        VIP_USER = 1;
        OFFICIAL_USER = 2;
        ADMIN = 3;
        SUPER_ADMIN = 4;
    }
    int32 id = 1;
    string nickname = 2;
    string username = 3;
    UserRole role = 4;
}

message GetUserRequest {
    int32 id = 1;
}

message UpdateUserRequest {
    int32 id = 1;
    string nickname = 2;
}

message UpdateUserPasswordRequest {
    int32 id = 1;
    string old_password = 2;
    string new_password = 3;
}

message GetUserProfileCalendarRequest {
    int32 id = 1;
    int32 year = 2;
}

message GetUserProfileCalendarResponse {
    repeated int32 activeYears = 1;
    message ProfileCalendar {
        string date = 1;
        int32 count = 2;
    }
    repeated ProfileCalendar submissionCalendar = 2;
    int32 totalActiveDays = 3;
    int32 totalSubmission = 4;
    int32 totalProblemSolved = 5;
    string start = 6;
    string end = 7;
}

message GetUserProfileProblemSolvedRequest {
    int32 id = 1;
    string type = 2; // problemset group
}

message GetUserProfileProblemSolvedResponse {
    message Problem {
        enum Status {
            NOT_START = 0;
            INCORRECT = 1;
            CORRECT = 2;
        };
        int32 id = 1;
        Status status = 2;
    };
    message Problemset {
        // 题单ID
        int32 id = 1;
        // 题单名称
        string name = 2;
        // 用户完成数
        int32 count = 3;
        // 题单总数
        int32 total = 4; 
        repeated Problem problems = 5;
    }
    repeated Problemset problemsets = 2;
}
