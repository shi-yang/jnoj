// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/user.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on LoginRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginRequestMultiError, or
// nil if none found.
func (m *LoginRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for Password

	if len(errors) > 0 {
		return LoginRequestMultiError(errors)
	}

	return nil
}

// LoginRequestMultiError is an error wrapping multiple validation errors
// returned by LoginRequest.ValidateAll() if the designated constraints aren't met.
type LoginRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginRequestMultiError) AllErrors() []error { return m }

// LoginRequestValidationError is the validation error returned by
// LoginRequest.Validate if the designated constraints aren't met.
type LoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginRequestValidationError) ErrorName() string { return "LoginRequestValidationError" }

// Error satisfies the builtin error interface
func (e LoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginRequestValidationError{}

// Validate checks the field values on LoginResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginResponseMultiError, or
// nil if none found.
func (m *LoginResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return LoginResponseMultiError(errors)
	}

	return nil
}

// LoginResponseMultiError is an error wrapping multiple validation errors
// returned by LoginResponse.ValidateAll() if the designated constraints
// aren't met.
type LoginResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginResponseMultiError) AllErrors() []error { return m }

// LoginResponseValidationError is the validation error returned by
// LoginResponse.Validate if the designated constraints aren't met.
type LoginResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginResponseValidationError) ErrorName() string { return "LoginResponseValidationError" }

// Error satisfies the builtin error interface
func (e LoginResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginResponseValidationError{}

// Validate checks the field values on RegisterRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RegisterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterRequestMultiError, or nil if none found.
func (m *RegisterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_RegisterRequest_Username_Pattern.MatchString(m.GetUsername()) {
		err := RegisterRequestValidationError{
			field:  "Username",
			reason: "value does not match regex pattern \"^[a-zA-Z][a-zA-Z0-9_-]{4,15}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCaptcha()) != 6 {
		err := RegisterRequestValidationError{
			field:  "Captcha",
			reason: "value length must be 6 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if l := utf8.RuneCountInString(m.GetPassword()); l < 6 || l > 16 {
		err := RegisterRequestValidationError{
			field:  "Password",
			reason: "value length must be between 6 and 16 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	oneofIdPresent := false
	switch v := m.Id.(type) {
	case *RegisterRequest_Phone:
		if v == nil {
			err := RegisterRequestValidationError{
				field:  "Id",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofIdPresent = true

		if !_RegisterRequest_Phone_Pattern.MatchString(m.GetPhone()) {
			err := RegisterRequestValidationError{
				field:  "Phone",
				reason: "value does not match regex pattern \"^1[3456789][0-9]{9}$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	case *RegisterRequest_Email:
		if v == nil {
			err := RegisterRequestValidationError{
				field:  "Id",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofIdPresent = true

		if err := m._validateEmail(m.GetEmail()); err != nil {
			err = RegisterRequestValidationError{
				field:  "Email",
				reason: "value must be a valid email address",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	default:
		_ = v // ensures v is used
	}
	if !oneofIdPresent {
		err := RegisterRequestValidationError{
			field:  "Id",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RegisterRequestMultiError(errors)
	}

	return nil
}

func (m *RegisterRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *RegisterRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// RegisterRequestMultiError is an error wrapping multiple validation errors
// returned by RegisterRequest.ValidateAll() if the designated constraints
// aren't met.
type RegisterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterRequestMultiError) AllErrors() []error { return m }

// RegisterRequestValidationError is the validation error returned by
// RegisterRequest.Validate if the designated constraints aren't met.
type RegisterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterRequestValidationError) ErrorName() string { return "RegisterRequestValidationError" }

// Error satisfies the builtin error interface
func (e RegisterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterRequestValidationError{}

var _RegisterRequest_Phone_Pattern = regexp.MustCompile("^1[3456789][0-9]{9}$")

var _RegisterRequest_Username_Pattern = regexp.MustCompile("^[a-zA-Z][a-zA-Z0-9_-]{4,15}$")

// Validate checks the field values on RegisterResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RegisterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterResponseMultiError, or nil if none found.
func (m *RegisterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Token

	if len(errors) > 0 {
		return RegisterResponseMultiError(errors)
	}

	return nil
}

// RegisterResponseMultiError is an error wrapping multiple validation errors
// returned by RegisterResponse.ValidateAll() if the designated constraints
// aren't met.
type RegisterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterResponseMultiError) AllErrors() []error { return m }

// RegisterResponseValidationError is the validation error returned by
// RegisterResponse.Validate if the designated constraints aren't met.
type RegisterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterResponseValidationError) ErrorName() string { return "RegisterResponseValidationError" }

// Error satisfies the builtin error interface
func (e RegisterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterResponseValidationError{}

// Validate checks the field values on GetCaptchaRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetCaptchaRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCaptchaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCaptchaRequestMultiError, or nil if none found.
func (m *GetCaptchaRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCaptchaRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	oneofKeyPresent := false
	switch v := m.Key.(type) {
	case *GetCaptchaRequest_Phone:
		if v == nil {
			err := GetCaptchaRequestValidationError{
				field:  "Key",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofKeyPresent = true

		if !_GetCaptchaRequest_Phone_Pattern.MatchString(m.GetPhone()) {
			err := GetCaptchaRequestValidationError{
				field:  "Phone",
				reason: "value does not match regex pattern \"^1[3456789][0-9]{9}$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	case *GetCaptchaRequest_Email:
		if v == nil {
			err := GetCaptchaRequestValidationError{
				field:  "Key",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofKeyPresent = true

		if err := m._validateEmail(m.GetEmail()); err != nil {
			err = GetCaptchaRequestValidationError{
				field:  "Email",
				reason: "value must be a valid email address",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	default:
		_ = v // ensures v is used
	}
	if !oneofKeyPresent {
		err := GetCaptchaRequestValidationError{
			field:  "Key",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetCaptchaRequestMultiError(errors)
	}

	return nil
}

func (m *GetCaptchaRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *GetCaptchaRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// GetCaptchaRequestMultiError is an error wrapping multiple validation errors
// returned by GetCaptchaRequest.ValidateAll() if the designated constraints
// aren't met.
type GetCaptchaRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCaptchaRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCaptchaRequestMultiError) AllErrors() []error { return m }

// GetCaptchaRequestValidationError is the validation error returned by
// GetCaptchaRequest.Validate if the designated constraints aren't met.
type GetCaptchaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCaptchaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCaptchaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCaptchaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCaptchaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCaptchaRequestValidationError) ErrorName() string {
	return "GetCaptchaRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCaptchaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCaptchaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCaptchaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCaptchaRequestValidationError{}

var _GetCaptchaRequest_Phone_Pattern = regexp.MustCompile("^1[3456789][0-9]{9}$")

// Validate checks the field values on GetUserInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserInfoResponseMultiError, or nil if none found.
func (m *GetUserInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Nickname

	// no validation rules for Username

	{
		sorted_keys := make([]string, len(m.GetPermissions()))
		i := 0
		for key := range m.GetPermissions() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetPermissions()[key]
			_ = val

			// no validation rules for Permissions[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, GetUserInfoResponseValidationError{
							field:  fmt.Sprintf("Permissions[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, GetUserInfoResponseValidationError{
							field:  fmt.Sprintf("Permissions[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return GetUserInfoResponseValidationError{
						field:  fmt.Sprintf("Permissions[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return GetUserInfoResponseMultiError(errors)
	}

	return nil
}

// GetUserInfoResponseMultiError is an error wrapping multiple validation
// errors returned by GetUserInfoResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUserInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserInfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserInfoResponseMultiError) AllErrors() []error { return m }

// GetUserInfoResponseValidationError is the validation error returned by
// GetUserInfoResponse.Validate if the designated constraints aren't met.
type GetUserInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserInfoResponseValidationError) ErrorName() string {
	return "GetUserInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserInfoResponseValidationError{}

// Validate checks the field values on User with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on User with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UserMultiError, or nil if none found.
func (m *User) ValidateAll() error {
	return m.validate(true)
}

func (m *User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Nickname

	// no validation rules for Username

	// no validation rules for Realname

	// no validation rules for Role

	if len(errors) > 0 {
		return UserMultiError(errors)
	}

	return nil
}

// UserMultiError is an error wrapping multiple validation errors returned by
// User.ValidateAll() if the designated constraints aren't met.
type UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserMultiError) AllErrors() []error { return m }

// UserValidationError is the validation error returned by User.Validate if the
// designated constraints aren't met.
type UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserValidationError) ErrorName() string { return "UserValidationError" }

// Error satisfies the builtin error interface
func (e UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserValidationError{}

// Validate checks the field values on GetUserRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUserRequestMultiError,
// or nil if none found.
func (m *GetUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetUserRequestMultiError(errors)
	}

	return nil
}

// GetUserRequestMultiError is an error wrapping multiple validation errors
// returned by GetUserRequest.ValidateAll() if the designated constraints
// aren't met.
type GetUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserRequestMultiError) AllErrors() []error { return m }

// GetUserRequestValidationError is the validation error returned by
// GetUserRequest.Validate if the designated constraints aren't met.
type GetUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserRequestValidationError) ErrorName() string { return "GetUserRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserRequestValidationError{}

// Validate checks the field values on UpdateUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserRequestMultiError, or nil if none found.
func (m *UpdateUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Nickname

	if len(errors) > 0 {
		return UpdateUserRequestMultiError(errors)
	}

	return nil
}

// UpdateUserRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateUserRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserRequestMultiError) AllErrors() []error { return m }

// UpdateUserRequestValidationError is the validation error returned by
// UpdateUserRequest.Validate if the designated constraints aren't met.
type UpdateUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserRequestValidationError) ErrorName() string {
	return "UpdateUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserRequestValidationError{}

// Validate checks the field values on UpdateUserPasswordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserPasswordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserPasswordRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserPasswordRequestMultiError, or nil if none found.
func (m *UpdateUserPasswordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserPasswordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for OldPassword

	// no validation rules for NewPassword

	if len(errors) > 0 {
		return UpdateUserPasswordRequestMultiError(errors)
	}

	return nil
}

// UpdateUserPasswordRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateUserPasswordRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateUserPasswordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserPasswordRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserPasswordRequestMultiError) AllErrors() []error { return m }

// UpdateUserPasswordRequestValidationError is the validation error returned by
// UpdateUserPasswordRequest.Validate if the designated constraints aren't met.
type UpdateUserPasswordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserPasswordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserPasswordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserPasswordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserPasswordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserPasswordRequestValidationError) ErrorName() string {
	return "UpdateUserPasswordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserPasswordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserPasswordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserPasswordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserPasswordRequestValidationError{}

// Validate checks the field values on GetUserProfileCalendarRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserProfileCalendarRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserProfileCalendarRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetUserProfileCalendarRequestMultiError, or nil if none found.
func (m *GetUserProfileCalendarRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserProfileCalendarRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Year

	if len(errors) > 0 {
		return GetUserProfileCalendarRequestMultiError(errors)
	}

	return nil
}

// GetUserProfileCalendarRequestMultiError is an error wrapping multiple
// validation errors returned by GetUserProfileCalendarRequest.ValidateAll()
// if the designated constraints aren't met.
type GetUserProfileCalendarRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserProfileCalendarRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserProfileCalendarRequestMultiError) AllErrors() []error { return m }

// GetUserProfileCalendarRequestValidationError is the validation error
// returned by GetUserProfileCalendarRequest.Validate if the designated
// constraints aren't met.
type GetUserProfileCalendarRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserProfileCalendarRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserProfileCalendarRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserProfileCalendarRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserProfileCalendarRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserProfileCalendarRequestValidationError) ErrorName() string {
	return "GetUserProfileCalendarRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserProfileCalendarRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserProfileCalendarRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserProfileCalendarRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserProfileCalendarRequestValidationError{}

// Validate checks the field values on GetUserProfileCalendarResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserProfileCalendarResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserProfileCalendarResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetUserProfileCalendarResponseMultiError, or nil if none found.
func (m *GetUserProfileCalendarResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserProfileCalendarResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSubmissionCalendar() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserProfileCalendarResponseValidationError{
						field:  fmt.Sprintf("SubmissionCalendar[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserProfileCalendarResponseValidationError{
						field:  fmt.Sprintf("SubmissionCalendar[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserProfileCalendarResponseValidationError{
					field:  fmt.Sprintf("SubmissionCalendar[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalActiveDays

	// no validation rules for TotalSubmission

	// no validation rules for TotalProblemSolved

	// no validation rules for Start

	// no validation rules for End

	if len(errors) > 0 {
		return GetUserProfileCalendarResponseMultiError(errors)
	}

	return nil
}

// GetUserProfileCalendarResponseMultiError is an error wrapping multiple
// validation errors returned by GetUserProfileCalendarResponse.ValidateAll()
// if the designated constraints aren't met.
type GetUserProfileCalendarResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserProfileCalendarResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserProfileCalendarResponseMultiError) AllErrors() []error { return m }

// GetUserProfileCalendarResponseValidationError is the validation error
// returned by GetUserProfileCalendarResponse.Validate if the designated
// constraints aren't met.
type GetUserProfileCalendarResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserProfileCalendarResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserProfileCalendarResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserProfileCalendarResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserProfileCalendarResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserProfileCalendarResponseValidationError) ErrorName() string {
	return "GetUserProfileCalendarResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserProfileCalendarResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserProfileCalendarResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserProfileCalendarResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserProfileCalendarResponseValidationError{}

// Validate checks the field values on GetUserProfileProblemSolvedRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetUserProfileProblemSolvedRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserProfileProblemSolvedRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetUserProfileProblemSolvedRequestMultiError, or nil if none found.
func (m *GetUserProfileProblemSolvedRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserProfileProblemSolvedRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Type

	// no validation rules for Page

	// no validation rules for PerPage

	if len(errors) > 0 {
		return GetUserProfileProblemSolvedRequestMultiError(errors)
	}

	return nil
}

// GetUserProfileProblemSolvedRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetUserProfileProblemSolvedRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserProfileProblemSolvedRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserProfileProblemSolvedRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserProfileProblemSolvedRequestMultiError) AllErrors() []error { return m }

// GetUserProfileProblemSolvedRequestValidationError is the validation error
// returned by GetUserProfileProblemSolvedRequest.Validate if the designated
// constraints aren't met.
type GetUserProfileProblemSolvedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserProfileProblemSolvedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserProfileProblemSolvedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserProfileProblemSolvedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserProfileProblemSolvedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserProfileProblemSolvedRequestValidationError) ErrorName() string {
	return "GetUserProfileProblemSolvedRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserProfileProblemSolvedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserProfileProblemSolvedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserProfileProblemSolvedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserProfileProblemSolvedRequestValidationError{}

// Validate checks the field values on GetUserProfileProblemSolvedResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetUserProfileProblemSolvedResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserProfileProblemSolvedResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetUserProfileProblemSolvedResponseMultiError, or nil if none found.
func (m *GetUserProfileProblemSolvedResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserProfileProblemSolvedResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetProblemsets() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserProfileProblemSolvedResponseValidationError{
						field:  fmt.Sprintf("Problemsets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserProfileProblemSolvedResponseValidationError{
						field:  fmt.Sprintf("Problemsets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserProfileProblemSolvedResponseValidationError{
					field:  fmt.Sprintf("Problemsets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetContests() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserProfileProblemSolvedResponseValidationError{
						field:  fmt.Sprintf("Contests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserProfileProblemSolvedResponseValidationError{
						field:  fmt.Sprintf("Contests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserProfileProblemSolvedResponseValidationError{
					field:  fmt.Sprintf("Contests[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetGroups() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserProfileProblemSolvedResponseValidationError{
						field:  fmt.Sprintf("Groups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserProfileProblemSolvedResponseValidationError{
						field:  fmt.Sprintf("Groups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserProfileProblemSolvedResponseValidationError{
					field:  fmt.Sprintf("Groups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return GetUserProfileProblemSolvedResponseMultiError(errors)
	}

	return nil
}

// GetUserProfileProblemSolvedResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetUserProfileProblemSolvedResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUserProfileProblemSolvedResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserProfileProblemSolvedResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserProfileProblemSolvedResponseMultiError) AllErrors() []error { return m }

// GetUserProfileProblemSolvedResponseValidationError is the validation error
// returned by GetUserProfileProblemSolvedResponse.Validate if the designated
// constraints aren't met.
type GetUserProfileProblemSolvedResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserProfileProblemSolvedResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserProfileProblemSolvedResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserProfileProblemSolvedResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserProfileProblemSolvedResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserProfileProblemSolvedResponseValidationError) ErrorName() string {
	return "GetUserProfileProblemSolvedResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserProfileProblemSolvedResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserProfileProblemSolvedResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserProfileProblemSolvedResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserProfileProblemSolvedResponseValidationError{}

// Validate checks the field values on GetUserProfileCountRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserProfileCountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserProfileCountRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserProfileCountRequestMultiError, or nil if none found.
func (m *GetUserProfileCountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserProfileCountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetUserProfileCountRequestMultiError(errors)
	}

	return nil
}

// GetUserProfileCountRequestMultiError is an error wrapping multiple
// validation errors returned by GetUserProfileCountRequest.ValidateAll() if
// the designated constraints aren't met.
type GetUserProfileCountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserProfileCountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserProfileCountRequestMultiError) AllErrors() []error { return m }

// GetUserProfileCountRequestValidationError is the validation error returned
// by GetUserProfileCountRequest.Validate if the designated constraints aren't met.
type GetUserProfileCountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserProfileCountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserProfileCountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserProfileCountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserProfileCountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserProfileCountRequestValidationError) ErrorName() string {
	return "GetUserProfileCountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserProfileCountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserProfileCountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserProfileCountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserProfileCountRequestValidationError{}

// Validate checks the field values on GetUserProfileCountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserProfileCountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserProfileCountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserProfileCountResponseMultiError, or nil if none found.
func (m *GetUserProfileCountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserProfileCountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProblemSolved

	// no validation rules for ContestRating

	for idx, item := range m.GetContestRankingHistory() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserProfileCountResponseValidationError{
						field:  fmt.Sprintf("ContestRankingHistory[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserProfileCountResponseValidationError{
						field:  fmt.Sprintf("ContestRankingHistory[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserProfileCountResponseValidationError{
					field:  fmt.Sprintf("ContestRankingHistory[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetUserProfileCountResponseMultiError(errors)
	}

	return nil
}

// GetUserProfileCountResponseMultiError is an error wrapping multiple
// validation errors returned by GetUserProfileCountResponse.ValidateAll() if
// the designated constraints aren't met.
type GetUserProfileCountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserProfileCountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserProfileCountResponseMultiError) AllErrors() []error { return m }

// GetUserProfileCountResponseValidationError is the validation error returned
// by GetUserProfileCountResponse.Validate if the designated constraints
// aren't met.
type GetUserProfileCountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserProfileCountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserProfileCountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserProfileCountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserProfileCountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserProfileCountResponseValidationError) ErrorName() string {
	return "GetUserProfileCountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserProfileCountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserProfileCountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserProfileCountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserProfileCountResponseValidationError{}

// Validate checks the field values on
// GetUserProfileCalendarResponse_ProfileCalendar with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserProfileCalendarResponse_ProfileCalendar) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetUserProfileCalendarResponse_ProfileCalendar with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// GetUserProfileCalendarResponse_ProfileCalendarMultiError, or nil if none found.
func (m *GetUserProfileCalendarResponse_ProfileCalendar) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserProfileCalendarResponse_ProfileCalendar) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Date

	// no validation rules for Count

	if len(errors) > 0 {
		return GetUserProfileCalendarResponse_ProfileCalendarMultiError(errors)
	}

	return nil
}

// GetUserProfileCalendarResponse_ProfileCalendarMultiError is an error
// wrapping multiple validation errors returned by
// GetUserProfileCalendarResponse_ProfileCalendar.ValidateAll() if the
// designated constraints aren't met.
type GetUserProfileCalendarResponse_ProfileCalendarMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserProfileCalendarResponse_ProfileCalendarMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserProfileCalendarResponse_ProfileCalendarMultiError) AllErrors() []error { return m }

// GetUserProfileCalendarResponse_ProfileCalendarValidationError is the
// validation error returned by
// GetUserProfileCalendarResponse_ProfileCalendar.Validate if the designated
// constraints aren't met.
type GetUserProfileCalendarResponse_ProfileCalendarValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserProfileCalendarResponse_ProfileCalendarValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserProfileCalendarResponse_ProfileCalendarValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetUserProfileCalendarResponse_ProfileCalendarValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserProfileCalendarResponse_ProfileCalendarValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserProfileCalendarResponse_ProfileCalendarValidationError) ErrorName() string {
	return "GetUserProfileCalendarResponse_ProfileCalendarValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserProfileCalendarResponse_ProfileCalendarValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserProfileCalendarResponse_ProfileCalendar.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserProfileCalendarResponse_ProfileCalendarValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserProfileCalendarResponse_ProfileCalendarValidationError{}

// Validate checks the field values on
// GetUserProfileProblemSolvedResponse_Problem with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserProfileProblemSolvedResponse_Problem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetUserProfileProblemSolvedResponse_Problem with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetUserProfileProblemSolvedResponse_ProblemMultiError, or nil if none found.
func (m *GetUserProfileProblemSolvedResponse_Problem) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserProfileProblemSolvedResponse_Problem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Status

	if len(errors) > 0 {
		return GetUserProfileProblemSolvedResponse_ProblemMultiError(errors)
	}

	return nil
}

// GetUserProfileProblemSolvedResponse_ProblemMultiError is an error wrapping
// multiple validation errors returned by
// GetUserProfileProblemSolvedResponse_Problem.ValidateAll() if the designated
// constraints aren't met.
type GetUserProfileProblemSolvedResponse_ProblemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserProfileProblemSolvedResponse_ProblemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserProfileProblemSolvedResponse_ProblemMultiError) AllErrors() []error { return m }

// GetUserProfileProblemSolvedResponse_ProblemValidationError is the validation
// error returned by GetUserProfileProblemSolvedResponse_Problem.Validate if
// the designated constraints aren't met.
type GetUserProfileProblemSolvedResponse_ProblemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserProfileProblemSolvedResponse_ProblemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserProfileProblemSolvedResponse_ProblemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserProfileProblemSolvedResponse_ProblemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserProfileProblemSolvedResponse_ProblemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserProfileProblemSolvedResponse_ProblemValidationError) ErrorName() string {
	return "GetUserProfileProblemSolvedResponse_ProblemValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserProfileProblemSolvedResponse_ProblemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserProfileProblemSolvedResponse_Problem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserProfileProblemSolvedResponse_ProblemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserProfileProblemSolvedResponse_ProblemValidationError{}

// Validate checks the field values on
// GetUserProfileProblemSolvedResponse_Problemset with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserProfileProblemSolvedResponse_Problemset) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetUserProfileProblemSolvedResponse_Problemset with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// GetUserProfileProblemSolvedResponse_ProblemsetMultiError, or nil if none found.
func (m *GetUserProfileProblemSolvedResponse_Problemset) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserProfileProblemSolvedResponse_Problemset) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Count

	// no validation rules for Total

	for idx, item := range m.GetProblems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserProfileProblemSolvedResponse_ProblemsetValidationError{
						field:  fmt.Sprintf("Problems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserProfileProblemSolvedResponse_ProblemsetValidationError{
						field:  fmt.Sprintf("Problems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserProfileProblemSolvedResponse_ProblemsetValidationError{
					field:  fmt.Sprintf("Problems[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetUserProfileProblemSolvedResponse_ProblemsetMultiError(errors)
	}

	return nil
}

// GetUserProfileProblemSolvedResponse_ProblemsetMultiError is an error
// wrapping multiple validation errors returned by
// GetUserProfileProblemSolvedResponse_Problemset.ValidateAll() if the
// designated constraints aren't met.
type GetUserProfileProblemSolvedResponse_ProblemsetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserProfileProblemSolvedResponse_ProblemsetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserProfileProblemSolvedResponse_ProblemsetMultiError) AllErrors() []error { return m }

// GetUserProfileProblemSolvedResponse_ProblemsetValidationError is the
// validation error returned by
// GetUserProfileProblemSolvedResponse_Problemset.Validate if the designated
// constraints aren't met.
type GetUserProfileProblemSolvedResponse_ProblemsetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserProfileProblemSolvedResponse_ProblemsetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserProfileProblemSolvedResponse_ProblemsetValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetUserProfileProblemSolvedResponse_ProblemsetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserProfileProblemSolvedResponse_ProblemsetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserProfileProblemSolvedResponse_ProblemsetValidationError) ErrorName() string {
	return "GetUserProfileProblemSolvedResponse_ProblemsetValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserProfileProblemSolvedResponse_ProblemsetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserProfileProblemSolvedResponse_Problemset.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserProfileProblemSolvedResponse_ProblemsetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserProfileProblemSolvedResponse_ProblemsetValidationError{}

// Validate checks the field values on
// GetUserProfileProblemSolvedResponse_Contest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserProfileProblemSolvedResponse_Contest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetUserProfileProblemSolvedResponse_Contest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetUserProfileProblemSolvedResponse_ContestMultiError, or nil if none found.
func (m *GetUserProfileProblemSolvedResponse_Contest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserProfileProblemSolvedResponse_Contest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for GroupName

	// no validation rules for GroupId

	// no validation rules for Count

	// no validation rules for Total

	for idx, item := range m.GetProblems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserProfileProblemSolvedResponse_ContestValidationError{
						field:  fmt.Sprintf("Problems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserProfileProblemSolvedResponse_ContestValidationError{
						field:  fmt.Sprintf("Problems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserProfileProblemSolvedResponse_ContestValidationError{
					field:  fmt.Sprintf("Problems[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetUserProfileProblemSolvedResponse_ContestMultiError(errors)
	}

	return nil
}

// GetUserProfileProblemSolvedResponse_ContestMultiError is an error wrapping
// multiple validation errors returned by
// GetUserProfileProblemSolvedResponse_Contest.ValidateAll() if the designated
// constraints aren't met.
type GetUserProfileProblemSolvedResponse_ContestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserProfileProblemSolvedResponse_ContestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserProfileProblemSolvedResponse_ContestMultiError) AllErrors() []error { return m }

// GetUserProfileProblemSolvedResponse_ContestValidationError is the validation
// error returned by GetUserProfileProblemSolvedResponse_Contest.Validate if
// the designated constraints aren't met.
type GetUserProfileProblemSolvedResponse_ContestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserProfileProblemSolvedResponse_ContestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserProfileProblemSolvedResponse_ContestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserProfileProblemSolvedResponse_ContestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserProfileProblemSolvedResponse_ContestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserProfileProblemSolvedResponse_ContestValidationError) ErrorName() string {
	return "GetUserProfileProblemSolvedResponse_ContestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserProfileProblemSolvedResponse_ContestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserProfileProblemSolvedResponse_Contest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserProfileProblemSolvedResponse_ContestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserProfileProblemSolvedResponse_ContestValidationError{}

// Validate checks the field values on
// GetUserProfileProblemSolvedResponse_Group with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserProfileProblemSolvedResponse_Group) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetUserProfileProblemSolvedResponse_Group with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetUserProfileProblemSolvedResponse_GroupMultiError, or nil if none found.
func (m *GetUserProfileProblemSolvedResponse_Group) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserProfileProblemSolvedResponse_Group) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Count

	// no validation rules for Total

	for idx, item := range m.GetContests() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserProfileProblemSolvedResponse_GroupValidationError{
						field:  fmt.Sprintf("Contests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserProfileProblemSolvedResponse_GroupValidationError{
						field:  fmt.Sprintf("Contests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserProfileProblemSolvedResponse_GroupValidationError{
					field:  fmt.Sprintf("Contests[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetUserProfileProblemSolvedResponse_GroupMultiError(errors)
	}

	return nil
}

// GetUserProfileProblemSolvedResponse_GroupMultiError is an error wrapping
// multiple validation errors returned by
// GetUserProfileProblemSolvedResponse_Group.ValidateAll() if the designated
// constraints aren't met.
type GetUserProfileProblemSolvedResponse_GroupMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserProfileProblemSolvedResponse_GroupMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserProfileProblemSolvedResponse_GroupMultiError) AllErrors() []error { return m }

// GetUserProfileProblemSolvedResponse_GroupValidationError is the validation
// error returned by GetUserProfileProblemSolvedResponse_Group.Validate if the
// designated constraints aren't met.
type GetUserProfileProblemSolvedResponse_GroupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserProfileProblemSolvedResponse_GroupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserProfileProblemSolvedResponse_GroupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserProfileProblemSolvedResponse_GroupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserProfileProblemSolvedResponse_GroupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserProfileProblemSolvedResponse_GroupValidationError) ErrorName() string {
	return "GetUserProfileProblemSolvedResponse_GroupValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserProfileProblemSolvedResponse_GroupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserProfileProblemSolvedResponse_Group.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserProfileProblemSolvedResponse_GroupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserProfileProblemSolvedResponse_GroupValidationError{}

// Validate checks the field values on
// GetUserProfileCountResponse_ContestRanking with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserProfileCountResponse_ContestRanking) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetUserProfileCountResponse_ContestRanking with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetUserProfileCountResponse_ContestRankingMultiError, or nil if none found.
func (m *GetUserProfileCountResponse_ContestRanking) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserProfileCountResponse_ContestRanking) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ContestId

	// no validation rules for Name

	// no validation rules for Ranking

	// no validation rules for Rating

	if len(errors) > 0 {
		return GetUserProfileCountResponse_ContestRankingMultiError(errors)
	}

	return nil
}

// GetUserProfileCountResponse_ContestRankingMultiError is an error wrapping
// multiple validation errors returned by
// GetUserProfileCountResponse_ContestRanking.ValidateAll() if the designated
// constraints aren't met.
type GetUserProfileCountResponse_ContestRankingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserProfileCountResponse_ContestRankingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserProfileCountResponse_ContestRankingMultiError) AllErrors() []error { return m }

// GetUserProfileCountResponse_ContestRankingValidationError is the validation
// error returned by GetUserProfileCountResponse_ContestRanking.Validate if
// the designated constraints aren't met.
type GetUserProfileCountResponse_ContestRankingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserProfileCountResponse_ContestRankingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserProfileCountResponse_ContestRankingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserProfileCountResponse_ContestRankingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserProfileCountResponse_ContestRankingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserProfileCountResponse_ContestRankingValidationError) ErrorName() string {
	return "GetUserProfileCountResponse_ContestRankingValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserProfileCountResponse_ContestRankingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserProfileCountResponse_ContestRanking.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserProfileCountResponse_ContestRankingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserProfileCountResponse_ContestRankingValidationError{}
