syntax = "proto3";

package jnoj.interface.v1.contest;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "validate/validate.proto";
import "google/protobuf/duration.proto";

option go_package = "api/interface/v1;v1";

service ContestService {
    // 比赛列表
    rpc ListContests (ListContestsRequest) returns (ListContestsResponse) {
        option (google.api.http) = {
            get: "/contests"
        };
    };
    // 比赛详情
    rpc GetContest (GetContestRequest) returns (Contest) {
        option (google.api.http) = {
            get: "/contests/{id}"
        };
    };
    // 创建比赛
    rpc CreateContest (CreateContestRequest) returns (Contest) {
        option (google.api.http) = {
            post: "/contests"
            body: "*"
        };
    };
    // 编辑比赛信息
    rpc UpdateContest (UpdateContestRequest) returns (Contest) {
        option (google.api.http) = {
            put: "/contests/{id}"
            body: "*"
        };
    };
    // 获取比赛榜单
    rpc GetContestStanding (GetContestStandingRequest) returns (GetContestStandingResponse) {
        option (google.api.http) = {
            get: "/contests/{id}/standing"
        };
    };
    // 获取比赛题目列表
    rpc ListContestProblems (ListContestProblemsRequest) returns (ListContestProblemsResponse) {
        option (google.api.http) = {
            get: "/contests/{id}/problems"
        };
    };
    // 获取比赛题目
    rpc GetContestProblem (GetContestProblemRequest) returns (ContestProblem) {
        option (google.api.http) = {
            get: "/contests/{id}/problems/{number}"
        };
    };
    // 创建比赛题目
    rpc CreateContestProblem (CreateContestProblemRequest) returns (CreateContestProblemResponse) {
        option (google.api.http) = {
            post: "/contests/{id}/problems"
            body: "*"
        };
    };
    // 删除比赛题目
    rpc DeleteContestProblem (DeleteContestProblemRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/contests/{id}/problems/{number}"
        };
    };
    // 语言列表
    rpc ListContestProblemLanguages (ListContestProblemLanguagesRequest) returns (ListContestProblemLanguagesResponse) {
        option (google.api.http) = {
            get: "/contests/{id}/problems/{number}/languages"
        };
    }
    // 语言详情
    rpc GetContestProblemLanguage (GetContestProblemLanguageRequest) returns (ContestProblemLanguage) {
        option (google.api.http) = {
            get: "/contests/{id}/problems/{number}/languages/{language}"
        };
    }
    // 获取比赛用户
    rpc ListContestUsers (ListContestUsersRequest) returns (ListContestUsersResponse) {
        option (google.api.http) = {
            get: "/contests/{contest_id}/users"
        };
    }
    // 用户注册比赛
    rpc CreateContestUser (CreateContestUserRequest) returns (ContestUser) {
        option (google.api.http) = {
            post: "/contests/{contest_id}/users"
            body: "*"
        };
    }
    // 删除比赛用户
    rpc DeleteContestUser (DeleteContestUserRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/contests/{contest_id}/users/{user_id}"
        };
    }
    // 获取比赛用户信息
    rpc GetContestUser (GetContestUserRequest) returns (ContestUser) {
        option (google.api.http) = {
            get: "/contests/{contest_id}/users/{user_id}"
        };
    }
    // 批量添加用户
    rpc BatchCreateContestUsers (BatchCreateContestUsersRequest) returns (BatchCreateContestUsersResponse) {
        option (google.api.http) = {
            post: "/contests/{contest_id}/batch_users"
            body: "*"
        };
    } 
    // 修改比赛用户信息
    rpc UpdateContestUser (UpdateContestUserRequest) returns (ContestUser) {
        option (google.api.http) = {
            put: "/contests/{contest_id}/users"
            body: "*"
        };
    }
    // 退出虚拟竞赛
    rpc ExitVirtualContest (ExitVirtualContestRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/contests/{contest_id}/exit_virtual"
            body: "*"
        };
    }
    // 获取全部提交列表
    rpc ListContestAllSubmissions (ListContestAllSubmissionsRequest) returns (ListContestAllSubmissionsResponse) {
        option (google.api.http) = {
            get: "/contests/{contest_id}/all_submissions"
        };
    }
    // 获取提交列表
    rpc ListContestSubmissions (ListContestSubmissionsRequest) returns (ListContestSubmissionsResponse) {
        option (google.api.http) = {
            get: "/contests/{contest_id}/submissions"
        };
    }
    // 计算比赛积分
    rpc CalculateContestRating (CalculateContestRatingRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/contests/{contest_id}/calculate_rating"
            body: "*"
        };
    }
    // 获取等级分变化
    rpc ListContestRatingChanges (ListContestRatingChangesRequest) returns (ListContestRatingChangesResponse) {
        option (google.api.http) = {
            get: "/contests/{contest_id}/rating_changes"
        };
    }
    // 查询比赛特效
    rpc QueryContestSpecialEffects (QueryContestSpecialEffectsRequest) returns (QueryContestSpecialEffectsResponse) {
        option (google.api.http) = {
            get: "/contests/{contest_id}/special_effects"
        };
    }
    // 获取比赛排名统计列表
    rpc ListContestStandingStats (ListContestStandingStatsRequest) returns (ListContestStandingStatsResponse) {
        option (google.api.http) = {
            get: "/contest/standing_stats"
        };
    }
}

message ListContestsRequest {
    string name = 1;
    optional int32 group_id = 2;
    optional RunningStatus running_status = 3;
    optional string order_by = 4;
    google.protobuf.Timestamp end_time = 5;
    int32 page = 6;
    int32 per_page = 7;
}
message ListContestsResponse {
    repeated Contest data = 1;
    int64 total = 2;
}

message GetContestRequest {
    int32 id = 1;
}

enum ContestPrivacy {
    PRIVATE = 0;
    PUBLIC = 1;
};

enum ContestMembership {
    ALLOW_ANYONE = 0;
    INVITATION_CODE = 1;
    GROUP_USER = 2;
}

// 比赛用户角色
enum ContestUserRole {
    ROLE_GUEST = 0; // 游客
    ROLE_OFFICIAL_PLAYER = 1; // 选手，只有正式选手参与排名
    ROLE_UNOFFICIAL_PLAYER = 2; // 非正式选手，不参与排名
    ROLE_VIRTUAL_PLAYER = 3; // 虚拟比赛
    ROLE_WRITER = 4; // 出题人
    ROLE_ADMIN = 5; // 管理
};

message UpdateContestRequest {
    int32 id = 1;
    string name = 2;
    string description = 3;
    google.protobuf.Timestamp start_time = 4;
    google.protobuf.Timestamp end_time = 5;
    google.protobuf.Timestamp frozen_time = 6;
    ContestType type = 7;
    ContestPrivacy privacy = 8;
    ContestMembership membership = 9;
    string invitation_code = 10;
    string feature = 11;
}

message GetContestStandingRequest {
    int32 id = 1;
    bool is_virtual_included = 2;
    bool is_official = 3;
    int32 page = 4;
    int32 per_page = 5;
}

message ContestStandingUser {
    enum Status {
        PENDING = 0;
        INCORRECT = 1;
        CORRECT = 2;
    };
    message Problem {
        int32 attempted = 1;
        bool is_first_blood = 2;
        Status status = 3;
        int32 score = 4; // 题目得分
        int32 solved_at = 5; // 在比赛开始多少分钟解决的
        int32 max_score = 6; 
        bool is_in_comp = 7; // 是否处于比赛期间的提交
    }
    int32 rank = 1;
    string who = 2;
    string user_avatar = 3;
    int32 user_id = 4;
    int32 solved = 5;
    bool is_rank = 6;
    bool is_virtual = 7;
    int32 score = 8;
    int32 max_score = 9;
    map<int32, Problem> problem = 10;
}

message GetContestStandingResponse {
    repeated ContestStandingUser data = 1;
    int32 total = 2;
}

enum ContestType {
    ICPC = 0;
    IOI = 1;
    OI = 2;
}

enum RunningStatus {
    // 尚未开始
    NOT_STARTED = 0;
    // 进行中
    IN_PROGRESS = 1;
    // 进行中（封榜）
    FROZEN_STANDINGS = 2;
    // 已结束
    FINISHED = 3;
}

message Contest {
    int32 id = 1;
    string name = 2;
    string description = 3;
    google.protobuf.Timestamp start_time = 4;
    google.protobuf.Timestamp end_time = 5;
    google.protobuf.Timestamp frozen_time = 6;
    ContestType type = 7;
    ContestPrivacy privacy = 8;
    ContestMembership membership = 9;
    string invitation_code = 10 [(validate.rules).string = {max_len: 16}];
    int32 participant_count = 11;
    int32 user_id = 12;
    // 当前登录用户的角色
    ContestUserRole role = 13;
    // 登录用户虚拟参赛开始时间
    google.protobuf.Timestamp virtual_start = 14;
    // 登录用户虚拟参赛结束时间
    google.protobuf.Timestamp virtual_end = 15;
    // 运行状态
    RunningStatus running_status = 16;
    message Owner {
        enum OwnerType {
            GROUP = 0;
            USER = 1;
        }
        OwnerType type = 1;
        int32 id = 2;
        string name = 3;
        string user_nickname = 4;
    }
    Owner owner = 17;
    string feature = 18;
}

message ListContestProblemsRequest {
    int32 id = 1;
}

message ListContestProblemsResponse {
    repeated ContestProblem data = 1;
    int64 total = 2;
}

message GetContestProblemRequest{
    int32 id = 1;
    int32 number = 2;
}

message CreateContestRequest {
    string name = 1;
    int32 group_id = 2;
    google.protobuf.Timestamp start_time = 7;
    google.protobuf.Timestamp end_time = 8;
}

message ContestProblem {// 题目类型：标准输入输出、函数题
    enum ProblemType {
        DEFAULT = 0; // 标准输入输出
        FUNCTION = 1; // 函数题
    }
    int32 id = 1;
    string name = 2;
    int32 number = 3;
    int32 contest_id = 4;
    int32 problem_id = 5;
    int32 submit_count = 6;
    int32 accepted_count = 7;
    int64 time_limit = 8;
    int64 memory_limit = 9;
    string source = 10;
    ProblemType type = 11;
    message Statement {
        int32 id = 1;
        int32 problem_id = 2;
        string language = 3;
        string name = 4;
        string legend = 5;
        string input = 6;
        string output = 7;
        string note = 8;
    }
    repeated Statement statements = 12;
    // 样例
    message SampleTest {
        string input = 1;
        string output = 2;
    }
    repeated SampleTest sample_tests = 13;
    // 解答情况
    enum Status {
        NOT_START = 0;
        ATTEMPTED = 1;
        SOLVED = 2;
    }
    Status status = 14;
}

message CreateContestProblemRequest {
    int32 id = 1;
    repeated int32 problem_ids = 2;
}

message CreateContestProblemResponse {
    message Problem {
        int32 problem_id = 1;
        string reason = 2;
    }
    repeated Problem success = 1;
    repeated Problem failed = 2;
}

message DeleteContestProblemRequest {
    int32 id = 1;
    int32 number = 2;
}

message ContestUser {
    int32 id = 1;
    string name = 2;
    int32 user_id = 3;
    string user_nickname = 4;
    string user_avatar = 5;
    google.protobuf.Timestamp virtual_start = 6;
    int32 old_rating = 7;
    int32 new_rating = 8;
    ContestUserRole role = 9;
    string special_effects = 10;
}

message ListContestUsersRequest {
    int32 contest_id = 1;
    string name = 2;
    optional ContestUserRole role = 3;
    int32 page = 4;
    int32 per_page = 5;
}

message ListContestUsersResponse {
    repeated ContestUser data = 1;
    int64 total = 2;
}

message CreateContestUserRequest {
    int32 contest_id = 1;
    string invitation_code = 2;
    string name = 3 [(validate.rules).string = {max_len: 64}];
}

message DeleteContestUserRequest {
    int32 contest_id = 1;
    int32 user_id = 2;
}

message GetContestUserRequest {
    int32 contest_id = 1;
    int32 user_id = 2;
}

message BatchCreateContestUsersRequest {
    message ContestUser {
        string username = 1;
        string name = 2;
    }
    repeated ContestUser users = 1;
    ContestUserRole role = 2;
    int32 contest_id = 3;
}

message BatchCreateContestUsersResponse {
    message ContestUser {
        string username = 1;
        string name = 2;
        string reason = 3;
    }
    repeated ContestUser success = 1;
    repeated ContestUser failed = 2;
}

message UpdateContestUserRequest {
    int32 contest_id = 1;
    int32 user_id = 2;
    string name = 3;
    ContestUserRole role = 4;
}

message ExitVirtualContestRequest {
    int32 contest_id = 1;
}

message ListContestAllSubmissionsRequest {
    int32 contest_id = 1;
}

message ListContestAllSubmissionsResponse {
    message Submission {
        int32 id = 1;
        int32 problem = 2;
        enum Status {
            PENDING = 0;
            INCORRECT = 1;
            CORRECT = 2;
        };
        Status status = 3;
        int32 user_id = 4;
        int32 score = 5;
        int32 inComp = 6;
    }
    repeated Submission data = 1;
}

message ListContestSubmissionsRequest {
    int32 contest_id = 1;
    repeated int32 verdict = 2;
    optional int32 problem = 3;
    int32 user_id = 4;
    int32 page = 5;
    int32 per_page = 6;
}

message ListContestSubmissionsResponse {
    message User {
        int32 id = 1;
        string nickname = 2;
    }
    message Submission {
        int32 id = 1;
        int32 problem_number = 2;
        string problem_name = 3;
        int32 verdict = 4;
        int32 time = 5;
        int32 memory = 6;
        int32 user_id = 7;
        int32 score = 8;
        int32 language = 9;
        User user = 10;
        google.protobuf.Timestamp created_at = 11;
    }
    repeated Submission data = 1;
    int64 total = 2;
}

message ContestProblemLanguage {
    int32 id = 1;
    int32 language_code = 2;
    string language_name = 3;
    string user_content = 4;
    string main_content = 5;
}

message ListContestProblemLanguagesRequest {
    int32 id = 1;
    int32 number = 2;
}

message ListContestProblemLanguagesResponse {
    repeated ContestProblemLanguage data = 1;
    int64 total = 2;
}

message GetContestProblemLanguageRequest {
    int32 id = 1;
    int32 number = 2;
    int32 language = 3;
}

message CalculateContestRatingRequest {
    int32 contest_id = 1;
}

message QueryContestSpecialEffectsRequest {
    int32 contest_id = 1;
}

message QueryContestSpecialEffectsResponse {
    string contest_name = 1;
    string user_name = 2;
    google.protobuf.Duration contestDuration = 3;
    optional google.protobuf.Duration ak_time = 4;
}

message ListContestRatingChangesRequest {
    int32 contest_id = 1;
    int32 page = 2;
    int32 per_page = 3;
}

message ListContestRatingChangesResponse {
    repeated ContestUser data = 1;
    int64 total = 2;
}

message ListContestStandingStatsRequest {
    repeated int32 contest_ids = 1;
    int32 group_id = 2;
    repeated int32 user_id = 3;
}

message ListContestStandingStatsResponse {
    message ContestStanding {
        int32 contest_id = 1;
        string contest_name = 2;
        int32 rank = 3;
        int32 score = 4;
        google.protobuf.Timestamp start_time = 5;
    }
    repeated ContestStanding data = 1;
}
