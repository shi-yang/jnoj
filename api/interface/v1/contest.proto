syntax = "proto3";

package jnoj.interface.v1;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

option go_package = "api/interface/v1;v1";

service ContestService {
    // 比赛列表
    rpc ListContests (ListContestsRequest) returns (ListContestsResponse) {
        option (google.api.http) = {
            get: "/contests"
        };
    };
    // 比赛详情
    rpc GetContest (GetContestRequest) returns (Contest) {
        option (google.api.http) = {
            get: "/contests/{id}"
        };
    };
    // 创建比赛
    rpc CreateContest (CreateContestRequest) returns (Contest) {
        option (google.api.http) = {
            post: "/contests"
            body: "*"
        };
    };
    // 编辑比赛信息
    rpc UpdateContest (UpdateContestRequest) returns (Contest) {
        option (google.api.http) = {
            put: "/contests/{id}"
            body: "*"
        };
    };
    // 获取比赛题目列表
    rpc ListContestProblems (ListContestProblemsRequest) returns (ListContestProblemsResponse) {
        option (google.api.http) = {
            get: "/contests/{id}/problems"
        };
    };
    // 获取比赛题目
    rpc GetContestProblem (GetContestProblemRequest) returns (ContestProblem) {
        option (google.api.http) = {
            get: "/contests/{id}/problems/{number}"
        };
    };
    // 创建比赛题目
    rpc CreateContestProblem (CreateContestProblemRequest) returns (ContestProblem) {
        option (google.api.http) = {
            post: "/contests/{id}/problems"
            body: "*"
        };
    };
    // 删除比赛题目
    rpc DeleteContestProblem (DeleteContestProblemRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/contests/{id}/problems/{number}"
        };
    };
    // 语言列表
    rpc ListContestProblemLanguages (ListContestProblemLanguagesRequest) returns (ListContestProblemLanguagesResponse) {
        option (google.api.http) = {
            get: "/contests/{id}/problems/{number}/languages"
        };
    }
    // 语言详情
    rpc GetContestProblemLanguage (GetContestProblemLanguageRequest) returns (ContestProblemLanguage) {
        option (google.api.http) = {
            get: "/contests/{id}/problems/{number}/languages/{language}"
        };
    }
    // 获取比赛用户
    rpc ListContestUsers (ListContestUsersRequest) returns (ListContestUsersResponse) {
        option (google.api.http) = {
            get: "/contests/{id}/users"
        };
    }
    // 注册比赛
    rpc CreateContestUser (CreateContestUserRequest) returns (ContestUser) {
        option (google.api.http) = {
            post: "/contests/{id}/users"
            body: "*"
        };
    }
    // 获取比赛榜单
    rpc ListContestAllSubmissions (ListContestAllSubmissionsRequest) returns (ListContestAllSubmissionsResponse) {
        option (google.api.http) = {
            get: "/contests/{id}/all_submissions"
        };
    }
    // 获取提交列表
    rpc ListContestSubmissions (ListContestSubmissionsRequest) returns (ListContestSubmissionsResponse) {
        option (google.api.http) = {
            get: "/contests/{id}/submissions"
        };
    }
}

message ListContestsRequest {
    string name = 1;
    int32 group_id = 2;
    int32 page = 3;
    int32 per_page = 4;
}
message ListContestsResponse {
    repeated Contest data = 1;
    int64 total = 2;
}

message GetContestRequest {
    int32 id = 1;
}

enum ContestStatus {
    HIDDEN = 0;
    PUBLIC = 1;
    PRIVATE = 2;
};

message UpdateContestRequest {
    int32 id = 1;
    string name = 2;
    string description = 3;
    google.protobuf.Timestamp start_time = 4;
    google.protobuf.Timestamp end_time = 5;
    google.protobuf.Timestamp frozen_time = 6;
    int32 type = 7;
    ContestStatus status = 8;
    int32 participant_count = 9;
}

message Contest {
    int32 id = 1;
    string name = 2;
    string description = 3;
    google.protobuf.Timestamp start_time = 4;
    google.protobuf.Timestamp end_time = 5;
    google.protobuf.Timestamp frozen_time = 6;
    int32 type = 7;
    ContestStatus status = 8;
    int32 participant_count = 9;
    int32 user_id = 10;
    // 当前登录用户是否参赛
    bool is_registered = 11;
    // 登录用户的角色
    enum Role {
        GUEST = 0;
        PLAYER = 1;
        ADMIN = 2;
    };
    Role role = 12;
    enum RunningStatus {
        // 尚未开始
        NOT_STARTED = 0;
        // 进行中
        IN_PROGRESS = 1;
        // 进行中（封榜）
        FROZEN_STANDINGS = 2;
        // 已结束
        FINISHED = 3;
    }
    // 运行状态
    RunningStatus running_status = 13;
}

message ListContestProblemsRequest {
    int32 id = 1;
}

message ListContestProblemsResponse {
    repeated ContestProblem data = 1;
    int64 total = 2;
}

message GetContestProblemRequest{
    int32 id = 1;
    int32 number = 2;
}

message CreateContestRequest {
    string name = 1;
    int32 group_id = 2;
    google.protobuf.Timestamp start_time = 7;
    google.protobuf.Timestamp end_time = 8;
}

message ContestProblem {
    int32 id = 1;
    string name = 2;
    int32 number = 3;
    int32 contest_id = 4;
    int32 problem_id = 5;
    int32 submit_count = 6;
    int32 accepted_count = 7;
    int64 time_limit = 8;
    int64 memory_limit = 9;
    string source = 10;
    message Statement {
        int32 id = 1;
        int32 problem_id = 2;
        string language = 3;
        string name = 4;
        string legend = 5;
        string input = 6;
        string output = 7;
        string note = 8;
    }
    repeated Statement statements = 11;
    // 样例
    message SampleTest {
        string input = 1;
        string output = 2;
    }
    repeated SampleTest sample_tests = 12;
}

message CreateContestProblemRequest {
    int32 id = 1;
    int32 problem_id = 2;
}

message DeleteContestProblemRequest {
    int32 id = 1;
    int32 number = 2;
}

message ContestUser {
    int32 id = 1;
    string nickname = 2;
    int32 user_id = 3;
}

message ListContestUsersRequest {
    int32 id = 1;
    int32 page = 2;
    int32 per_page = 3;
}

message ListContestUsersResponse {
    repeated ContestUser data = 1;
    int64 total = 2;
}

message CreateContestUserRequest {
    int32 id = 1;
}

message ListContestAllSubmissionsRequest {
    int32 id = 1;
    int32 user_id = 2;
}

message ListContestAllSubmissionsResponse {
    message Submission {
        int32 id = 1;
        int32 problem = 2;
        enum Status {
            PENDING = 0;
            INCORRECT = 1;
            CORRECT = 2;
        };
        Status status = 3;
        int32 user_id = 4;
        int32 score = 5;
    }
    repeated Submission data = 1;
}

message ListContestSubmissionsRequest {
    int32 id = 1;
    int32 page = 2;
    int32 per_page = 3;
}

message ListContestSubmissionsResponse {
    message User {
        int32 id = 1;
        string nickname = 2;
    }
    message Submission {
        int32 id = 1;
        int32 problem_number = 2;
        string problem_name = 3;
        int32 verdict = 4;
        int32 time = 5;
        int32 memory = 6;
        int32 user_id = 7;
        int32 score = 8;
        int32 language = 9;
        User user = 10;
        google.protobuf.Timestamp created_at = 11;
    }
    repeated Submission data = 1;
    int64 total = 2;
}

message ContestProblemLanguage {
    int32 id = 1;
    int32 language_code = 2;
    string language_name = 3;
    string user_content = 4;
    string main_content = 5;
}

message ListContestProblemLanguagesRequest {
    int32 id = 1;
    int32 number = 2;
}

message ListContestProblemLanguagesResponse {
    repeated ContestProblemLanguage data = 1;
    int64 total = 2;
}

message GetContestProblemLanguageRequest {
    int32 id = 1;
    int32 number = 2;
    int32 language = 3;
}
