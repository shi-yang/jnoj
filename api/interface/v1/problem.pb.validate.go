// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/problem.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Problem with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Problem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Problem with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ProblemMultiError, or nil if none found.
func (m *Problem) ValidateAll() error {
	return m.validate(true)
}

func (m *Problem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for TimeLimit

	// no validation rules for MemoryLimit

	for idx, item := range m.GetStatements() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProblemValidationError{
						field:  fmt.Sprintf("Statements[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProblemValidationError{
						field:  fmt.Sprintf("Statements[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProblemValidationError{
					field:  fmt.Sprintf("Statements[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for AcceptedCount

	// no validation rules for SubmitCount

	// no validation rules for Status

	// no validation rules for CheckerId

	// no validation rules for Source

	for idx, item := range m.GetSampleTests() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProblemValidationError{
						field:  fmt.Sprintf("SampleTests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProblemValidationError{
						field:  fmt.Sprintf("SampleTests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProblemValidationError{
					field:  fmt.Sprintf("SampleTests[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProblemValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProblemValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProblemValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProblemValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProblemValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProblemValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ProblemMultiError(errors)
	}

	return nil
}

// ProblemMultiError is an error wrapping multiple validation errors returned
// by Problem.ValidateAll() if the designated constraints aren't met.
type ProblemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProblemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProblemMultiError) AllErrors() []error { return m }

// ProblemValidationError is the validation error returned by Problem.Validate
// if the designated constraints aren't met.
type ProblemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProblemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProblemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProblemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProblemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProblemValidationError) ErrorName() string { return "ProblemValidationError" }

// Error satisfies the builtin error interface
func (e ProblemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProblem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProblemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProblemValidationError{}

// Validate checks the field values on ProblemStatement with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ProblemStatement) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProblemStatement with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProblemStatementMultiError, or nil if none found.
func (m *ProblemStatement) ValidateAll() error {
	return m.validate(true)
}

func (m *ProblemStatement) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ProblemId

	// no validation rules for Language

	// no validation rules for Name

	// no validation rules for Legend

	// no validation rules for Input

	// no validation rules for Output

	// no validation rules for Note

	if len(errors) > 0 {
		return ProblemStatementMultiError(errors)
	}

	return nil
}

// ProblemStatementMultiError is an error wrapping multiple validation errors
// returned by ProblemStatement.ValidateAll() if the designated constraints
// aren't met.
type ProblemStatementMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProblemStatementMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProblemStatementMultiError) AllErrors() []error { return m }

// ProblemStatementValidationError is the validation error returned by
// ProblemStatement.Validate if the designated constraints aren't met.
type ProblemStatementValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProblemStatementValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProblemStatementValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProblemStatementValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProblemStatementValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProblemStatementValidationError) ErrorName() string { return "ProblemStatementValidationError" }

// Error satisfies the builtin error interface
func (e ProblemStatementValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProblemStatement.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProblemStatementValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProblemStatementValidationError{}

// Validate checks the field values on ListProblemsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProblemsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProblemsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProblemsRequestMultiError, or nil if none found.
func (m *ListProblemsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProblemsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for UserId

	// no validation rules for Status

	// no validation rules for Filter

	// no validation rules for OrderBy

	// no validation rules for Page

	// no validation rules for PerPage

	if len(errors) > 0 {
		return ListProblemsRequestMultiError(errors)
	}

	return nil
}

// ListProblemsRequestMultiError is an error wrapping multiple validation
// errors returned by ListProblemsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListProblemsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProblemsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProblemsRequestMultiError) AllErrors() []error { return m }

// ListProblemsRequestValidationError is the validation error returned by
// ListProblemsRequest.Validate if the designated constraints aren't met.
type ListProblemsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProblemsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProblemsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProblemsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProblemsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProblemsRequestValidationError) ErrorName() string {
	return "ListProblemsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProblemsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProblemsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProblemsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProblemsRequestValidationError{}

// Validate checks the field values on ListProblemsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProblemsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProblemsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProblemsResponseMultiError, or nil if none found.
func (m *ListProblemsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProblemsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListProblemsResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListProblemsResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProblemsResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListProblemsResponseMultiError(errors)
	}

	return nil
}

// ListProblemsResponseMultiError is an error wrapping multiple validation
// errors returned by ListProblemsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListProblemsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProblemsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProblemsResponseMultiError) AllErrors() []error { return m }

// ListProblemsResponseValidationError is the validation error returned by
// ListProblemsResponse.Validate if the designated constraints aren't met.
type ListProblemsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProblemsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProblemsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProblemsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProblemsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProblemsResponseValidationError) ErrorName() string {
	return "ListProblemsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProblemsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProblemsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProblemsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProblemsResponseValidationError{}

// Validate checks the field values on GetProblemRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetProblemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProblemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProblemRequestMultiError, or nil if none found.
func (m *GetProblemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProblemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetProblemRequestMultiError(errors)
	}

	return nil
}

// GetProblemRequestMultiError is an error wrapping multiple validation errors
// returned by GetProblemRequest.ValidateAll() if the designated constraints
// aren't met.
type GetProblemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProblemRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProblemRequestMultiError) AllErrors() []error { return m }

// GetProblemRequestValidationError is the validation error returned by
// GetProblemRequest.Validate if the designated constraints aren't met.
type GetProblemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProblemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProblemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProblemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProblemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProblemRequestValidationError) ErrorName() string {
	return "GetProblemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProblemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProblemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProblemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProblemRequestValidationError{}

// Validate checks the field values on CreateProblemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProblemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProblemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProblemRequestMultiError, or nil if none found.
func (m *CreateProblemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProblemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Type

	if len(errors) > 0 {
		return CreateProblemRequestMultiError(errors)
	}

	return nil
}

// CreateProblemRequestMultiError is an error wrapping multiple validation
// errors returned by CreateProblemRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateProblemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProblemRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProblemRequestMultiError) AllErrors() []error { return m }

// CreateProblemRequestValidationError is the validation error returned by
// CreateProblemRequest.Validate if the designated constraints aren't met.
type CreateProblemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProblemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProblemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProblemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProblemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProblemRequestValidationError) ErrorName() string {
	return "CreateProblemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProblemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProblemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProblemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProblemRequestValidationError{}

// Validate checks the field values on CreateProblemResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProblemResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProblemResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProblemResponseMultiError, or nil if none found.
func (m *CreateProblemResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProblemResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateProblemResponseMultiError(errors)
	}

	return nil
}

// CreateProblemResponseMultiError is an error wrapping multiple validation
// errors returned by CreateProblemResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateProblemResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProblemResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProblemResponseMultiError) AllErrors() []error { return m }

// CreateProblemResponseValidationError is the validation error returned by
// CreateProblemResponse.Validate if the designated constraints aren't met.
type CreateProblemResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProblemResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProblemResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProblemResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProblemResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProblemResponseValidationError) ErrorName() string {
	return "CreateProblemResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProblemResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProblemResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProblemResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProblemResponseValidationError{}

// Validate checks the field values on UpdateProblemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProblemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProblemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProblemRequestMultiError, or nil if none found.
func (m *UpdateProblemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProblemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if val := m.GetTimeLimit(); val < 250 || val > 15000 {
		err := UpdateProblemRequestValidationError{
			field:  "TimeLimit",
			reason: "value must be inside range [250, 15000]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetMemoryLimit(); val < 4 || val > 1024 {
		err := UpdateProblemRequestValidationError{
			field:  "MemoryLimit",
			reason: "value must be inside range [4, 1024]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Status

	// no validation rules for Source

	if len(errors) > 0 {
		return UpdateProblemRequestMultiError(errors)
	}

	return nil
}

// UpdateProblemRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateProblemRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateProblemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProblemRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProblemRequestMultiError) AllErrors() []error { return m }

// UpdateProblemRequestValidationError is the validation error returned by
// UpdateProblemRequest.Validate if the designated constraints aren't met.
type UpdateProblemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProblemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProblemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProblemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProblemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProblemRequestValidationError) ErrorName() string {
	return "UpdateProblemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProblemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProblemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProblemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProblemRequestValidationError{}

// Validate checks the field values on ListProblemStatementsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProblemStatementsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProblemStatementsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProblemStatementsRequestMultiError, or nil if none found.
func (m *ListProblemStatementsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProblemStatementsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Page

	// no validation rules for PerPage

	if len(errors) > 0 {
		return ListProblemStatementsRequestMultiError(errors)
	}

	return nil
}

// ListProblemStatementsRequestMultiError is an error wrapping multiple
// validation errors returned by ListProblemStatementsRequest.ValidateAll() if
// the designated constraints aren't met.
type ListProblemStatementsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProblemStatementsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProblemStatementsRequestMultiError) AllErrors() []error { return m }

// ListProblemStatementsRequestValidationError is the validation error returned
// by ListProblemStatementsRequest.Validate if the designated constraints
// aren't met.
type ListProblemStatementsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProblemStatementsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProblemStatementsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProblemStatementsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProblemStatementsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProblemStatementsRequestValidationError) ErrorName() string {
	return "ListProblemStatementsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProblemStatementsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProblemStatementsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProblemStatementsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProblemStatementsRequestValidationError{}

// Validate checks the field values on ListProblemStatementsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProblemStatementsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProblemStatementsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListProblemStatementsResponseMultiError, or nil if none found.
func (m *ListProblemStatementsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProblemStatementsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListProblemStatementsResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListProblemStatementsResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProblemStatementsResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListProblemStatementsResponseMultiError(errors)
	}

	return nil
}

// ListProblemStatementsResponseMultiError is an error wrapping multiple
// validation errors returned by ListProblemStatementsResponse.ValidateAll()
// if the designated constraints aren't met.
type ListProblemStatementsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProblemStatementsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProblemStatementsResponseMultiError) AllErrors() []error { return m }

// ListProblemStatementsResponseValidationError is the validation error
// returned by ListProblemStatementsResponse.Validate if the designated
// constraints aren't met.
type ListProblemStatementsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProblemStatementsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProblemStatementsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProblemStatementsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProblemStatementsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProblemStatementsResponseValidationError) ErrorName() string {
	return "ListProblemStatementsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProblemStatementsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProblemStatementsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProblemStatementsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProblemStatementsResponseValidationError{}

// Validate checks the field values on GetProblemStatementRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProblemStatementRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProblemStatementRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProblemStatementRequestMultiError, or nil if none found.
func (m *GetProblemStatementRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProblemStatementRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetProblemStatementRequestMultiError(errors)
	}

	return nil
}

// GetProblemStatementRequestMultiError is an error wrapping multiple
// validation errors returned by GetProblemStatementRequest.ValidateAll() if
// the designated constraints aren't met.
type GetProblemStatementRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProblemStatementRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProblemStatementRequestMultiError) AllErrors() []error { return m }

// GetProblemStatementRequestValidationError is the validation error returned
// by GetProblemStatementRequest.Validate if the designated constraints aren't met.
type GetProblemStatementRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProblemStatementRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProblemStatementRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProblemStatementRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProblemStatementRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProblemStatementRequestValidationError) ErrorName() string {
	return "GetProblemStatementRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProblemStatementRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProblemStatementRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProblemStatementRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProblemStatementRequestValidationError{}

// Validate checks the field values on CreateProblemStatementRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProblemStatementRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProblemStatementRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateProblemStatementRequestMultiError, or nil if none found.
func (m *CreateProblemStatementRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProblemStatementRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Language

	if len(errors) > 0 {
		return CreateProblemStatementRequestMultiError(errors)
	}

	return nil
}

// CreateProblemStatementRequestMultiError is an error wrapping multiple
// validation errors returned by CreateProblemStatementRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateProblemStatementRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProblemStatementRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProblemStatementRequestMultiError) AllErrors() []error { return m }

// CreateProblemStatementRequestValidationError is the validation error
// returned by CreateProblemStatementRequest.Validate if the designated
// constraints aren't met.
type CreateProblemStatementRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProblemStatementRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProblemStatementRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProblemStatementRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProblemStatementRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProblemStatementRequestValidationError) ErrorName() string {
	return "CreateProblemStatementRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProblemStatementRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProblemStatementRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProblemStatementRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProblemStatementRequestValidationError{}

// Validate checks the field values on UpdateProblemStatementRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProblemStatementRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProblemStatementRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateProblemStatementRequestMultiError, or nil if none found.
func (m *UpdateProblemStatementRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProblemStatementRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Sid

	// no validation rules for Language

	// no validation rules for Name

	// no validation rules for Input

	// no validation rules for Output

	// no validation rules for Note

	// no validation rules for Legend

	if len(errors) > 0 {
		return UpdateProblemStatementRequestMultiError(errors)
	}

	return nil
}

// UpdateProblemStatementRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateProblemStatementRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateProblemStatementRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProblemStatementRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProblemStatementRequestMultiError) AllErrors() []error { return m }

// UpdateProblemStatementRequestValidationError is the validation error
// returned by UpdateProblemStatementRequest.Validate if the designated
// constraints aren't met.
type UpdateProblemStatementRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProblemStatementRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProblemStatementRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProblemStatementRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProblemStatementRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProblemStatementRequestValidationError) ErrorName() string {
	return "UpdateProblemStatementRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProblemStatementRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProblemStatementRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProblemStatementRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProblemStatementRequestValidationError{}

// Validate checks the field values on DeleteProblemStatementRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProblemStatementRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProblemStatementRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteProblemStatementRequestMultiError, or nil if none found.
func (m *DeleteProblemStatementRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProblemStatementRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Sid

	if len(errors) > 0 {
		return DeleteProblemStatementRequestMultiError(errors)
	}

	return nil
}

// DeleteProblemStatementRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteProblemStatementRequest.ValidateAll()
// if the designated constraints aren't met.
type DeleteProblemStatementRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProblemStatementRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProblemStatementRequestMultiError) AllErrors() []error { return m }

// DeleteProblemStatementRequestValidationError is the validation error
// returned by DeleteProblemStatementRequest.Validate if the designated
// constraints aren't met.
type DeleteProblemStatementRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProblemStatementRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProblemStatementRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProblemStatementRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProblemStatementRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProblemStatementRequestValidationError) ErrorName() string {
	return "DeleteProblemStatementRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProblemStatementRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProblemStatementRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProblemStatementRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProblemStatementRequestValidationError{}

// Validate checks the field values on ListProblemTestsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProblemTestsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProblemTestsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProblemTestsRequestMultiError, or nil if none found.
func (m *ListProblemTestsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProblemTestsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Page

	// no validation rules for PerPage

	if len(errors) > 0 {
		return ListProblemTestsRequestMultiError(errors)
	}

	return nil
}

// ListProblemTestsRequestMultiError is an error wrapping multiple validation
// errors returned by ListProblemTestsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListProblemTestsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProblemTestsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProblemTestsRequestMultiError) AllErrors() []error { return m }

// ListProblemTestsRequestValidationError is the validation error returned by
// ListProblemTestsRequest.Validate if the designated constraints aren't met.
type ListProblemTestsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProblemTestsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProblemTestsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProblemTestsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProblemTestsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProblemTestsRequestValidationError) ErrorName() string {
	return "ListProblemTestsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProblemTestsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProblemTestsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProblemTestsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProblemTestsRequestValidationError{}

// Validate checks the field values on ListProblemTestsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProblemTestsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProblemTestsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProblemTestsResponseMultiError, or nil if none found.
func (m *ListProblemTestsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProblemTestsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListProblemTestsResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListProblemTestsResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProblemTestsResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Count

	if len(errors) > 0 {
		return ListProblemTestsResponseMultiError(errors)
	}

	return nil
}

// ListProblemTestsResponseMultiError is an error wrapping multiple validation
// errors returned by ListProblemTestsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListProblemTestsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProblemTestsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProblemTestsResponseMultiError) AllErrors() []error { return m }

// ListProblemTestsResponseValidationError is the validation error returned by
// ListProblemTestsResponse.Validate if the designated constraints aren't met.
type ListProblemTestsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProblemTestsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProblemTestsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProblemTestsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProblemTestsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProblemTestsResponseValidationError) ErrorName() string {
	return "ListProblemTestsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProblemTestsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProblemTestsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProblemTestsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProblemTestsResponseValidationError{}

// Validate checks the field values on GetProblemTestRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProblemTestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProblemTestRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProblemTestRequestMultiError, or nil if none found.
func (m *GetProblemTestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProblemTestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetProblemTestRequestMultiError(errors)
	}

	return nil
}

// GetProblemTestRequestMultiError is an error wrapping multiple validation
// errors returned by GetProblemTestRequest.ValidateAll() if the designated
// constraints aren't met.
type GetProblemTestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProblemTestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProblemTestRequestMultiError) AllErrors() []error { return m }

// GetProblemTestRequestValidationError is the validation error returned by
// GetProblemTestRequest.Validate if the designated constraints aren't met.
type GetProblemTestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProblemTestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProblemTestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProblemTestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProblemTestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProblemTestRequestValidationError) ErrorName() string {
	return "GetProblemTestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProblemTestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProblemTestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProblemTestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProblemTestRequestValidationError{}

// Validate checks the field values on ProblemTest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ProblemTest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProblemTest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ProblemTestMultiError, or
// nil if none found.
func (m *ProblemTest) ValidateAll() error {
	return m.validate(true)
}

func (m *ProblemTest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ProblemId

	// no validation rules for IsExample

	// no validation rules for Name

	// no validation rules for InputSize

	// no validation rules for InputPreview

	// no validation rules for InputFileContent

	// no validation rules for OutputSize

	// no validation rules for OutputPreview

	// no validation rules for OutputFileContent

	// no validation rules for Remark

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProblemTestValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProblemTestValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProblemTestValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProblemTestValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProblemTestValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProblemTestValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ProblemTestMultiError(errors)
	}

	return nil
}

// ProblemTestMultiError is an error wrapping multiple validation errors
// returned by ProblemTest.ValidateAll() if the designated constraints aren't met.
type ProblemTestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProblemTestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProblemTestMultiError) AllErrors() []error { return m }

// ProblemTestValidationError is the validation error returned by
// ProblemTest.Validate if the designated constraints aren't met.
type ProblemTestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProblemTestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProblemTestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProblemTestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProblemTestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProblemTestValidationError) ErrorName() string { return "ProblemTestValidationError" }

// Error satisfies the builtin error interface
func (e ProblemTestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProblemTest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProblemTestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProblemTestValidationError{}

// Validate checks the field values on CreateProblemTestRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProblemTestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProblemTestRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProblemTestRequestMultiError, or nil if none found.
func (m *CreateProblemTestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProblemTestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for FileContent

	// no validation rules for Filename

	if len(errors) > 0 {
		return CreateProblemTestRequestMultiError(errors)
	}

	return nil
}

// CreateProblemTestRequestMultiError is an error wrapping multiple validation
// errors returned by CreateProblemTestRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateProblemTestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProblemTestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProblemTestRequestMultiError) AllErrors() []error { return m }

// CreateProblemTestRequestValidationError is the validation error returned by
// CreateProblemTestRequest.Validate if the designated constraints aren't met.
type CreateProblemTestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProblemTestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProblemTestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProblemTestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProblemTestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProblemTestRequestValidationError) ErrorName() string {
	return "CreateProblemTestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProblemTestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProblemTestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProblemTestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProblemTestRequestValidationError{}

// Validate checks the field values on UpdateProblemTestRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProblemTestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProblemTestRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProblemTestRequestMultiError, or nil if none found.
func (m *UpdateProblemTestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProblemTestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Tid

	// no validation rules for IsExample

	// no validation rules for Remark

	if len(errors) > 0 {
		return UpdateProblemTestRequestMultiError(errors)
	}

	return nil
}

// UpdateProblemTestRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateProblemTestRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateProblemTestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProblemTestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProblemTestRequestMultiError) AllErrors() []error { return m }

// UpdateProblemTestRequestValidationError is the validation error returned by
// UpdateProblemTestRequest.Validate if the designated constraints aren't met.
type UpdateProblemTestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProblemTestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProblemTestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProblemTestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProblemTestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProblemTestRequestValidationError) ErrorName() string {
	return "UpdateProblemTestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProblemTestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProblemTestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProblemTestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProblemTestRequestValidationError{}

// Validate checks the field values on DeleteProblemTestRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProblemTestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProblemTestRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteProblemTestRequestMultiError, or nil if none found.
func (m *DeleteProblemTestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProblemTestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Tid

	if len(errors) > 0 {
		return DeleteProblemTestRequestMultiError(errors)
	}

	return nil
}

// DeleteProblemTestRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteProblemTestRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteProblemTestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProblemTestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProblemTestRequestMultiError) AllErrors() []error { return m }

// DeleteProblemTestRequestValidationError is the validation error returned by
// DeleteProblemTestRequest.Validate if the designated constraints aren't met.
type DeleteProblemTestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProblemTestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProblemTestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProblemTestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProblemTestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProblemTestRequestValidationError) ErrorName() string {
	return "DeleteProblemTestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProblemTestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProblemTestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProblemTestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProblemTestRequestValidationError{}

// Validate checks the field values on SortProblemTestsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SortProblemTestsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SortProblemTestsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SortProblemTestsRequestMultiError, or nil if none found.
func (m *SortProblemTestsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SortProblemTestsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return SortProblemTestsRequestMultiError(errors)
	}

	return nil
}

// SortProblemTestsRequestMultiError is an error wrapping multiple validation
// errors returned by SortProblemTestsRequest.ValidateAll() if the designated
// constraints aren't met.
type SortProblemTestsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SortProblemTestsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SortProblemTestsRequestMultiError) AllErrors() []error { return m }

// SortProblemTestsRequestValidationError is the validation error returned by
// SortProblemTestsRequest.Validate if the designated constraints aren't met.
type SortProblemTestsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SortProblemTestsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SortProblemTestsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SortProblemTestsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SortProblemTestsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SortProblemTestsRequestValidationError) ErrorName() string {
	return "SortProblemTestsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SortProblemTestsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSortProblemTestsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SortProblemTestsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SortProblemTestsRequestValidationError{}

// Validate checks the field values on ListProblemFilesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProblemFilesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProblemFilesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProblemFilesRequestMultiError, or nil if none found.
func (m *ListProblemFilesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProblemFilesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for FileType

	// no validation rules for Page

	// no validation rules for PerPage

	if len(errors) > 0 {
		return ListProblemFilesRequestMultiError(errors)
	}

	return nil
}

// ListProblemFilesRequestMultiError is an error wrapping multiple validation
// errors returned by ListProblemFilesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListProblemFilesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProblemFilesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProblemFilesRequestMultiError) AllErrors() []error { return m }

// ListProblemFilesRequestValidationError is the validation error returned by
// ListProblemFilesRequest.Validate if the designated constraints aren't met.
type ListProblemFilesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProblemFilesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProblemFilesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProblemFilesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProblemFilesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProblemFilesRequestValidationError) ErrorName() string {
	return "ListProblemFilesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProblemFilesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProblemFilesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProblemFilesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProblemFilesRequestValidationError{}

// Validate checks the field values on ListProblemFilesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProblemFilesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProblemFilesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProblemFilesResponseMultiError, or nil if none found.
func (m *ListProblemFilesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProblemFilesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListProblemFilesResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListProblemFilesResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProblemFilesResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListProblemFilesResponseMultiError(errors)
	}

	return nil
}

// ListProblemFilesResponseMultiError is an error wrapping multiple validation
// errors returned by ListProblemFilesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListProblemFilesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProblemFilesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProblemFilesResponseMultiError) AllErrors() []error { return m }

// ListProblemFilesResponseValidationError is the validation error returned by
// ListProblemFilesResponse.Validate if the designated constraints aren't met.
type ListProblemFilesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProblemFilesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProblemFilesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProblemFilesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProblemFilesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProblemFilesResponseValidationError) ErrorName() string {
	return "ListProblemFilesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProblemFilesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProblemFilesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProblemFilesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProblemFilesResponseValidationError{}

// Validate checks the field values on GetProblemFileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProblemFileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProblemFileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProblemFileRequestMultiError, or nil if none found.
func (m *GetProblemFileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProblemFileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Sid

	if len(errors) > 0 {
		return GetProblemFileRequestMultiError(errors)
	}

	return nil
}

// GetProblemFileRequestMultiError is an error wrapping multiple validation
// errors returned by GetProblemFileRequest.ValidateAll() if the designated
// constraints aren't met.
type GetProblemFileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProblemFileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProblemFileRequestMultiError) AllErrors() []error { return m }

// GetProblemFileRequestValidationError is the validation error returned by
// GetProblemFileRequest.Validate if the designated constraints aren't met.
type GetProblemFileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProblemFileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProblemFileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProblemFileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProblemFileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProblemFileRequestValidationError) ErrorName() string {
	return "GetProblemFileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProblemFileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProblemFileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProblemFileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProblemFileRequestValidationError{}

// Validate checks the field values on ProblemFile with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ProblemFile) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProblemFile with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ProblemFileMultiError, or
// nil if none found.
func (m *ProblemFile) ValidateAll() error {
	return m.validate(true)
}

func (m *ProblemFile) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Content

	// no validation rules for Type

	// no validation rules for UserId

	// no validation rules for FileType

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProblemFileValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProblemFileValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProblemFileValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProblemFileValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProblemFileValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProblemFileValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ProblemFileMultiError(errors)
	}

	return nil
}

// ProblemFileMultiError is an error wrapping multiple validation errors
// returned by ProblemFile.ValidateAll() if the designated constraints aren't met.
type ProblemFileMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProblemFileMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProblemFileMultiError) AllErrors() []error { return m }

// ProblemFileValidationError is the validation error returned by
// ProblemFile.Validate if the designated constraints aren't met.
type ProblemFileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProblemFileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProblemFileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProblemFileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProblemFileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProblemFileValidationError) ErrorName() string { return "ProblemFileValidationError" }

// Error satisfies the builtin error interface
func (e ProblemFileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProblemFile.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProblemFileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProblemFileValidationError{}

// Validate checks the field values on CreateProblemFileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProblemFileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProblemFileRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProblemFileRequestMultiError, or nil if none found.
func (m *CreateProblemFileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProblemFileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Content

	// no validation rules for Type

	// no validation rules for FileType

	// no validation rules for Filename

	// no validation rules for FileContent

	if len(errors) > 0 {
		return CreateProblemFileRequestMultiError(errors)
	}

	return nil
}

// CreateProblemFileRequestMultiError is an error wrapping multiple validation
// errors returned by CreateProblemFileRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateProblemFileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProblemFileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProblemFileRequestMultiError) AllErrors() []error { return m }

// CreateProblemFileRequestValidationError is the validation error returned by
// CreateProblemFileRequest.Validate if the designated constraints aren't met.
type CreateProblemFileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProblemFileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProblemFileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProblemFileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProblemFileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProblemFileRequestValidationError) ErrorName() string {
	return "CreateProblemFileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProblemFileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProblemFileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProblemFileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProblemFileRequestValidationError{}

// Validate checks the field values on UpdateProblemFileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProblemFileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProblemFileRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProblemFileRequestMultiError, or nil if none found.
func (m *UpdateProblemFileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProblemFileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Sid

	// no validation rules for Name

	// no validation rules for Content

	// no validation rules for Type

	if len(errors) > 0 {
		return UpdateProblemFileRequestMultiError(errors)
	}

	return nil
}

// UpdateProblemFileRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateProblemFileRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateProblemFileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProblemFileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProblemFileRequestMultiError) AllErrors() []error { return m }

// UpdateProblemFileRequestValidationError is the validation error returned by
// UpdateProblemFileRequest.Validate if the designated constraints aren't met.
type UpdateProblemFileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProblemFileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProblemFileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProblemFileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProblemFileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProblemFileRequestValidationError) ErrorName() string {
	return "UpdateProblemFileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProblemFileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProblemFileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProblemFileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProblemFileRequestValidationError{}

// Validate checks the field values on DeleteProblemFileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProblemFileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProblemFileRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteProblemFileRequestMultiError, or nil if none found.
func (m *DeleteProblemFileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProblemFileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Sid

	if len(errors) > 0 {
		return DeleteProblemFileRequestMultiError(errors)
	}

	return nil
}

// DeleteProblemFileRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteProblemFileRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteProblemFileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProblemFileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProblemFileRequestMultiError) AllErrors() []error { return m }

// DeleteProblemFileRequestValidationError is the validation error returned by
// DeleteProblemFileRequest.Validate if the designated constraints aren't met.
type DeleteProblemFileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProblemFileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProblemFileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProblemFileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProblemFileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProblemFileRequestValidationError) ErrorName() string {
	return "DeleteProblemFileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProblemFileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProblemFileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProblemFileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProblemFileRequestValidationError{}

// Validate checks the field values on RunProblemFileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RunProblemFileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RunProblemFileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RunProblemFileRequestMultiError, or nil if none found.
func (m *RunProblemFileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RunProblemFileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Sid

	if len(errors) > 0 {
		return RunProblemFileRequestMultiError(errors)
	}

	return nil
}

// RunProblemFileRequestMultiError is an error wrapping multiple validation
// errors returned by RunProblemFileRequest.ValidateAll() if the designated
// constraints aren't met.
type RunProblemFileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RunProblemFileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RunProblemFileRequestMultiError) AllErrors() []error { return m }

// RunProblemFileRequestValidationError is the validation error returned by
// RunProblemFileRequest.Validate if the designated constraints aren't met.
type RunProblemFileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RunProblemFileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RunProblemFileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RunProblemFileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RunProblemFileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RunProblemFileRequestValidationError) ErrorName() string {
	return "RunProblemFileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RunProblemFileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRunProblemFileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RunProblemFileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RunProblemFileRequestValidationError{}

// Validate checks the field values on ListProblemStdCheckersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProblemStdCheckersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProblemStdCheckersRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListProblemStdCheckersRequestMultiError, or nil if none found.
func (m *ListProblemStdCheckersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProblemStdCheckersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return ListProblemStdCheckersRequestMultiError(errors)
	}

	return nil
}

// ListProblemStdCheckersRequestMultiError is an error wrapping multiple
// validation errors returned by ListProblemStdCheckersRequest.ValidateAll()
// if the designated constraints aren't met.
type ListProblemStdCheckersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProblemStdCheckersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProblemStdCheckersRequestMultiError) AllErrors() []error { return m }

// ListProblemStdCheckersRequestValidationError is the validation error
// returned by ListProblemStdCheckersRequest.Validate if the designated
// constraints aren't met.
type ListProblemStdCheckersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProblemStdCheckersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProblemStdCheckersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProblemStdCheckersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProblemStdCheckersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProblemStdCheckersRequestValidationError) ErrorName() string {
	return "ListProblemStdCheckersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProblemStdCheckersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProblemStdCheckersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProblemStdCheckersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProblemStdCheckersRequestValidationError{}

// Validate checks the field values on ListProblemStdCheckersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProblemStdCheckersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProblemStdCheckersResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListProblemStdCheckersResponseMultiError, or nil if none found.
func (m *ListProblemStdCheckersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProblemStdCheckersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListProblemStdCheckersResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListProblemStdCheckersResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProblemStdCheckersResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListProblemStdCheckersResponseMultiError(errors)
	}

	return nil
}

// ListProblemStdCheckersResponseMultiError is an error wrapping multiple
// validation errors returned by ListProblemStdCheckersResponse.ValidateAll()
// if the designated constraints aren't met.
type ListProblemStdCheckersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProblemStdCheckersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProblemStdCheckersResponseMultiError) AllErrors() []error { return m }

// ListProblemStdCheckersResponseValidationError is the validation error
// returned by ListProblemStdCheckersResponse.Validate if the designated
// constraints aren't met.
type ListProblemStdCheckersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProblemStdCheckersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProblemStdCheckersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProblemStdCheckersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProblemStdCheckersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProblemStdCheckersResponseValidationError) ErrorName() string {
	return "ListProblemStdCheckersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProblemStdCheckersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProblemStdCheckersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProblemStdCheckersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProblemStdCheckersResponseValidationError{}

// Validate checks the field values on UpdateProblemCheckerRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProblemCheckerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProblemCheckerRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProblemCheckerRequestMultiError, or nil if none found.
func (m *UpdateProblemCheckerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProblemCheckerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CheckerId

	if len(errors) > 0 {
		return UpdateProblemCheckerRequestMultiError(errors)
	}

	return nil
}

// UpdateProblemCheckerRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateProblemCheckerRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateProblemCheckerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProblemCheckerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProblemCheckerRequestMultiError) AllErrors() []error { return m }

// UpdateProblemCheckerRequestValidationError is the validation error returned
// by UpdateProblemCheckerRequest.Validate if the designated constraints
// aren't met.
type UpdateProblemCheckerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProblemCheckerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProblemCheckerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProblemCheckerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProblemCheckerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProblemCheckerRequestValidationError) ErrorName() string {
	return "UpdateProblemCheckerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProblemCheckerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProblemCheckerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProblemCheckerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProblemCheckerRequestValidationError{}

// Validate checks the field values on VerifyProblemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VerifyProblemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyProblemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VerifyProblemRequestMultiError, or nil if none found.
func (m *VerifyProblemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyProblemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return VerifyProblemRequestMultiError(errors)
	}

	return nil
}

// VerifyProblemRequestMultiError is an error wrapping multiple validation
// errors returned by VerifyProblemRequest.ValidateAll() if the designated
// constraints aren't met.
type VerifyProblemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyProblemRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyProblemRequestMultiError) AllErrors() []error { return m }

// VerifyProblemRequestValidationError is the validation error returned by
// VerifyProblemRequest.Validate if the designated constraints aren't met.
type VerifyProblemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyProblemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyProblemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyProblemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyProblemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyProblemRequestValidationError) ErrorName() string {
	return "VerifyProblemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyProblemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyProblemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyProblemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyProblemRequestValidationError{}

// Validate checks the field values on GetProblemVerificationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProblemVerificationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProblemVerificationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetProblemVerificationRequestMultiError, or nil if none found.
func (m *GetProblemVerificationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProblemVerificationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetProblemVerificationRequestMultiError(errors)
	}

	return nil
}

// GetProblemVerificationRequestMultiError is an error wrapping multiple
// validation errors returned by GetProblemVerificationRequest.ValidateAll()
// if the designated constraints aren't met.
type GetProblemVerificationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProblemVerificationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProblemVerificationRequestMultiError) AllErrors() []error { return m }

// GetProblemVerificationRequestValidationError is the validation error
// returned by GetProblemVerificationRequest.Validate if the designated
// constraints aren't met.
type GetProblemVerificationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProblemVerificationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProblemVerificationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProblemVerificationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProblemVerificationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProblemVerificationRequestValidationError) ErrorName() string {
	return "GetProblemVerificationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProblemVerificationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProblemVerificationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProblemVerificationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProblemVerificationRequestValidationError{}

// Validate checks the field values on ProblemVerification with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProblemVerification) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProblemVerification with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProblemVerificationMultiError, or nil if none found.
func (m *ProblemVerification) ValidateAll() error {
	return m.validate(true)
}

func (m *ProblemVerification) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ProblemId

	// no validation rules for VerificationStatus

	for idx, item := range m.GetVerificaitonInfo() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProblemVerificationValidationError{
						field:  fmt.Sprintf("VerificaitonInfo[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProblemVerificationValidationError{
						field:  fmt.Sprintf("VerificaitonInfo[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProblemVerificationValidationError{
					field:  fmt.Sprintf("VerificaitonInfo[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ProblemVerificationMultiError(errors)
	}

	return nil
}

// ProblemVerificationMultiError is an error wrapping multiple validation
// errors returned by ProblemVerification.ValidateAll() if the designated
// constraints aren't met.
type ProblemVerificationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProblemVerificationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProblemVerificationMultiError) AllErrors() []error { return m }

// ProblemVerificationValidationError is the validation error returned by
// ProblemVerification.Validate if the designated constraints aren't met.
type ProblemVerificationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProblemVerificationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProblemVerificationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProblemVerificationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProblemVerificationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProblemVerificationValidationError) ErrorName() string {
	return "ProblemVerificationValidationError"
}

// Error satisfies the builtin error interface
func (e ProblemVerificationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProblemVerification.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProblemVerificationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProblemVerificationValidationError{}

// Validate checks the field values on Problemset with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Problemset) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Problemset with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ProblemsetMultiError, or
// nil if none found.
func (m *Problemset) ValidateAll() error {
	return m.validate(true)
}

func (m *Problemset) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for UserId

	// no validation rules for Description

	// no validation rules for ProblemCount

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProblemsetValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProblemsetValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProblemsetValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProblemsetValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProblemsetValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProblemsetValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ProblemsetMultiError(errors)
	}

	return nil
}

// ProblemsetMultiError is an error wrapping multiple validation errors
// returned by Problemset.ValidateAll() if the designated constraints aren't met.
type ProblemsetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProblemsetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProblemsetMultiError) AllErrors() []error { return m }

// ProblemsetValidationError is the validation error returned by
// Problemset.Validate if the designated constraints aren't met.
type ProblemsetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProblemsetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProblemsetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProblemsetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProblemsetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProblemsetValidationError) ErrorName() string { return "ProblemsetValidationError" }

// Error satisfies the builtin error interface
func (e ProblemsetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProblemset.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProblemsetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProblemsetValidationError{}

// Validate checks the field values on ListProblemsetsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProblemsetsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProblemsetsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProblemsetsRequestMultiError, or nil if none found.
func (m *ListProblemsetsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProblemsetsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Page

	// no validation rules for PerPage

	if len(errors) > 0 {
		return ListProblemsetsRequestMultiError(errors)
	}

	return nil
}

// ListProblemsetsRequestMultiError is an error wrapping multiple validation
// errors returned by ListProblemsetsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListProblemsetsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProblemsetsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProblemsetsRequestMultiError) AllErrors() []error { return m }

// ListProblemsetsRequestValidationError is the validation error returned by
// ListProblemsetsRequest.Validate if the designated constraints aren't met.
type ListProblemsetsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProblemsetsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProblemsetsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProblemsetsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProblemsetsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProblemsetsRequestValidationError) ErrorName() string {
	return "ListProblemsetsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProblemsetsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProblemsetsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProblemsetsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProblemsetsRequestValidationError{}

// Validate checks the field values on ListProblemsetsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProblemsetsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProblemsetsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProblemsetsResponseMultiError, or nil if none found.
func (m *ListProblemsetsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProblemsetsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListProblemsetsResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListProblemsetsResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProblemsetsResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListProblemsetsResponseMultiError(errors)
	}

	return nil
}

// ListProblemsetsResponseMultiError is an error wrapping multiple validation
// errors returned by ListProblemsetsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListProblemsetsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProblemsetsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProblemsetsResponseMultiError) AllErrors() []error { return m }

// ListProblemsetsResponseValidationError is the validation error returned by
// ListProblemsetsResponse.Validate if the designated constraints aren't met.
type ListProblemsetsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProblemsetsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProblemsetsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProblemsetsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProblemsetsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProblemsetsResponseValidationError) ErrorName() string {
	return "ListProblemsetsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProblemsetsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProblemsetsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProblemsetsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProblemsetsResponseValidationError{}

// Validate checks the field values on GetProblemsetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProblemsetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProblemsetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProblemsetRequestMultiError, or nil if none found.
func (m *GetProblemsetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProblemsetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetProblemsetRequestMultiError(errors)
	}

	return nil
}

// GetProblemsetRequestMultiError is an error wrapping multiple validation
// errors returned by GetProblemsetRequest.ValidateAll() if the designated
// constraints aren't met.
type GetProblemsetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProblemsetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProblemsetRequestMultiError) AllErrors() []error { return m }

// GetProblemsetRequestValidationError is the validation error returned by
// GetProblemsetRequest.Validate if the designated constraints aren't met.
type GetProblemsetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProblemsetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProblemsetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProblemsetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProblemsetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProblemsetRequestValidationError) ErrorName() string {
	return "GetProblemsetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProblemsetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProblemsetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProblemsetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProblemsetRequestValidationError{}

// Validate checks the field values on CreateProblemsetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProblemsetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProblemsetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProblemsetRequestMultiError, or nil if none found.
func (m *CreateProblemsetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProblemsetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Description

	if len(errors) > 0 {
		return CreateProblemsetRequestMultiError(errors)
	}

	return nil
}

// CreateProblemsetRequestMultiError is an error wrapping multiple validation
// errors returned by CreateProblemsetRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateProblemsetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProblemsetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProblemsetRequestMultiError) AllErrors() []error { return m }

// CreateProblemsetRequestValidationError is the validation error returned by
// CreateProblemsetRequest.Validate if the designated constraints aren't met.
type CreateProblemsetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProblemsetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProblemsetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProblemsetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProblemsetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProblemsetRequestValidationError) ErrorName() string {
	return "CreateProblemsetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProblemsetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProblemsetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProblemsetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProblemsetRequestValidationError{}

// Validate checks the field values on DeleteProblemsetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProblemsetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProblemsetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteProblemsetRequestMultiError, or nil if none found.
func (m *DeleteProblemsetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProblemsetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteProblemsetRequestMultiError(errors)
	}

	return nil
}

// DeleteProblemsetRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteProblemsetRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteProblemsetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProblemsetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProblemsetRequestMultiError) AllErrors() []error { return m }

// DeleteProblemsetRequestValidationError is the validation error returned by
// DeleteProblemsetRequest.Validate if the designated constraints aren't met.
type DeleteProblemsetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProblemsetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProblemsetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProblemsetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProblemsetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProblemsetRequestValidationError) ErrorName() string {
	return "DeleteProblemsetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProblemsetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProblemsetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProblemsetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProblemsetRequestValidationError{}

// Validate checks the field values on UpdateProblemsetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProblemsetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProblemsetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProblemsetRequestMultiError, or nil if none found.
func (m *UpdateProblemsetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProblemsetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Description

	if len(errors) > 0 {
		return UpdateProblemsetRequestMultiError(errors)
	}

	return nil
}

// UpdateProblemsetRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateProblemsetRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateProblemsetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProblemsetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProblemsetRequestMultiError) AllErrors() []error { return m }

// UpdateProblemsetRequestValidationError is the validation error returned by
// UpdateProblemsetRequest.Validate if the designated constraints aren't met.
type UpdateProblemsetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProblemsetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProblemsetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProblemsetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProblemsetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProblemsetRequestValidationError) ErrorName() string {
	return "UpdateProblemsetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProblemsetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProblemsetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProblemsetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProblemsetRequestValidationError{}

// Validate checks the field values on ListProblemsetProblemsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProblemsetProblemsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProblemsetProblemsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListProblemsetProblemsRequestMultiError, or nil if none found.
func (m *ListProblemsetProblemsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProblemsetProblemsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Keyword

	// no validation rules for Page

	// no validation rules for PerPage

	if len(errors) > 0 {
		return ListProblemsetProblemsRequestMultiError(errors)
	}

	return nil
}

// ListProblemsetProblemsRequestMultiError is an error wrapping multiple
// validation errors returned by ListProblemsetProblemsRequest.ValidateAll()
// if the designated constraints aren't met.
type ListProblemsetProblemsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProblemsetProblemsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProblemsetProblemsRequestMultiError) AllErrors() []error { return m }

// ListProblemsetProblemsRequestValidationError is the validation error
// returned by ListProblemsetProblemsRequest.Validate if the designated
// constraints aren't met.
type ListProblemsetProblemsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProblemsetProblemsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProblemsetProblemsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProblemsetProblemsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProblemsetProblemsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProblemsetProblemsRequestValidationError) ErrorName() string {
	return "ListProblemsetProblemsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProblemsetProblemsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProblemsetProblemsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProblemsetProblemsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProblemsetProblemsRequestValidationError{}

// Validate checks the field values on ProblemsetProblem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ProblemsetProblem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProblemsetProblem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProblemsetProblemMultiError, or nil if none found.
func (m *ProblemsetProblem) ValidateAll() error {
	return m.validate(true)
}

func (m *ProblemsetProblem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Order

	// no validation rules for TimeLimit

	// no validation rules for MemoryLimit

	// no validation rules for AcceptedCount

	// no validation rules for SubmitCount

	// no validation rules for ProblemsetId

	// no validation rules for ProblemId

	// no validation rules for Source

	if len(errors) > 0 {
		return ProblemsetProblemMultiError(errors)
	}

	return nil
}

// ProblemsetProblemMultiError is an error wrapping multiple validation errors
// returned by ProblemsetProblem.ValidateAll() if the designated constraints
// aren't met.
type ProblemsetProblemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProblemsetProblemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProblemsetProblemMultiError) AllErrors() []error { return m }

// ProblemsetProblemValidationError is the validation error returned by
// ProblemsetProblem.Validate if the designated constraints aren't met.
type ProblemsetProblemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProblemsetProblemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProblemsetProblemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProblemsetProblemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProblemsetProblemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProblemsetProblemValidationError) ErrorName() string {
	return "ProblemsetProblemValidationError"
}

// Error satisfies the builtin error interface
func (e ProblemsetProblemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProblemsetProblem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProblemsetProblemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProblemsetProblemValidationError{}

// Validate checks the field values on ListProblemsetProblemsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProblemsetProblemsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProblemsetProblemsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListProblemsetProblemsResponseMultiError, or nil if none found.
func (m *ListProblemsetProblemsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProblemsetProblemsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListProblemsetProblemsResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListProblemsetProblemsResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProblemsetProblemsResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListProblemsetProblemsResponseMultiError(errors)
	}

	return nil
}

// ListProblemsetProblemsResponseMultiError is an error wrapping multiple
// validation errors returned by ListProblemsetProblemsResponse.ValidateAll()
// if the designated constraints aren't met.
type ListProblemsetProblemsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProblemsetProblemsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProblemsetProblemsResponseMultiError) AllErrors() []error { return m }

// ListProblemsetProblemsResponseValidationError is the validation error
// returned by ListProblemsetProblemsResponse.Validate if the designated
// constraints aren't met.
type ListProblemsetProblemsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProblemsetProblemsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProblemsetProblemsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProblemsetProblemsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProblemsetProblemsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProblemsetProblemsResponseValidationError) ErrorName() string {
	return "ListProblemsetProblemsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProblemsetProblemsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProblemsetProblemsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProblemsetProblemsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProblemsetProblemsResponseValidationError{}

// Validate checks the field values on GetProblemsetProblemRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProblemsetProblemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProblemsetProblemRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProblemsetProblemRequestMultiError, or nil if none found.
func (m *GetProblemsetProblemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProblemsetProblemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Pid

	if len(errors) > 0 {
		return GetProblemsetProblemRequestMultiError(errors)
	}

	return nil
}

// GetProblemsetProblemRequestMultiError is an error wrapping multiple
// validation errors returned by GetProblemsetProblemRequest.ValidateAll() if
// the designated constraints aren't met.
type GetProblemsetProblemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProblemsetProblemRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProblemsetProblemRequestMultiError) AllErrors() []error { return m }

// GetProblemsetProblemRequestValidationError is the validation error returned
// by GetProblemsetProblemRequest.Validate if the designated constraints
// aren't met.
type GetProblemsetProblemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProblemsetProblemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProblemsetProblemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProblemsetProblemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProblemsetProblemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProblemsetProblemRequestValidationError) ErrorName() string {
	return "GetProblemsetProblemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProblemsetProblemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProblemsetProblemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProblemsetProblemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProblemsetProblemRequestValidationError{}

// Validate checks the field values on AddProblemToProblemsetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddProblemToProblemsetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddProblemToProblemsetRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AddProblemToProblemsetRequestMultiError, or nil if none found.
func (m *AddProblemToProblemsetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddProblemToProblemsetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ProblemId

	if len(errors) > 0 {
		return AddProblemToProblemsetRequestMultiError(errors)
	}

	return nil
}

// AddProblemToProblemsetRequestMultiError is an error wrapping multiple
// validation errors returned by AddProblemToProblemsetRequest.ValidateAll()
// if the designated constraints aren't met.
type AddProblemToProblemsetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddProblemToProblemsetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddProblemToProblemsetRequestMultiError) AllErrors() []error { return m }

// AddProblemToProblemsetRequestValidationError is the validation error
// returned by AddProblemToProblemsetRequest.Validate if the designated
// constraints aren't met.
type AddProblemToProblemsetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddProblemToProblemsetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddProblemToProblemsetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddProblemToProblemsetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddProblemToProblemsetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddProblemToProblemsetRequestValidationError) ErrorName() string {
	return "AddProblemToProblemsetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddProblemToProblemsetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddProblemToProblemsetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddProblemToProblemsetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddProblemToProblemsetRequestValidationError{}

// Validate checks the field values on DeleteProblemFromProblemsetRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeleteProblemFromProblemsetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProblemFromProblemsetRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DeleteProblemFromProblemsetRequestMultiError, or nil if none found.
func (m *DeleteProblemFromProblemsetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProblemFromProblemsetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ProblemId

	if len(errors) > 0 {
		return DeleteProblemFromProblemsetRequestMultiError(errors)
	}

	return nil
}

// DeleteProblemFromProblemsetRequestMultiError is an error wrapping multiple
// validation errors returned by
// DeleteProblemFromProblemsetRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteProblemFromProblemsetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProblemFromProblemsetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProblemFromProblemsetRequestMultiError) AllErrors() []error { return m }

// DeleteProblemFromProblemsetRequestValidationError is the validation error
// returned by DeleteProblemFromProblemsetRequest.Validate if the designated
// constraints aren't met.
type DeleteProblemFromProblemsetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProblemFromProblemsetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProblemFromProblemsetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProblemFromProblemsetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProblemFromProblemsetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProblemFromProblemsetRequestValidationError) ErrorName() string {
	return "DeleteProblemFromProblemsetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProblemFromProblemsetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProblemFromProblemsetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProblemFromProblemsetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProblemFromProblemsetRequestValidationError{}

// Validate checks the field values on SortProblemsetProblemsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SortProblemsetProblemsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SortProblemsetProblemsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SortProblemsetProblemsRequestMultiError, or nil if none found.
func (m *SortProblemsetProblemsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SortProblemsetProblemsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	for idx, item := range m.GetIds() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SortProblemsetProblemsRequestValidationError{
						field:  fmt.Sprintf("Ids[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SortProblemsetProblemsRequestValidationError{
						field:  fmt.Sprintf("Ids[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SortProblemsetProblemsRequestValidationError{
					field:  fmt.Sprintf("Ids[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SortProblemsetProblemsRequestMultiError(errors)
	}

	return nil
}

// SortProblemsetProblemsRequestMultiError is an error wrapping multiple
// validation errors returned by SortProblemsetProblemsRequest.ValidateAll()
// if the designated constraints aren't met.
type SortProblemsetProblemsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SortProblemsetProblemsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SortProblemsetProblemsRequestMultiError) AllErrors() []error { return m }

// SortProblemsetProblemsRequestValidationError is the validation error
// returned by SortProblemsetProblemsRequest.Validate if the designated
// constraints aren't met.
type SortProblemsetProblemsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SortProblemsetProblemsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SortProblemsetProblemsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SortProblemsetProblemsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SortProblemsetProblemsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SortProblemsetProblemsRequestValidationError) ErrorName() string {
	return "SortProblemsetProblemsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SortProblemsetProblemsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSortProblemsetProblemsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SortProblemsetProblemsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SortProblemsetProblemsRequestValidationError{}

// Validate checks the field values on Problem_SampleTest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Problem_SampleTest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Problem_SampleTest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Problem_SampleTestMultiError, or nil if none found.
func (m *Problem_SampleTest) ValidateAll() error {
	return m.validate(true)
}

func (m *Problem_SampleTest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Input

	// no validation rules for Output

	if len(errors) > 0 {
		return Problem_SampleTestMultiError(errors)
	}

	return nil
}

// Problem_SampleTestMultiError is an error wrapping multiple validation errors
// returned by Problem_SampleTest.ValidateAll() if the designated constraints
// aren't met.
type Problem_SampleTestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Problem_SampleTestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Problem_SampleTestMultiError) AllErrors() []error { return m }

// Problem_SampleTestValidationError is the validation error returned by
// Problem_SampleTest.Validate if the designated constraints aren't met.
type Problem_SampleTestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Problem_SampleTestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Problem_SampleTestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Problem_SampleTestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Problem_SampleTestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Problem_SampleTestValidationError) ErrorName() string {
	return "Problem_SampleTestValidationError"
}

// Error satisfies the builtin error interface
func (e Problem_SampleTestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProblem_SampleTest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Problem_SampleTestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Problem_SampleTestValidationError{}

// Validate checks the field values on ProblemVerification_VerificaitionInfo
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ProblemVerification_VerificaitionInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProblemVerification_VerificaitionInfo
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ProblemVerification_VerificaitionInfoMultiError, or nil if none found.
func (m *ProblemVerification_VerificaitionInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *ProblemVerification_VerificaitionInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Action

	// no validation rules for ErrorMessage

	if len(errors) > 0 {
		return ProblemVerification_VerificaitionInfoMultiError(errors)
	}

	return nil
}

// ProblemVerification_VerificaitionInfoMultiError is an error wrapping
// multiple validation errors returned by
// ProblemVerification_VerificaitionInfo.ValidateAll() if the designated
// constraints aren't met.
type ProblemVerification_VerificaitionInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProblemVerification_VerificaitionInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProblemVerification_VerificaitionInfoMultiError) AllErrors() []error { return m }

// ProblemVerification_VerificaitionInfoValidationError is the validation error
// returned by ProblemVerification_VerificaitionInfo.Validate if the
// designated constraints aren't met.
type ProblemVerification_VerificaitionInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProblemVerification_VerificaitionInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProblemVerification_VerificaitionInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProblemVerification_VerificaitionInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProblemVerification_VerificaitionInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProblemVerification_VerificaitionInfoValidationError) ErrorName() string {
	return "ProblemVerification_VerificaitionInfoValidationError"
}

// Error satisfies the builtin error interface
func (e ProblemVerification_VerificaitionInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProblemVerification_VerificaitionInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProblemVerification_VerificaitionInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProblemVerification_VerificaitionInfoValidationError{}

// Validate checks the field values on
// SortProblemsetProblemsRequest_ProblemsetProblems with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SortProblemsetProblemsRequest_ProblemsetProblems) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SortProblemsetProblemsRequest_ProblemsetProblems with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// SortProblemsetProblemsRequest_ProblemsetProblemsMultiError, or nil if none found.
func (m *SortProblemsetProblemsRequest_ProblemsetProblems) ValidateAll() error {
	return m.validate(true)
}

func (m *SortProblemsetProblemsRequest_ProblemsetProblems) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Order

	// no validation rules for Id

	if len(errors) > 0 {
		return SortProblemsetProblemsRequest_ProblemsetProblemsMultiError(errors)
	}

	return nil
}

// SortProblemsetProblemsRequest_ProblemsetProblemsMultiError is an error
// wrapping multiple validation errors returned by
// SortProblemsetProblemsRequest_ProblemsetProblems.ValidateAll() if the
// designated constraints aren't met.
type SortProblemsetProblemsRequest_ProblemsetProblemsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SortProblemsetProblemsRequest_ProblemsetProblemsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SortProblemsetProblemsRequest_ProblemsetProblemsMultiError) AllErrors() []error { return m }

// SortProblemsetProblemsRequest_ProblemsetProblemsValidationError is the
// validation error returned by
// SortProblemsetProblemsRequest_ProblemsetProblems.Validate if the designated
// constraints aren't met.
type SortProblemsetProblemsRequest_ProblemsetProblemsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SortProblemsetProblemsRequest_ProblemsetProblemsValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e SortProblemsetProblemsRequest_ProblemsetProblemsValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e SortProblemsetProblemsRequest_ProblemsetProblemsValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e SortProblemsetProblemsRequest_ProblemsetProblemsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SortProblemsetProblemsRequest_ProblemsetProblemsValidationError) ErrorName() string {
	return "SortProblemsetProblemsRequest_ProblemsetProblemsValidationError"
}

// Error satisfies the builtin error interface
func (e SortProblemsetProblemsRequest_ProblemsetProblemsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSortProblemsetProblemsRequest_ProblemsetProblems.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SortProblemsetProblemsRequest_ProblemsetProblemsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SortProblemsetProblemsRequest_ProblemsetProblemsValidationError{}
