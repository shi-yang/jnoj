// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: v1/contest.proto

package v1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ContestPrivacy int32

const (
	ContestPrivacy_PRIVATE ContestPrivacy = 0
	ContestPrivacy_PUBLIC  ContestPrivacy = 1
)

// Enum value maps for ContestPrivacy.
var (
	ContestPrivacy_name = map[int32]string{
		0: "PRIVATE",
		1: "PUBLIC",
	}
	ContestPrivacy_value = map[string]int32{
		"PRIVATE": 0,
		"PUBLIC":  1,
	}
)

func (x ContestPrivacy) Enum() *ContestPrivacy {
	p := new(ContestPrivacy)
	*p = x
	return p
}

func (x ContestPrivacy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContestPrivacy) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_contest_proto_enumTypes[0].Descriptor()
}

func (ContestPrivacy) Type() protoreflect.EnumType {
	return &file_v1_contest_proto_enumTypes[0]
}

func (x ContestPrivacy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContestPrivacy.Descriptor instead.
func (ContestPrivacy) EnumDescriptor() ([]byte, []int) {
	return file_v1_contest_proto_rawDescGZIP(), []int{0}
}

type ContestMembership int32

const (
	ContestMembership_ALLOW_ANYONE    ContestMembership = 0
	ContestMembership_INVITATION_CODE ContestMembership = 1
	ContestMembership_GROUP_USER      ContestMembership = 2
)

// Enum value maps for ContestMembership.
var (
	ContestMembership_name = map[int32]string{
		0: "ALLOW_ANYONE",
		1: "INVITATION_CODE",
		2: "GROUP_USER",
	}
	ContestMembership_value = map[string]int32{
		"ALLOW_ANYONE":    0,
		"INVITATION_CODE": 1,
		"GROUP_USER":      2,
	}
)

func (x ContestMembership) Enum() *ContestMembership {
	p := new(ContestMembership)
	*p = x
	return p
}

func (x ContestMembership) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContestMembership) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_contest_proto_enumTypes[1].Descriptor()
}

func (ContestMembership) Type() protoreflect.EnumType {
	return &file_v1_contest_proto_enumTypes[1]
}

func (x ContestMembership) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContestMembership.Descriptor instead.
func (ContestMembership) EnumDescriptor() ([]byte, []int) {
	return file_v1_contest_proto_rawDescGZIP(), []int{1}
}

// 比赛用户角色
type ContestUserRole int32

const (
	ContestUserRole_ROLE_GUEST             ContestUserRole = 0 // 游客
	ContestUserRole_ROLE_OFFICIAL_PLAYER   ContestUserRole = 1 // 选手，只有正式选手参与排名
	ContestUserRole_ROLE_UNOFFICIAL_PLAYER ContestUserRole = 2 // 非正式选手，不参与排名
	ContestUserRole_ROLE_VIRTUAL_PLAYER    ContestUserRole = 3 // 虚拟比赛
	ContestUserRole_ROLE_WRITER            ContestUserRole = 4 // 出题人
	ContestUserRole_ROLE_ADMIN             ContestUserRole = 5 // 管理
)

// Enum value maps for ContestUserRole.
var (
	ContestUserRole_name = map[int32]string{
		0: "ROLE_GUEST",
		1: "ROLE_OFFICIAL_PLAYER",
		2: "ROLE_UNOFFICIAL_PLAYER",
		3: "ROLE_VIRTUAL_PLAYER",
		4: "ROLE_WRITER",
		5: "ROLE_ADMIN",
	}
	ContestUserRole_value = map[string]int32{
		"ROLE_GUEST":             0,
		"ROLE_OFFICIAL_PLAYER":   1,
		"ROLE_UNOFFICIAL_PLAYER": 2,
		"ROLE_VIRTUAL_PLAYER":    3,
		"ROLE_WRITER":            4,
		"ROLE_ADMIN":             5,
	}
)

func (x ContestUserRole) Enum() *ContestUserRole {
	p := new(ContestUserRole)
	*p = x
	return p
}

func (x ContestUserRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContestUserRole) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_contest_proto_enumTypes[2].Descriptor()
}

func (ContestUserRole) Type() protoreflect.EnumType {
	return &file_v1_contest_proto_enumTypes[2]
}

func (x ContestUserRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContestUserRole.Descriptor instead.
func (ContestUserRole) EnumDescriptor() ([]byte, []int) {
	return file_v1_contest_proto_rawDescGZIP(), []int{2}
}

type ContestType int32

const (
	ContestType_ICPC ContestType = 0
	ContestType_IOI  ContestType = 1
	ContestType_OI   ContestType = 2
)

// Enum value maps for ContestType.
var (
	ContestType_name = map[int32]string{
		0: "ICPC",
		1: "IOI",
		2: "OI",
	}
	ContestType_value = map[string]int32{
		"ICPC": 0,
		"IOI":  1,
		"OI":   2,
	}
)

func (x ContestType) Enum() *ContestType {
	p := new(ContestType)
	*p = x
	return p
}

func (x ContestType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContestType) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_contest_proto_enumTypes[3].Descriptor()
}

func (ContestType) Type() protoreflect.EnumType {
	return &file_v1_contest_proto_enumTypes[3]
}

func (x ContestType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContestType.Descriptor instead.
func (ContestType) EnumDescriptor() ([]byte, []int) {
	return file_v1_contest_proto_rawDescGZIP(), []int{3}
}

type Contest_RunningStatus int32

const (
	// 尚未开始
	Contest_NOT_STARTED Contest_RunningStatus = 0
	// 进行中
	Contest_IN_PROGRESS Contest_RunningStatus = 1
	// 进行中（封榜）
	Contest_FROZEN_STANDINGS Contest_RunningStatus = 2
	// 已结束
	Contest_FINISHED Contest_RunningStatus = 3
)

// Enum value maps for Contest_RunningStatus.
var (
	Contest_RunningStatus_name = map[int32]string{
		0: "NOT_STARTED",
		1: "IN_PROGRESS",
		2: "FROZEN_STANDINGS",
		3: "FINISHED",
	}
	Contest_RunningStatus_value = map[string]int32{
		"NOT_STARTED":      0,
		"IN_PROGRESS":      1,
		"FROZEN_STANDINGS": 2,
		"FINISHED":         3,
	}
)

func (x Contest_RunningStatus) Enum() *Contest_RunningStatus {
	p := new(Contest_RunningStatus)
	*p = x
	return p
}

func (x Contest_RunningStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Contest_RunningStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_contest_proto_enumTypes[4].Descriptor()
}

func (Contest_RunningStatus) Type() protoreflect.EnumType {
	return &file_v1_contest_proto_enumTypes[4]
}

func (x Contest_RunningStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Contest_RunningStatus.Descriptor instead.
func (Contest_RunningStatus) EnumDescriptor() ([]byte, []int) {
	return file_v1_contest_proto_rawDescGZIP(), []int{4, 0}
}

type Contest_Owner_OwnerType int32

const (
	Contest_Owner_GROUP Contest_Owner_OwnerType = 0
	Contest_Owner_USER  Contest_Owner_OwnerType = 1
)

// Enum value maps for Contest_Owner_OwnerType.
var (
	Contest_Owner_OwnerType_name = map[int32]string{
		0: "GROUP",
		1: "USER",
	}
	Contest_Owner_OwnerType_value = map[string]int32{
		"GROUP": 0,
		"USER":  1,
	}
)

func (x Contest_Owner_OwnerType) Enum() *Contest_Owner_OwnerType {
	p := new(Contest_Owner_OwnerType)
	*p = x
	return p
}

func (x Contest_Owner_OwnerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Contest_Owner_OwnerType) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_contest_proto_enumTypes[5].Descriptor()
}

func (Contest_Owner_OwnerType) Type() protoreflect.EnumType {
	return &file_v1_contest_proto_enumTypes[5]
}

func (x Contest_Owner_OwnerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Contest_Owner_OwnerType.Descriptor instead.
func (Contest_Owner_OwnerType) EnumDescriptor() ([]byte, []int) {
	return file_v1_contest_proto_rawDescGZIP(), []int{4, 0, 0}
}

// 解答情况
type ContestProblem_Status int32

const (
	ContestProblem_NOT_START ContestProblem_Status = 0
	ContestProblem_ATTEMPTED ContestProblem_Status = 1
	ContestProblem_SOLVED    ContestProblem_Status = 2
)

// Enum value maps for ContestProblem_Status.
var (
	ContestProblem_Status_name = map[int32]string{
		0: "NOT_START",
		1: "ATTEMPTED",
		2: "SOLVED",
	}
	ContestProblem_Status_value = map[string]int32{
		"NOT_START": 0,
		"ATTEMPTED": 1,
		"SOLVED":    2,
	}
)

func (x ContestProblem_Status) Enum() *ContestProblem_Status {
	p := new(ContestProblem_Status)
	*p = x
	return p
}

func (x ContestProblem_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContestProblem_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_contest_proto_enumTypes[6].Descriptor()
}

func (ContestProblem_Status) Type() protoreflect.EnumType {
	return &file_v1_contest_proto_enumTypes[6]
}

func (x ContestProblem_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContestProblem_Status.Descriptor instead.
func (ContestProblem_Status) EnumDescriptor() ([]byte, []int) {
	return file_v1_contest_proto_rawDescGZIP(), []int{9, 0}
}

type ListContestAllSubmissionsResponse_Submission_Status int32

const (
	ListContestAllSubmissionsResponse_Submission_PENDING   ListContestAllSubmissionsResponse_Submission_Status = 0
	ListContestAllSubmissionsResponse_Submission_INCORRECT ListContestAllSubmissionsResponse_Submission_Status = 1
	ListContestAllSubmissionsResponse_Submission_CORRECT   ListContestAllSubmissionsResponse_Submission_Status = 2
)

// Enum value maps for ListContestAllSubmissionsResponse_Submission_Status.
var (
	ListContestAllSubmissionsResponse_Submission_Status_name = map[int32]string{
		0: "PENDING",
		1: "INCORRECT",
		2: "CORRECT",
	}
	ListContestAllSubmissionsResponse_Submission_Status_value = map[string]int32{
		"PENDING":   0,
		"INCORRECT": 1,
		"CORRECT":   2,
	}
)

func (x ListContestAllSubmissionsResponse_Submission_Status) Enum() *ListContestAllSubmissionsResponse_Submission_Status {
	p := new(ListContestAllSubmissionsResponse_Submission_Status)
	*p = x
	return p
}

func (x ListContestAllSubmissionsResponse_Submission_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListContestAllSubmissionsResponse_Submission_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_contest_proto_enumTypes[7].Descriptor()
}

func (ListContestAllSubmissionsResponse_Submission_Status) Type() protoreflect.EnumType {
	return &file_v1_contest_proto_enumTypes[7]
}

func (x ListContestAllSubmissionsResponse_Submission_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListContestAllSubmissionsResponse_Submission_Status.Descriptor instead.
func (ListContestAllSubmissionsResponse_Submission_Status) EnumDescriptor() ([]byte, []int) {
	return file_v1_contest_proto_rawDescGZIP(), []int{20, 0, 0}
}

type ListContestsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	GroupId *int32 `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3,oneof" json:"group_id,omitempty"`
	Page    int32  `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	PerPage int32  `protobuf:"varint,4,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *ListContestsRequest) Reset() {
	*x = ListContestsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_contest_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListContestsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListContestsRequest) ProtoMessage() {}

func (x *ListContestsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_contest_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListContestsRequest.ProtoReflect.Descriptor instead.
func (*ListContestsRequest) Descriptor() ([]byte, []int) {
	return file_v1_contest_proto_rawDescGZIP(), []int{0}
}

func (x *ListContestsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListContestsRequest) GetGroupId() int32 {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return 0
}

func (x *ListContestsRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListContestsRequest) GetPerPage() int32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

type ListContestsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data  []*Contest `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Total int64      `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *ListContestsResponse) Reset() {
	*x = ListContestsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_contest_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListContestsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListContestsResponse) ProtoMessage() {}

func (x *ListContestsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_contest_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListContestsResponse.ProtoReflect.Descriptor instead.
func (*ListContestsResponse) Descriptor() ([]byte, []int) {
	return file_v1_contest_proto_rawDescGZIP(), []int{1}
}

func (x *ListContestsResponse) GetData() []*Contest {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ListContestsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetContestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetContestRequest) Reset() {
	*x = GetContestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_contest_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContestRequest) ProtoMessage() {}

func (x *GetContestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_contest_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContestRequest.ProtoReflect.Descriptor instead.
func (*GetContestRequest) Descriptor() ([]byte, []int) {
	return file_v1_contest_proto_rawDescGZIP(), []int{2}
}

func (x *GetContestRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type UpdateContestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name           string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description    string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	StartTime      *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime        *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	FrozenTime     *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=frozen_time,json=frozenTime,proto3" json:"frozen_time,omitempty"`
	Type           ContestType            `protobuf:"varint,7,opt,name=type,proto3,enum=jnoj.interface.v1.ContestType" json:"type,omitempty"`
	Privacy        ContestPrivacy         `protobuf:"varint,8,opt,name=privacy,proto3,enum=jnoj.interface.v1.ContestPrivacy" json:"privacy,omitempty"`
	Membership     ContestMembership      `protobuf:"varint,9,opt,name=membership,proto3,enum=jnoj.interface.v1.ContestMembership" json:"membership,omitempty"`
	InvitationCode string                 `protobuf:"bytes,10,opt,name=invitation_code,json=invitationCode,proto3" json:"invitation_code,omitempty"`
}

func (x *UpdateContestRequest) Reset() {
	*x = UpdateContestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_contest_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateContestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateContestRequest) ProtoMessage() {}

func (x *UpdateContestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_contest_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateContestRequest.ProtoReflect.Descriptor instead.
func (*UpdateContestRequest) Descriptor() ([]byte, []int) {
	return file_v1_contest_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateContestRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateContestRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateContestRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateContestRequest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *UpdateContestRequest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *UpdateContestRequest) GetFrozenTime() *timestamppb.Timestamp {
	if x != nil {
		return x.FrozenTime
	}
	return nil
}

func (x *UpdateContestRequest) GetType() ContestType {
	if x != nil {
		return x.Type
	}
	return ContestType_ICPC
}

func (x *UpdateContestRequest) GetPrivacy() ContestPrivacy {
	if x != nil {
		return x.Privacy
	}
	return ContestPrivacy_PRIVATE
}

func (x *UpdateContestRequest) GetMembership() ContestMembership {
	if x != nil {
		return x.Membership
	}
	return ContestMembership_ALLOW_ANYONE
}

func (x *UpdateContestRequest) GetInvitationCode() string {
	if x != nil {
		return x.InvitationCode
	}
	return ""
}

type Contest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name             string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description      string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	StartTime        *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime          *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	FrozenTime       *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=frozen_time,json=frozenTime,proto3" json:"frozen_time,omitempty"`
	Type             ContestType            `protobuf:"varint,7,opt,name=type,proto3,enum=jnoj.interface.v1.ContestType" json:"type,omitempty"`
	Privacy          ContestPrivacy         `protobuf:"varint,8,opt,name=privacy,proto3,enum=jnoj.interface.v1.ContestPrivacy" json:"privacy,omitempty"`
	Membership       ContestMembership      `protobuf:"varint,9,opt,name=membership,proto3,enum=jnoj.interface.v1.ContestMembership" json:"membership,omitempty"`
	InvitationCode   string                 `protobuf:"bytes,10,opt,name=invitation_code,json=invitationCode,proto3" json:"invitation_code,omitempty"`
	ParticipantCount int32                  `protobuf:"varint,11,opt,name=participant_count,json=participantCount,proto3" json:"participant_count,omitempty"`
	UserId           int32                  `protobuf:"varint,12,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 当前登录用户的角色
	Role ContestUserRole `protobuf:"varint,13,opt,name=role,proto3,enum=jnoj.interface.v1.ContestUserRole" json:"role,omitempty"`
	// 登录用户虚拟参赛时间
	VirtualStart *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=virtual_start,json=virtualStart,proto3" json:"virtual_start,omitempty"`
	// 运行状态
	RunningStatus Contest_RunningStatus `protobuf:"varint,15,opt,name=running_status,json=runningStatus,proto3,enum=jnoj.interface.v1.Contest_RunningStatus" json:"running_status,omitempty"`
	Owner         *Contest_Owner        `protobuf:"bytes,16,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (x *Contest) Reset() {
	*x = Contest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_contest_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contest) ProtoMessage() {}

func (x *Contest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_contest_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contest.ProtoReflect.Descriptor instead.
func (*Contest) Descriptor() ([]byte, []int) {
	return file_v1_contest_proto_rawDescGZIP(), []int{4}
}

func (x *Contest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Contest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Contest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Contest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *Contest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *Contest) GetFrozenTime() *timestamppb.Timestamp {
	if x != nil {
		return x.FrozenTime
	}
	return nil
}

func (x *Contest) GetType() ContestType {
	if x != nil {
		return x.Type
	}
	return ContestType_ICPC
}

func (x *Contest) GetPrivacy() ContestPrivacy {
	if x != nil {
		return x.Privacy
	}
	return ContestPrivacy_PRIVATE
}

func (x *Contest) GetMembership() ContestMembership {
	if x != nil {
		return x.Membership
	}
	return ContestMembership_ALLOW_ANYONE
}

func (x *Contest) GetInvitationCode() string {
	if x != nil {
		return x.InvitationCode
	}
	return ""
}

func (x *Contest) GetParticipantCount() int32 {
	if x != nil {
		return x.ParticipantCount
	}
	return 0
}

func (x *Contest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Contest) GetRole() ContestUserRole {
	if x != nil {
		return x.Role
	}
	return ContestUserRole_ROLE_GUEST
}

func (x *Contest) GetVirtualStart() *timestamppb.Timestamp {
	if x != nil {
		return x.VirtualStart
	}
	return nil
}

func (x *Contest) GetRunningStatus() Contest_RunningStatus {
	if x != nil {
		return x.RunningStatus
	}
	return Contest_NOT_STARTED
}

func (x *Contest) GetOwner() *Contest_Owner {
	if x != nil {
		return x.Owner
	}
	return nil
}

type ListContestProblemsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ListContestProblemsRequest) Reset() {
	*x = ListContestProblemsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_contest_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListContestProblemsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListContestProblemsRequest) ProtoMessage() {}

func (x *ListContestProblemsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_contest_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListContestProblemsRequest.ProtoReflect.Descriptor instead.
func (*ListContestProblemsRequest) Descriptor() ([]byte, []int) {
	return file_v1_contest_proto_rawDescGZIP(), []int{5}
}

func (x *ListContestProblemsRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ListContestProblemsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data  []*ContestProblem `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Total int64             `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *ListContestProblemsResponse) Reset() {
	*x = ListContestProblemsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_contest_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListContestProblemsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListContestProblemsResponse) ProtoMessage() {}

func (x *ListContestProblemsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_contest_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListContestProblemsResponse.ProtoReflect.Descriptor instead.
func (*ListContestProblemsResponse) Descriptor() ([]byte, []int) {
	return file_v1_contest_proto_rawDescGZIP(), []int{6}
}

func (x *ListContestProblemsResponse) GetData() []*ContestProblem {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ListContestProblemsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetContestProblemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Number int32 `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
}

func (x *GetContestProblemRequest) Reset() {
	*x = GetContestProblemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_contest_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContestProblemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContestProblemRequest) ProtoMessage() {}

func (x *GetContestProblemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_contest_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContestProblemRequest.ProtoReflect.Descriptor instead.
func (*GetContestProblemRequest) Descriptor() ([]byte, []int) {
	return file_v1_contest_proto_rawDescGZIP(), []int{7}
}

func (x *GetContestProblemRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetContestProblemRequest) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

type CreateContestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	GroupId   int32                  `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	StartTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime   *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *CreateContestRequest) Reset() {
	*x = CreateContestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_contest_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateContestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateContestRequest) ProtoMessage() {}

func (x *CreateContestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_contest_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateContestRequest.ProtoReflect.Descriptor instead.
func (*CreateContestRequest) Descriptor() ([]byte, []int) {
	return file_v1_contest_proto_rawDescGZIP(), []int{8}
}

func (x *CreateContestRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateContestRequest) GetGroupId() int32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *CreateContestRequest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *CreateContestRequest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

type ContestProblem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int32                        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Number        int32                        `protobuf:"varint,3,opt,name=number,proto3" json:"number,omitempty"`
	ContestId     int32                        `protobuf:"varint,4,opt,name=contest_id,json=contestId,proto3" json:"contest_id,omitempty"`
	ProblemId     int32                        `protobuf:"varint,5,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	SubmitCount   int32                        `protobuf:"varint,6,opt,name=submit_count,json=submitCount,proto3" json:"submit_count,omitempty"`
	AcceptedCount int32                        `protobuf:"varint,7,opt,name=accepted_count,json=acceptedCount,proto3" json:"accepted_count,omitempty"`
	TimeLimit     int64                        `protobuf:"varint,8,opt,name=time_limit,json=timeLimit,proto3" json:"time_limit,omitempty"`
	MemoryLimit   int64                        `protobuf:"varint,9,opt,name=memory_limit,json=memoryLimit,proto3" json:"memory_limit,omitempty"`
	Source        string                       `protobuf:"bytes,10,opt,name=source,proto3" json:"source,omitempty"`
	Statements    []*ContestProblem_Statement  `protobuf:"bytes,11,rep,name=statements,proto3" json:"statements,omitempty"`
	SampleTests   []*ContestProblem_SampleTest `protobuf:"bytes,12,rep,name=sample_tests,json=sampleTests,proto3" json:"sample_tests,omitempty"`
	Status        ContestProblem_Status        `protobuf:"varint,13,opt,name=status,proto3,enum=jnoj.interface.v1.ContestProblem_Status" json:"status,omitempty"`
}

func (x *ContestProblem) Reset() {
	*x = ContestProblem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_contest_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContestProblem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContestProblem) ProtoMessage() {}

func (x *ContestProblem) ProtoReflect() protoreflect.Message {
	mi := &file_v1_contest_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContestProblem.ProtoReflect.Descriptor instead.
func (*ContestProblem) Descriptor() ([]byte, []int) {
	return file_v1_contest_proto_rawDescGZIP(), []int{9}
}

func (x *ContestProblem) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ContestProblem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ContestProblem) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *ContestProblem) GetContestId() int32 {
	if x != nil {
		return x.ContestId
	}
	return 0
}

func (x *ContestProblem) GetProblemId() int32 {
	if x != nil {
		return x.ProblemId
	}
	return 0
}

func (x *ContestProblem) GetSubmitCount() int32 {
	if x != nil {
		return x.SubmitCount
	}
	return 0
}

func (x *ContestProblem) GetAcceptedCount() int32 {
	if x != nil {
		return x.AcceptedCount
	}
	return 0
}

func (x *ContestProblem) GetTimeLimit() int64 {
	if x != nil {
		return x.TimeLimit
	}
	return 0
}

func (x *ContestProblem) GetMemoryLimit() int64 {
	if x != nil {
		return x.MemoryLimit
	}
	return 0
}

func (x *ContestProblem) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *ContestProblem) GetStatements() []*ContestProblem_Statement {
	if x != nil {
		return x.Statements
	}
	return nil
}

func (x *ContestProblem) GetSampleTests() []*ContestProblem_SampleTest {
	if x != nil {
		return x.SampleTests
	}
	return nil
}

func (x *ContestProblem) GetStatus() ContestProblem_Status {
	if x != nil {
		return x.Status
	}
	return ContestProblem_NOT_START
}

type CreateContestProblemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ProblemId int32 `protobuf:"varint,2,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
}

func (x *CreateContestProblemRequest) Reset() {
	*x = CreateContestProblemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_contest_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateContestProblemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateContestProblemRequest) ProtoMessage() {}

func (x *CreateContestProblemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_contest_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateContestProblemRequest.ProtoReflect.Descriptor instead.
func (*CreateContestProblemRequest) Descriptor() ([]byte, []int) {
	return file_v1_contest_proto_rawDescGZIP(), []int{10}
}

func (x *CreateContestProblemRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CreateContestProblemRequest) GetProblemId() int32 {
	if x != nil {
		return x.ProblemId
	}
	return 0
}

type DeleteContestProblemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Number int32 `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
}

func (x *DeleteContestProblemRequest) Reset() {
	*x = DeleteContestProblemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_contest_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteContestProblemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteContestProblemRequest) ProtoMessage() {}

func (x *DeleteContestProblemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_contest_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteContestProblemRequest.ProtoReflect.Descriptor instead.
func (*DeleteContestProblemRequest) Descriptor() ([]byte, []int) {
	return file_v1_contest_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteContestProblemRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeleteContestProblemRequest) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

type ContestUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	UserId       int32                  `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserNickname string                 `protobuf:"bytes,4,opt,name=user_nickname,json=userNickname,proto3" json:"user_nickname,omitempty"`
	VirtualStart *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=virtual_start,json=virtualStart,proto3" json:"virtual_start,omitempty"`
	Role         ContestUserRole        `protobuf:"varint,6,opt,name=role,proto3,enum=jnoj.interface.v1.ContestUserRole" json:"role,omitempty"`
}

func (x *ContestUser) Reset() {
	*x = ContestUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_contest_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContestUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContestUser) ProtoMessage() {}

func (x *ContestUser) ProtoReflect() protoreflect.Message {
	mi := &file_v1_contest_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContestUser.ProtoReflect.Descriptor instead.
func (*ContestUser) Descriptor() ([]byte, []int) {
	return file_v1_contest_proto_rawDescGZIP(), []int{12}
}

func (x *ContestUser) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ContestUser) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ContestUser) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ContestUser) GetUserNickname() string {
	if x != nil {
		return x.UserNickname
	}
	return ""
}

func (x *ContestUser) GetVirtualStart() *timestamppb.Timestamp {
	if x != nil {
		return x.VirtualStart
	}
	return nil
}

func (x *ContestUser) GetRole() ContestUserRole {
	if x != nil {
		return x.Role
	}
	return ContestUserRole_ROLE_GUEST
}

type ListContestUsersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContestId int32            `protobuf:"varint,1,opt,name=contest_id,json=contestId,proto3" json:"contest_id,omitempty"`
	Name      string           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Role      *ContestUserRole `protobuf:"varint,3,opt,name=role,proto3,enum=jnoj.interface.v1.ContestUserRole,oneof" json:"role,omitempty"`
	Page      int32            `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
	PerPage   int32            `protobuf:"varint,5,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *ListContestUsersRequest) Reset() {
	*x = ListContestUsersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_contest_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListContestUsersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListContestUsersRequest) ProtoMessage() {}

func (x *ListContestUsersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_contest_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListContestUsersRequest.ProtoReflect.Descriptor instead.
func (*ListContestUsersRequest) Descriptor() ([]byte, []int) {
	return file_v1_contest_proto_rawDescGZIP(), []int{13}
}

func (x *ListContestUsersRequest) GetContestId() int32 {
	if x != nil {
		return x.ContestId
	}
	return 0
}

func (x *ListContestUsersRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListContestUsersRequest) GetRole() ContestUserRole {
	if x != nil && x.Role != nil {
		return *x.Role
	}
	return ContestUserRole_ROLE_GUEST
}

func (x *ListContestUsersRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListContestUsersRequest) GetPerPage() int32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

type ListContestUsersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data  []*ContestUser `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Total int64          `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *ListContestUsersResponse) Reset() {
	*x = ListContestUsersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_contest_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListContestUsersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListContestUsersResponse) ProtoMessage() {}

func (x *ListContestUsersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_contest_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListContestUsersResponse.ProtoReflect.Descriptor instead.
func (*ListContestUsersResponse) Descriptor() ([]byte, []int) {
	return file_v1_contest_proto_rawDescGZIP(), []int{14}
}

func (x *ListContestUsersResponse) GetData() []*ContestUser {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ListContestUsersResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type CreateContestUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContestId      int32  `protobuf:"varint,1,opt,name=contest_id,json=contestId,proto3" json:"contest_id,omitempty"`
	InvitationCode string `protobuf:"bytes,2,opt,name=invitation_code,json=invitationCode,proto3" json:"invitation_code,omitempty"`
	Name           string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *CreateContestUserRequest) Reset() {
	*x = CreateContestUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_contest_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateContestUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateContestUserRequest) ProtoMessage() {}

func (x *CreateContestUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_contest_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateContestUserRequest.ProtoReflect.Descriptor instead.
func (*CreateContestUserRequest) Descriptor() ([]byte, []int) {
	return file_v1_contest_proto_rawDescGZIP(), []int{15}
}

func (x *CreateContestUserRequest) GetContestId() int32 {
	if x != nil {
		return x.ContestId
	}
	return 0
}

func (x *CreateContestUserRequest) GetInvitationCode() string {
	if x != nil {
		return x.InvitationCode
	}
	return ""
}

func (x *CreateContestUserRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type BatchCreateContestUsersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users     []*BatchCreateContestUsersRequest_ContestUser `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	Role      ContestUserRole                               `protobuf:"varint,2,opt,name=role,proto3,enum=jnoj.interface.v1.ContestUserRole" json:"role,omitempty"`
	ContestId int32                                         `protobuf:"varint,3,opt,name=contest_id,json=contestId,proto3" json:"contest_id,omitempty"`
}

func (x *BatchCreateContestUsersRequest) Reset() {
	*x = BatchCreateContestUsersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_contest_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchCreateContestUsersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCreateContestUsersRequest) ProtoMessage() {}

func (x *BatchCreateContestUsersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_contest_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCreateContestUsersRequest.ProtoReflect.Descriptor instead.
func (*BatchCreateContestUsersRequest) Descriptor() ([]byte, []int) {
	return file_v1_contest_proto_rawDescGZIP(), []int{16}
}

func (x *BatchCreateContestUsersRequest) GetUsers() []*BatchCreateContestUsersRequest_ContestUser {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *BatchCreateContestUsersRequest) GetRole() ContestUserRole {
	if x != nil {
		return x.Role
	}
	return ContestUserRole_ROLE_GUEST
}

func (x *BatchCreateContestUsersRequest) GetContestId() int32 {
	if x != nil {
		return x.ContestId
	}
	return 0
}

type BatchCreateContestUsersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success []*BatchCreateContestUsersResponse_ContestUser `protobuf:"bytes,1,rep,name=success,proto3" json:"success,omitempty"`
	Failed  []*BatchCreateContestUsersResponse_ContestUser `protobuf:"bytes,2,rep,name=failed,proto3" json:"failed,omitempty"`
}

func (x *BatchCreateContestUsersResponse) Reset() {
	*x = BatchCreateContestUsersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_contest_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchCreateContestUsersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCreateContestUsersResponse) ProtoMessage() {}

func (x *BatchCreateContestUsersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_contest_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCreateContestUsersResponse.ProtoReflect.Descriptor instead.
func (*BatchCreateContestUsersResponse) Descriptor() ([]byte, []int) {
	return file_v1_contest_proto_rawDescGZIP(), []int{17}
}

func (x *BatchCreateContestUsersResponse) GetSuccess() []*BatchCreateContestUsersResponse_ContestUser {
	if x != nil {
		return x.Success
	}
	return nil
}

func (x *BatchCreateContestUsersResponse) GetFailed() []*BatchCreateContestUsersResponse_ContestUser {
	if x != nil {
		return x.Failed
	}
	return nil
}

type UpdateContestUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContestId int32           `protobuf:"varint,1,opt,name=contest_id,json=contestId,proto3" json:"contest_id,omitempty"`
	UserId    int32           `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Name      string          `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Role      ContestUserRole `protobuf:"varint,4,opt,name=role,proto3,enum=jnoj.interface.v1.ContestUserRole" json:"role,omitempty"`
}

func (x *UpdateContestUserRequest) Reset() {
	*x = UpdateContestUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_contest_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateContestUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateContestUserRequest) ProtoMessage() {}

func (x *UpdateContestUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_contest_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateContestUserRequest.ProtoReflect.Descriptor instead.
func (*UpdateContestUserRequest) Descriptor() ([]byte, []int) {
	return file_v1_contest_proto_rawDescGZIP(), []int{18}
}

func (x *UpdateContestUserRequest) GetContestId() int32 {
	if x != nil {
		return x.ContestId
	}
	return 0
}

func (x *UpdateContestUserRequest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateContestUserRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateContestUserRequest) GetRole() ContestUserRole {
	if x != nil {
		return x.Role
	}
	return ContestUserRole_ROLE_GUEST
}

type ListContestAllSubmissionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContestId int32 `protobuf:"varint,1,opt,name=contest_id,json=contestId,proto3" json:"contest_id,omitempty"`
}

func (x *ListContestAllSubmissionsRequest) Reset() {
	*x = ListContestAllSubmissionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_contest_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListContestAllSubmissionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListContestAllSubmissionsRequest) ProtoMessage() {}

func (x *ListContestAllSubmissionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_contest_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListContestAllSubmissionsRequest.ProtoReflect.Descriptor instead.
func (*ListContestAllSubmissionsRequest) Descriptor() ([]byte, []int) {
	return file_v1_contest_proto_rawDescGZIP(), []int{19}
}

func (x *ListContestAllSubmissionsRequest) GetContestId() int32 {
	if x != nil {
		return x.ContestId
	}
	return 0
}

type ListContestAllSubmissionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*ListContestAllSubmissionsResponse_Submission `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ListContestAllSubmissionsResponse) Reset() {
	*x = ListContestAllSubmissionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_contest_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListContestAllSubmissionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListContestAllSubmissionsResponse) ProtoMessage() {}

func (x *ListContestAllSubmissionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_contest_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListContestAllSubmissionsResponse.ProtoReflect.Descriptor instead.
func (*ListContestAllSubmissionsResponse) Descriptor() ([]byte, []int) {
	return file_v1_contest_proto_rawDescGZIP(), []int{20}
}

func (x *ListContestAllSubmissionsResponse) GetData() []*ListContestAllSubmissionsResponse_Submission {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListContestSubmissionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContestId int32   `protobuf:"varint,1,opt,name=contest_id,json=contestId,proto3" json:"contest_id,omitempty"`
	Verdict   []int32 `protobuf:"varint,2,rep,packed,name=verdict,proto3" json:"verdict,omitempty"`
	Problem   *int32  `protobuf:"varint,3,opt,name=problem,proto3,oneof" json:"problem,omitempty"`
	UserId    int32   `protobuf:"varint,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Page      int32   `protobuf:"varint,5,opt,name=page,proto3" json:"page,omitempty"`
	PerPage   int32   `protobuf:"varint,6,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *ListContestSubmissionsRequest) Reset() {
	*x = ListContestSubmissionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_contest_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListContestSubmissionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListContestSubmissionsRequest) ProtoMessage() {}

func (x *ListContestSubmissionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_contest_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListContestSubmissionsRequest.ProtoReflect.Descriptor instead.
func (*ListContestSubmissionsRequest) Descriptor() ([]byte, []int) {
	return file_v1_contest_proto_rawDescGZIP(), []int{21}
}

func (x *ListContestSubmissionsRequest) GetContestId() int32 {
	if x != nil {
		return x.ContestId
	}
	return 0
}

func (x *ListContestSubmissionsRequest) GetVerdict() []int32 {
	if x != nil {
		return x.Verdict
	}
	return nil
}

func (x *ListContestSubmissionsRequest) GetProblem() int32 {
	if x != nil && x.Problem != nil {
		return *x.Problem
	}
	return 0
}

func (x *ListContestSubmissionsRequest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ListContestSubmissionsRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListContestSubmissionsRequest) GetPerPage() int32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

type ListContestSubmissionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data  []*ListContestSubmissionsResponse_Submission `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Total int64                                        `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *ListContestSubmissionsResponse) Reset() {
	*x = ListContestSubmissionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_contest_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListContestSubmissionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListContestSubmissionsResponse) ProtoMessage() {}

func (x *ListContestSubmissionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_contest_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListContestSubmissionsResponse.ProtoReflect.Descriptor instead.
func (*ListContestSubmissionsResponse) Descriptor() ([]byte, []int) {
	return file_v1_contest_proto_rawDescGZIP(), []int{22}
}

func (x *ListContestSubmissionsResponse) GetData() []*ListContestSubmissionsResponse_Submission {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ListContestSubmissionsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type ContestProblemLanguage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	LanguageCode int32  `protobuf:"varint,2,opt,name=language_code,json=languageCode,proto3" json:"language_code,omitempty"`
	LanguageName string `protobuf:"bytes,3,opt,name=language_name,json=languageName,proto3" json:"language_name,omitempty"`
	UserContent  string `protobuf:"bytes,4,opt,name=user_content,json=userContent,proto3" json:"user_content,omitempty"`
	MainContent  string `protobuf:"bytes,5,opt,name=main_content,json=mainContent,proto3" json:"main_content,omitempty"`
}

func (x *ContestProblemLanguage) Reset() {
	*x = ContestProblemLanguage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_contest_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContestProblemLanguage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContestProblemLanguage) ProtoMessage() {}

func (x *ContestProblemLanguage) ProtoReflect() protoreflect.Message {
	mi := &file_v1_contest_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContestProblemLanguage.ProtoReflect.Descriptor instead.
func (*ContestProblemLanguage) Descriptor() ([]byte, []int) {
	return file_v1_contest_proto_rawDescGZIP(), []int{23}
}

func (x *ContestProblemLanguage) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ContestProblemLanguage) GetLanguageCode() int32 {
	if x != nil {
		return x.LanguageCode
	}
	return 0
}

func (x *ContestProblemLanguage) GetLanguageName() string {
	if x != nil {
		return x.LanguageName
	}
	return ""
}

func (x *ContestProblemLanguage) GetUserContent() string {
	if x != nil {
		return x.UserContent
	}
	return ""
}

func (x *ContestProblemLanguage) GetMainContent() string {
	if x != nil {
		return x.MainContent
	}
	return ""
}

type ListContestProblemLanguagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Number int32 `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
}

func (x *ListContestProblemLanguagesRequest) Reset() {
	*x = ListContestProblemLanguagesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_contest_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListContestProblemLanguagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListContestProblemLanguagesRequest) ProtoMessage() {}

func (x *ListContestProblemLanguagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_contest_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListContestProblemLanguagesRequest.ProtoReflect.Descriptor instead.
func (*ListContestProblemLanguagesRequest) Descriptor() ([]byte, []int) {
	return file_v1_contest_proto_rawDescGZIP(), []int{24}
}

func (x *ListContestProblemLanguagesRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ListContestProblemLanguagesRequest) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

type ListContestProblemLanguagesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data  []*ContestProblemLanguage `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Total int64                     `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *ListContestProblemLanguagesResponse) Reset() {
	*x = ListContestProblemLanguagesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_contest_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListContestProblemLanguagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListContestProblemLanguagesResponse) ProtoMessage() {}

func (x *ListContestProblemLanguagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_contest_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListContestProblemLanguagesResponse.ProtoReflect.Descriptor instead.
func (*ListContestProblemLanguagesResponse) Descriptor() ([]byte, []int) {
	return file_v1_contest_proto_rawDescGZIP(), []int{25}
}

func (x *ListContestProblemLanguagesResponse) GetData() []*ContestProblemLanguage {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ListContestProblemLanguagesResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetContestProblemLanguageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Number   int32 `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
	Language int32 `protobuf:"varint,3,opt,name=language,proto3" json:"language,omitempty"`
}

func (x *GetContestProblemLanguageRequest) Reset() {
	*x = GetContestProblemLanguageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_contest_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContestProblemLanguageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContestProblemLanguageRequest) ProtoMessage() {}

func (x *GetContestProblemLanguageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_contest_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContestProblemLanguageRequest.ProtoReflect.Descriptor instead.
func (*GetContestProblemLanguageRequest) Descriptor() ([]byte, []int) {
	return file_v1_contest_proto_rawDescGZIP(), []int{26}
}

func (x *GetContestProblemLanguageRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetContestProblemLanguageRequest) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *GetContestProblemLanguageRequest) GetLanguage() int32 {
	if x != nil {
		return x.Language
	}
	return 0
}

type Contest_Owner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type         Contest_Owner_OwnerType `protobuf:"varint,1,opt,name=type,proto3,enum=jnoj.interface.v1.Contest_Owner_OwnerType" json:"type,omitempty"`
	Id           int32                   `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Name         string                  `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	UserNickname string                  `protobuf:"bytes,4,opt,name=user_nickname,json=userNickname,proto3" json:"user_nickname,omitempty"`
}

func (x *Contest_Owner) Reset() {
	*x = Contest_Owner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_contest_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contest_Owner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contest_Owner) ProtoMessage() {}

func (x *Contest_Owner) ProtoReflect() protoreflect.Message {
	mi := &file_v1_contest_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contest_Owner.ProtoReflect.Descriptor instead.
func (*Contest_Owner) Descriptor() ([]byte, []int) {
	return file_v1_contest_proto_rawDescGZIP(), []int{4, 0}
}

func (x *Contest_Owner) GetType() Contest_Owner_OwnerType {
	if x != nil {
		return x.Type
	}
	return Contest_Owner_GROUP
}

func (x *Contest_Owner) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Contest_Owner) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Contest_Owner) GetUserNickname() string {
	if x != nil {
		return x.UserNickname
	}
	return ""
}

type ContestProblem_Statement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ProblemId int32  `protobuf:"varint,2,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	Language  string `protobuf:"bytes,3,opt,name=language,proto3" json:"language,omitempty"`
	Name      string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Legend    string `protobuf:"bytes,5,opt,name=legend,proto3" json:"legend,omitempty"`
	Input     string `protobuf:"bytes,6,opt,name=input,proto3" json:"input,omitempty"`
	Output    string `protobuf:"bytes,7,opt,name=output,proto3" json:"output,omitempty"`
	Note      string `protobuf:"bytes,8,opt,name=note,proto3" json:"note,omitempty"`
}

func (x *ContestProblem_Statement) Reset() {
	*x = ContestProblem_Statement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_contest_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContestProblem_Statement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContestProblem_Statement) ProtoMessage() {}

func (x *ContestProblem_Statement) ProtoReflect() protoreflect.Message {
	mi := &file_v1_contest_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContestProblem_Statement.ProtoReflect.Descriptor instead.
func (*ContestProblem_Statement) Descriptor() ([]byte, []int) {
	return file_v1_contest_proto_rawDescGZIP(), []int{9, 0}
}

func (x *ContestProblem_Statement) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ContestProblem_Statement) GetProblemId() int32 {
	if x != nil {
		return x.ProblemId
	}
	return 0
}

func (x *ContestProblem_Statement) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *ContestProblem_Statement) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ContestProblem_Statement) GetLegend() string {
	if x != nil {
		return x.Legend
	}
	return ""
}

func (x *ContestProblem_Statement) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

func (x *ContestProblem_Statement) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

func (x *ContestProblem_Statement) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

// 样例
type ContestProblem_SampleTest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Input  string `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
	Output string `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *ContestProblem_SampleTest) Reset() {
	*x = ContestProblem_SampleTest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_contest_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContestProblem_SampleTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContestProblem_SampleTest) ProtoMessage() {}

func (x *ContestProblem_SampleTest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_contest_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContestProblem_SampleTest.ProtoReflect.Descriptor instead.
func (*ContestProblem_SampleTest) Descriptor() ([]byte, []int) {
	return file_v1_contest_proto_rawDescGZIP(), []int{9, 1}
}

func (x *ContestProblem_SampleTest) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

func (x *ContestProblem_SampleTest) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

type BatchCreateContestUsersRequest_ContestUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *BatchCreateContestUsersRequest_ContestUser) Reset() {
	*x = BatchCreateContestUsersRequest_ContestUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_contest_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchCreateContestUsersRequest_ContestUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCreateContestUsersRequest_ContestUser) ProtoMessage() {}

func (x *BatchCreateContestUsersRequest_ContestUser) ProtoReflect() protoreflect.Message {
	mi := &file_v1_contest_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCreateContestUsersRequest_ContestUser.ProtoReflect.Descriptor instead.
func (*BatchCreateContestUsersRequest_ContestUser) Descriptor() ([]byte, []int) {
	return file_v1_contest_proto_rawDescGZIP(), []int{16, 0}
}

func (x *BatchCreateContestUsersRequest_ContestUser) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *BatchCreateContestUsersRequest_ContestUser) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type BatchCreateContestUsersResponse_ContestUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Reason   string `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *BatchCreateContestUsersResponse_ContestUser) Reset() {
	*x = BatchCreateContestUsersResponse_ContestUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_contest_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchCreateContestUsersResponse_ContestUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCreateContestUsersResponse_ContestUser) ProtoMessage() {}

func (x *BatchCreateContestUsersResponse_ContestUser) ProtoReflect() protoreflect.Message {
	mi := &file_v1_contest_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCreateContestUsersResponse_ContestUser.ProtoReflect.Descriptor instead.
func (*BatchCreateContestUsersResponse_ContestUser) Descriptor() ([]byte, []int) {
	return file_v1_contest_proto_rawDescGZIP(), []int{17, 0}
}

func (x *BatchCreateContestUsersResponse_ContestUser) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *BatchCreateContestUsersResponse_ContestUser) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BatchCreateContestUsersResponse_ContestUser) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type ListContestAllSubmissionsResponse_Submission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int32                                               `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Problem int32                                               `protobuf:"varint,2,opt,name=problem,proto3" json:"problem,omitempty"`
	Status  ListContestAllSubmissionsResponse_Submission_Status `protobuf:"varint,3,opt,name=status,proto3,enum=jnoj.interface.v1.ListContestAllSubmissionsResponse_Submission_Status" json:"status,omitempty"`
	UserId  int32                                               `protobuf:"varint,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Score   int32                                               `protobuf:"varint,5,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *ListContestAllSubmissionsResponse_Submission) Reset() {
	*x = ListContestAllSubmissionsResponse_Submission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_contest_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListContestAllSubmissionsResponse_Submission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListContestAllSubmissionsResponse_Submission) ProtoMessage() {}

func (x *ListContestAllSubmissionsResponse_Submission) ProtoReflect() protoreflect.Message {
	mi := &file_v1_contest_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListContestAllSubmissionsResponse_Submission.ProtoReflect.Descriptor instead.
func (*ListContestAllSubmissionsResponse_Submission) Descriptor() ([]byte, []int) {
	return file_v1_contest_proto_rawDescGZIP(), []int{20, 0}
}

func (x *ListContestAllSubmissionsResponse_Submission) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ListContestAllSubmissionsResponse_Submission) GetProblem() int32 {
	if x != nil {
		return x.Problem
	}
	return 0
}

func (x *ListContestAllSubmissionsResponse_Submission) GetStatus() ListContestAllSubmissionsResponse_Submission_Status {
	if x != nil {
		return x.Status
	}
	return ListContestAllSubmissionsResponse_Submission_PENDING
}

func (x *ListContestAllSubmissionsResponse_Submission) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ListContestAllSubmissionsResponse_Submission) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

type ListContestSubmissionsResponse_User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Nickname string `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
}

func (x *ListContestSubmissionsResponse_User) Reset() {
	*x = ListContestSubmissionsResponse_User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_contest_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListContestSubmissionsResponse_User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListContestSubmissionsResponse_User) ProtoMessage() {}

func (x *ListContestSubmissionsResponse_User) ProtoReflect() protoreflect.Message {
	mi := &file_v1_contest_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListContestSubmissionsResponse_User.ProtoReflect.Descriptor instead.
func (*ListContestSubmissionsResponse_User) Descriptor() ([]byte, []int) {
	return file_v1_contest_proto_rawDescGZIP(), []int{22, 0}
}

func (x *ListContestSubmissionsResponse_User) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ListContestSubmissionsResponse_User) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

type ListContestSubmissionsResponse_Submission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int32                                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ProblemNumber int32                                `protobuf:"varint,2,opt,name=problem_number,json=problemNumber,proto3" json:"problem_number,omitempty"`
	ProblemName   string                               `protobuf:"bytes,3,opt,name=problem_name,json=problemName,proto3" json:"problem_name,omitempty"`
	Verdict       int32                                `protobuf:"varint,4,opt,name=verdict,proto3" json:"verdict,omitempty"`
	Time          int32                                `protobuf:"varint,5,opt,name=time,proto3" json:"time,omitempty"`
	Memory        int32                                `protobuf:"varint,6,opt,name=memory,proto3" json:"memory,omitempty"`
	UserId        int32                                `protobuf:"varint,7,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Score         int32                                `protobuf:"varint,8,opt,name=score,proto3" json:"score,omitempty"`
	Language      int32                                `protobuf:"varint,9,opt,name=language,proto3" json:"language,omitempty"`
	User          *ListContestSubmissionsResponse_User `protobuf:"bytes,10,opt,name=user,proto3" json:"user,omitempty"`
	CreatedAt     *timestamppb.Timestamp               `protobuf:"bytes,11,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *ListContestSubmissionsResponse_Submission) Reset() {
	*x = ListContestSubmissionsResponse_Submission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_contest_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListContestSubmissionsResponse_Submission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListContestSubmissionsResponse_Submission) ProtoMessage() {}

func (x *ListContestSubmissionsResponse_Submission) ProtoReflect() protoreflect.Message {
	mi := &file_v1_contest_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListContestSubmissionsResponse_Submission.ProtoReflect.Descriptor instead.
func (*ListContestSubmissionsResponse_Submission) Descriptor() ([]byte, []int) {
	return file_v1_contest_proto_rawDescGZIP(), []int{22, 1}
}

func (x *ListContestSubmissionsResponse_Submission) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ListContestSubmissionsResponse_Submission) GetProblemNumber() int32 {
	if x != nil {
		return x.ProblemNumber
	}
	return 0
}

func (x *ListContestSubmissionsResponse_Submission) GetProblemName() string {
	if x != nil {
		return x.ProblemName
	}
	return ""
}

func (x *ListContestSubmissionsResponse_Submission) GetVerdict() int32 {
	if x != nil {
		return x.Verdict
	}
	return 0
}

func (x *ListContestSubmissionsResponse_Submission) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *ListContestSubmissionsResponse_Submission) GetMemory() int32 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *ListContestSubmissionsResponse_Submission) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ListContestSubmissionsResponse_Submission) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *ListContestSubmissionsResponse_Submission) GetLanguage() int32 {
	if x != nil {
		return x.Language
	}
	return 0
}

func (x *ListContestSubmissionsResponse_Submission) GetUser() *ListContestSubmissionsResponse_User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *ListContestSubmissionsResponse_Submission) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

var File_v1_contest_proto protoreflect.FileDescriptor

var file_v1_contest_proto_rawDesc = []byte{
	0x0a, 0x10, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x11, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x85, 0x01, 0x0a, 0x13, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65,
	0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x65,
	0x72, 0x50, 0x61, 0x67, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x22, 0x5c, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x22, 0x23, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0xeb, 0x03, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1e, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x63, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x52, 0x07, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x63, 0x79, 0x12, 0x44, 0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x0a,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0xbb, 0x08, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x66, 0x72, 0x6f, 0x7a, 0x65,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x63, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x52, 0x07, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x63, 0x79, 0x12, 0x44, 0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52,
	0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x30, 0x0a, 0x0f, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x10, 0x52, 0x0e, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a,
	0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x22, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x76,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c,
	0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x4f, 0x0a, 0x0e,
	0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d,
	0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x36, 0x0a,
	0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6a,
	0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x05,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x1a, 0xb2, 0x01, 0x0a, 0x05, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12,
	0x3e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e,
	0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x2e,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x69, 0x63, 0x6b,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72,
	0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x20, 0x0a, 0x09, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x00,
	0x12, 0x08, 0x0a, 0x04, 0x55, 0x53, 0x45, 0x52, 0x10, 0x01, 0x22, 0x55, 0x0a, 0x0d, 0x52, 0x75,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0f, 0x0a, 0x0b, 0x4e,
	0x4f, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b,
	0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x14, 0x0a,
	0x10, 0x46, 0x52, 0x4f, 0x5a, 0x45, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x53, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10,
	0x03, 0x22, 0x2c, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x6a, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x50, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6a,
	0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x42, 0x0a, 0x18, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22,
	0xb7, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xc5, 0x06, 0x0a, 0x0e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x4b, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x4f, 0x0a, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x54, 0x65, 0x73, 0x74, 0x73, 0x12, 0x40, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0xc4, 0x01, 0x0a, 0x09, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x67, 0x65, 0x6e,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74,
	0x65, 0x1a, 0x3a, 0x0a, 0x0a, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x32, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x53,
	0x54, 0x41, 0x52, 0x54, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x54, 0x54, 0x45, 0x4d, 0x50,
	0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x44, 0x10,
	0x02, 0x22, 0x4c, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64, 0x22,
	0x45, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xe8, 0x01, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x69, 0x63, 0x6b,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72,
	0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x76, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x76, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x36, 0x0a, 0x04, 0x72, 0x6f, 0x6c,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c,
	0x65, 0x22, 0xc1, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x3b, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22,
	0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f,
	0x6c, 0x65, 0x48, 0x00, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0x64, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x32, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x7f, 0x0a, 0x18, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x18, 0x40, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x8b, 0x02, 0x0a,
	0x1e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x53, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d,
	0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x12, 0x36, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x1a, 0x3d, 0x0a, 0x0b, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xaa, 0x02, 0x0a, 0x1f, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3e, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x56, 0x0a, 0x06, 0x66, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x1a, 0x55, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x9e, 0x01, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x36, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22,
	0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f,
	0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0x41, 0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0xf3, 0x02, 0x0a, 0x21,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x53, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3f, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x41,
	0x6c, 0x6c, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0xf8, 0x01, 0x0a, 0x0a, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x12,
	0x5e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x46, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x41,
	0x6c, 0x6c, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x31,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45,
	0x43, 0x54, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x10,
	0x02, 0x22, 0xcb, 0x01, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x12, 0x1d, 0x0a, 0x07,
	0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52,
	0x07, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50,
	0x61, 0x67, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x22,
	0xbd, 0x04, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x50, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3c, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x1a, 0x32, 0x0a, 0x04, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0xfe,
	0x02, 0x0a, 0x0a, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a,
	0x0e, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x64, 0x69,
	0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x64, 0x69, 0x63,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x4a, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22,
	0xb8, 0x01, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x69, 0x6e, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d,
	0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x4c, 0x0a, 0x22, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x7a, 0x0a, 0x23, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x4c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x22, 0x66, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2a, 0x29, 0x0a, 0x0e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x12, 0x0b,
	0x0a, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x50,
	0x55, 0x42, 0x4c, 0x49, 0x43, 0x10, 0x01, 0x2a, 0x4a, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x10, 0x0a, 0x0c,
	0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x41, 0x4e, 0x59, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x13,
	0x0a, 0x0f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x10, 0x02, 0x2a, 0x91, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x4f, 0x4c, 0x45, 0x5f,
	0x47, 0x55, 0x45, 0x53, 0x54, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x4f, 0x4c, 0x45, 0x5f,
	0x4f, 0x46, 0x46, 0x49, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x10,
	0x01, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x55, 0x4e, 0x4f, 0x46, 0x46, 0x49,
	0x43, 0x49, 0x41, 0x4c, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x10, 0x02, 0x12, 0x17, 0x0a,
	0x13, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x50, 0x4c,
	0x41, 0x59, 0x45, 0x52, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x57,
	0x52, 0x49, 0x54, 0x45, 0x52, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x4f, 0x4c, 0x45, 0x5f,
	0x41, 0x44, 0x4d, 0x49, 0x4e, 0x10, 0x05, 0x2a, 0x28, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x43, 0x50, 0x43, 0x10, 0x00,
	0x12, 0x07, 0x0a, 0x03, 0x49, 0x4f, 0x49, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x49, 0x10,
	0x02, 0x32, 0xcf, 0x12, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x72, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x73, 0x74, 0x73, 0x12, 0x26, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6a,
	0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x11, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0b, 0x12, 0x09, 0x2f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x12, 0x66, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x12, 0x24, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x6a,
	0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10,
	0x12, 0x0e, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x12, 0x6a, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x12, 0x27, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x6a, 0x6e, 0x6f,
	0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x22, 0x14, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x22, 0x09,
	0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x6f, 0x0a, 0x0d,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x12, 0x27, 0x2e,
	0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x1a, 0x0e, 0x2f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x95, 0x01,
	0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x73, 0x12, 0x2d, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x73, 0x12, 0x8d, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x12, 0x2b, 0x2e, 0x6a, 0x6e,
	0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x22, 0x28, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x22, 0x12, 0x20, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x7d, 0x12, 0x8d, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x12, 0x2e,
	0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x17, 0x2f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x73, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x88, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x12, 0x2e,
	0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x2a, 0x20,
	0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x70,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x7d,
	0x12, 0xc0, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73,
	0x12, 0x35, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x4c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x12, 0x2a, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73,
	0x2f, 0x7b, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x7d, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x73, 0x12, 0xba, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x12, 0x33, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x22, 0x3d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x12, 0x35, 0x2f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x73, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x73, 0x2f, 0x7b, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x7d, 0x2f, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x7b, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x7d,
	0x12, 0x91, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2b, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x12, 0x89, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x2b, 0x2e, 0x6a, 0x6e, 0x6f,
	0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x22,
	0x1c, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x3a, 0x01, 0x2a,
	0x12, 0xaf, 0x01, 0x0a, 0x17, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x31, 0x2e, 0x6a,
	0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x32, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x22, 0x22, 0x2f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x3a,
	0x01, 0x2a, 0x12, 0x89, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x2b, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x1a, 0x1c, 0x2f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0xb6,
	0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x41, 0x6c,
	0x6c, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x33, 0x2e, 0x6a,
	0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x34, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x41, 0x6c, 0x6c, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x12,
	0x26, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x75, 0x62, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xa9, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x30, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x12,
	0x22, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x42, 0x15, 0x5a, 0x13, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_v1_contest_proto_rawDescOnce sync.Once
	file_v1_contest_proto_rawDescData = file_v1_contest_proto_rawDesc
)

func file_v1_contest_proto_rawDescGZIP() []byte {
	file_v1_contest_proto_rawDescOnce.Do(func() {
		file_v1_contest_proto_rawDescData = protoimpl.X.CompressGZIP(file_v1_contest_proto_rawDescData)
	})
	return file_v1_contest_proto_rawDescData
}

var file_v1_contest_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_v1_contest_proto_msgTypes = make([]protoimpl.MessageInfo, 35)
var file_v1_contest_proto_goTypes = []interface{}{
	(ContestPrivacy)(0),          // 0: jnoj.interface.v1.ContestPrivacy
	(ContestMembership)(0),       // 1: jnoj.interface.v1.ContestMembership
	(ContestUserRole)(0),         // 2: jnoj.interface.v1.ContestUserRole
	(ContestType)(0),             // 3: jnoj.interface.v1.ContestType
	(Contest_RunningStatus)(0),   // 4: jnoj.interface.v1.Contest.RunningStatus
	(Contest_Owner_OwnerType)(0), // 5: jnoj.interface.v1.Contest.Owner.OwnerType
	(ContestProblem_Status)(0),   // 6: jnoj.interface.v1.ContestProblem.Status
	(ListContestAllSubmissionsResponse_Submission_Status)(0), // 7: jnoj.interface.v1.ListContestAllSubmissionsResponse.Submission.Status
	(*ListContestsRequest)(nil),                              // 8: jnoj.interface.v1.ListContestsRequest
	(*ListContestsResponse)(nil),                             // 9: jnoj.interface.v1.ListContestsResponse
	(*GetContestRequest)(nil),                                // 10: jnoj.interface.v1.GetContestRequest
	(*UpdateContestRequest)(nil),                             // 11: jnoj.interface.v1.UpdateContestRequest
	(*Contest)(nil),                                          // 12: jnoj.interface.v1.Contest
	(*ListContestProblemsRequest)(nil),                       // 13: jnoj.interface.v1.ListContestProblemsRequest
	(*ListContestProblemsResponse)(nil),                      // 14: jnoj.interface.v1.ListContestProblemsResponse
	(*GetContestProblemRequest)(nil),                         // 15: jnoj.interface.v1.GetContestProblemRequest
	(*CreateContestRequest)(nil),                             // 16: jnoj.interface.v1.CreateContestRequest
	(*ContestProblem)(nil),                                   // 17: jnoj.interface.v1.ContestProblem
	(*CreateContestProblemRequest)(nil),                      // 18: jnoj.interface.v1.CreateContestProblemRequest
	(*DeleteContestProblemRequest)(nil),                      // 19: jnoj.interface.v1.DeleteContestProblemRequest
	(*ContestUser)(nil),                                      // 20: jnoj.interface.v1.ContestUser
	(*ListContestUsersRequest)(nil),                          // 21: jnoj.interface.v1.ListContestUsersRequest
	(*ListContestUsersResponse)(nil),                         // 22: jnoj.interface.v1.ListContestUsersResponse
	(*CreateContestUserRequest)(nil),                         // 23: jnoj.interface.v1.CreateContestUserRequest
	(*BatchCreateContestUsersRequest)(nil),                   // 24: jnoj.interface.v1.BatchCreateContestUsersRequest
	(*BatchCreateContestUsersResponse)(nil),                  // 25: jnoj.interface.v1.BatchCreateContestUsersResponse
	(*UpdateContestUserRequest)(nil),                         // 26: jnoj.interface.v1.UpdateContestUserRequest
	(*ListContestAllSubmissionsRequest)(nil),                 // 27: jnoj.interface.v1.ListContestAllSubmissionsRequest
	(*ListContestAllSubmissionsResponse)(nil),                // 28: jnoj.interface.v1.ListContestAllSubmissionsResponse
	(*ListContestSubmissionsRequest)(nil),                    // 29: jnoj.interface.v1.ListContestSubmissionsRequest
	(*ListContestSubmissionsResponse)(nil),                   // 30: jnoj.interface.v1.ListContestSubmissionsResponse
	(*ContestProblemLanguage)(nil),                           // 31: jnoj.interface.v1.ContestProblemLanguage
	(*ListContestProblemLanguagesRequest)(nil),               // 32: jnoj.interface.v1.ListContestProblemLanguagesRequest
	(*ListContestProblemLanguagesResponse)(nil),              // 33: jnoj.interface.v1.ListContestProblemLanguagesResponse
	(*GetContestProblemLanguageRequest)(nil),                 // 34: jnoj.interface.v1.GetContestProblemLanguageRequest
	(*Contest_Owner)(nil),                                    // 35: jnoj.interface.v1.Contest.Owner
	(*ContestProblem_Statement)(nil),                         // 36: jnoj.interface.v1.ContestProblem.Statement
	(*ContestProblem_SampleTest)(nil),                        // 37: jnoj.interface.v1.ContestProblem.SampleTest
	(*BatchCreateContestUsersRequest_ContestUser)(nil),       // 38: jnoj.interface.v1.BatchCreateContestUsersRequest.ContestUser
	(*BatchCreateContestUsersResponse_ContestUser)(nil),      // 39: jnoj.interface.v1.BatchCreateContestUsersResponse.ContestUser
	(*ListContestAllSubmissionsResponse_Submission)(nil),     // 40: jnoj.interface.v1.ListContestAllSubmissionsResponse.Submission
	(*ListContestSubmissionsResponse_User)(nil),              // 41: jnoj.interface.v1.ListContestSubmissionsResponse.User
	(*ListContestSubmissionsResponse_Submission)(nil),        // 42: jnoj.interface.v1.ListContestSubmissionsResponse.Submission
	(*timestamppb.Timestamp)(nil),                            // 43: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),                                    // 44: google.protobuf.Empty
}
var file_v1_contest_proto_depIdxs = []int32{
	12, // 0: jnoj.interface.v1.ListContestsResponse.data:type_name -> jnoj.interface.v1.Contest
	43, // 1: jnoj.interface.v1.UpdateContestRequest.start_time:type_name -> google.protobuf.Timestamp
	43, // 2: jnoj.interface.v1.UpdateContestRequest.end_time:type_name -> google.protobuf.Timestamp
	43, // 3: jnoj.interface.v1.UpdateContestRequest.frozen_time:type_name -> google.protobuf.Timestamp
	3,  // 4: jnoj.interface.v1.UpdateContestRequest.type:type_name -> jnoj.interface.v1.ContestType
	0,  // 5: jnoj.interface.v1.UpdateContestRequest.privacy:type_name -> jnoj.interface.v1.ContestPrivacy
	1,  // 6: jnoj.interface.v1.UpdateContestRequest.membership:type_name -> jnoj.interface.v1.ContestMembership
	43, // 7: jnoj.interface.v1.Contest.start_time:type_name -> google.protobuf.Timestamp
	43, // 8: jnoj.interface.v1.Contest.end_time:type_name -> google.protobuf.Timestamp
	43, // 9: jnoj.interface.v1.Contest.frozen_time:type_name -> google.protobuf.Timestamp
	3,  // 10: jnoj.interface.v1.Contest.type:type_name -> jnoj.interface.v1.ContestType
	0,  // 11: jnoj.interface.v1.Contest.privacy:type_name -> jnoj.interface.v1.ContestPrivacy
	1,  // 12: jnoj.interface.v1.Contest.membership:type_name -> jnoj.interface.v1.ContestMembership
	2,  // 13: jnoj.interface.v1.Contest.role:type_name -> jnoj.interface.v1.ContestUserRole
	43, // 14: jnoj.interface.v1.Contest.virtual_start:type_name -> google.protobuf.Timestamp
	4,  // 15: jnoj.interface.v1.Contest.running_status:type_name -> jnoj.interface.v1.Contest.RunningStatus
	35, // 16: jnoj.interface.v1.Contest.owner:type_name -> jnoj.interface.v1.Contest.Owner
	17, // 17: jnoj.interface.v1.ListContestProblemsResponse.data:type_name -> jnoj.interface.v1.ContestProblem
	43, // 18: jnoj.interface.v1.CreateContestRequest.start_time:type_name -> google.protobuf.Timestamp
	43, // 19: jnoj.interface.v1.CreateContestRequest.end_time:type_name -> google.protobuf.Timestamp
	36, // 20: jnoj.interface.v1.ContestProblem.statements:type_name -> jnoj.interface.v1.ContestProblem.Statement
	37, // 21: jnoj.interface.v1.ContestProblem.sample_tests:type_name -> jnoj.interface.v1.ContestProblem.SampleTest
	6,  // 22: jnoj.interface.v1.ContestProblem.status:type_name -> jnoj.interface.v1.ContestProblem.Status
	43, // 23: jnoj.interface.v1.ContestUser.virtual_start:type_name -> google.protobuf.Timestamp
	2,  // 24: jnoj.interface.v1.ContestUser.role:type_name -> jnoj.interface.v1.ContestUserRole
	2,  // 25: jnoj.interface.v1.ListContestUsersRequest.role:type_name -> jnoj.interface.v1.ContestUserRole
	20, // 26: jnoj.interface.v1.ListContestUsersResponse.data:type_name -> jnoj.interface.v1.ContestUser
	38, // 27: jnoj.interface.v1.BatchCreateContestUsersRequest.users:type_name -> jnoj.interface.v1.BatchCreateContestUsersRequest.ContestUser
	2,  // 28: jnoj.interface.v1.BatchCreateContestUsersRequest.role:type_name -> jnoj.interface.v1.ContestUserRole
	39, // 29: jnoj.interface.v1.BatchCreateContestUsersResponse.success:type_name -> jnoj.interface.v1.BatchCreateContestUsersResponse.ContestUser
	39, // 30: jnoj.interface.v1.BatchCreateContestUsersResponse.failed:type_name -> jnoj.interface.v1.BatchCreateContestUsersResponse.ContestUser
	2,  // 31: jnoj.interface.v1.UpdateContestUserRequest.role:type_name -> jnoj.interface.v1.ContestUserRole
	40, // 32: jnoj.interface.v1.ListContestAllSubmissionsResponse.data:type_name -> jnoj.interface.v1.ListContestAllSubmissionsResponse.Submission
	42, // 33: jnoj.interface.v1.ListContestSubmissionsResponse.data:type_name -> jnoj.interface.v1.ListContestSubmissionsResponse.Submission
	31, // 34: jnoj.interface.v1.ListContestProblemLanguagesResponse.data:type_name -> jnoj.interface.v1.ContestProblemLanguage
	5,  // 35: jnoj.interface.v1.Contest.Owner.type:type_name -> jnoj.interface.v1.Contest.Owner.OwnerType
	7,  // 36: jnoj.interface.v1.ListContestAllSubmissionsResponse.Submission.status:type_name -> jnoj.interface.v1.ListContestAllSubmissionsResponse.Submission.Status
	41, // 37: jnoj.interface.v1.ListContestSubmissionsResponse.Submission.user:type_name -> jnoj.interface.v1.ListContestSubmissionsResponse.User
	43, // 38: jnoj.interface.v1.ListContestSubmissionsResponse.Submission.created_at:type_name -> google.protobuf.Timestamp
	8,  // 39: jnoj.interface.v1.ContestService.ListContests:input_type -> jnoj.interface.v1.ListContestsRequest
	10, // 40: jnoj.interface.v1.ContestService.GetContest:input_type -> jnoj.interface.v1.GetContestRequest
	16, // 41: jnoj.interface.v1.ContestService.CreateContest:input_type -> jnoj.interface.v1.CreateContestRequest
	11, // 42: jnoj.interface.v1.ContestService.UpdateContest:input_type -> jnoj.interface.v1.UpdateContestRequest
	13, // 43: jnoj.interface.v1.ContestService.ListContestProblems:input_type -> jnoj.interface.v1.ListContestProblemsRequest
	15, // 44: jnoj.interface.v1.ContestService.GetContestProblem:input_type -> jnoj.interface.v1.GetContestProblemRequest
	18, // 45: jnoj.interface.v1.ContestService.CreateContestProblem:input_type -> jnoj.interface.v1.CreateContestProblemRequest
	19, // 46: jnoj.interface.v1.ContestService.DeleteContestProblem:input_type -> jnoj.interface.v1.DeleteContestProblemRequest
	32, // 47: jnoj.interface.v1.ContestService.ListContestProblemLanguages:input_type -> jnoj.interface.v1.ListContestProblemLanguagesRequest
	34, // 48: jnoj.interface.v1.ContestService.GetContestProblemLanguage:input_type -> jnoj.interface.v1.GetContestProblemLanguageRequest
	21, // 49: jnoj.interface.v1.ContestService.ListContestUsers:input_type -> jnoj.interface.v1.ListContestUsersRequest
	23, // 50: jnoj.interface.v1.ContestService.CreateContestUser:input_type -> jnoj.interface.v1.CreateContestUserRequest
	24, // 51: jnoj.interface.v1.ContestService.BatchCreateContestUsers:input_type -> jnoj.interface.v1.BatchCreateContestUsersRequest
	26, // 52: jnoj.interface.v1.ContestService.UpdateContestUser:input_type -> jnoj.interface.v1.UpdateContestUserRequest
	27, // 53: jnoj.interface.v1.ContestService.ListContestAllSubmissions:input_type -> jnoj.interface.v1.ListContestAllSubmissionsRequest
	29, // 54: jnoj.interface.v1.ContestService.ListContestSubmissions:input_type -> jnoj.interface.v1.ListContestSubmissionsRequest
	9,  // 55: jnoj.interface.v1.ContestService.ListContests:output_type -> jnoj.interface.v1.ListContestsResponse
	12, // 56: jnoj.interface.v1.ContestService.GetContest:output_type -> jnoj.interface.v1.Contest
	12, // 57: jnoj.interface.v1.ContestService.CreateContest:output_type -> jnoj.interface.v1.Contest
	12, // 58: jnoj.interface.v1.ContestService.UpdateContest:output_type -> jnoj.interface.v1.Contest
	14, // 59: jnoj.interface.v1.ContestService.ListContestProblems:output_type -> jnoj.interface.v1.ListContestProblemsResponse
	17, // 60: jnoj.interface.v1.ContestService.GetContestProblem:output_type -> jnoj.interface.v1.ContestProblem
	17, // 61: jnoj.interface.v1.ContestService.CreateContestProblem:output_type -> jnoj.interface.v1.ContestProblem
	44, // 62: jnoj.interface.v1.ContestService.DeleteContestProblem:output_type -> google.protobuf.Empty
	33, // 63: jnoj.interface.v1.ContestService.ListContestProblemLanguages:output_type -> jnoj.interface.v1.ListContestProblemLanguagesResponse
	31, // 64: jnoj.interface.v1.ContestService.GetContestProblemLanguage:output_type -> jnoj.interface.v1.ContestProblemLanguage
	22, // 65: jnoj.interface.v1.ContestService.ListContestUsers:output_type -> jnoj.interface.v1.ListContestUsersResponse
	20, // 66: jnoj.interface.v1.ContestService.CreateContestUser:output_type -> jnoj.interface.v1.ContestUser
	25, // 67: jnoj.interface.v1.ContestService.BatchCreateContestUsers:output_type -> jnoj.interface.v1.BatchCreateContestUsersResponse
	20, // 68: jnoj.interface.v1.ContestService.UpdateContestUser:output_type -> jnoj.interface.v1.ContestUser
	28, // 69: jnoj.interface.v1.ContestService.ListContestAllSubmissions:output_type -> jnoj.interface.v1.ListContestAllSubmissionsResponse
	30, // 70: jnoj.interface.v1.ContestService.ListContestSubmissions:output_type -> jnoj.interface.v1.ListContestSubmissionsResponse
	55, // [55:71] is the sub-list for method output_type
	39, // [39:55] is the sub-list for method input_type
	39, // [39:39] is the sub-list for extension type_name
	39, // [39:39] is the sub-list for extension extendee
	0,  // [0:39] is the sub-list for field type_name
}

func init() { file_v1_contest_proto_init() }
func file_v1_contest_proto_init() {
	if File_v1_contest_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_v1_contest_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListContestsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_contest_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListContestsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_contest_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_contest_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateContestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_contest_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_contest_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListContestProblemsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_contest_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListContestProblemsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_contest_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContestProblemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_contest_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateContestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_contest_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContestProblem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_contest_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateContestProblemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_contest_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteContestProblemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_contest_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContestUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_contest_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListContestUsersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_contest_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListContestUsersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_contest_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateContestUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_contest_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchCreateContestUsersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_contest_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchCreateContestUsersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_contest_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateContestUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_contest_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListContestAllSubmissionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_contest_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListContestAllSubmissionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_contest_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListContestSubmissionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_contest_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListContestSubmissionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_contest_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContestProblemLanguage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_contest_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListContestProblemLanguagesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_contest_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListContestProblemLanguagesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_contest_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContestProblemLanguageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_contest_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contest_Owner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_contest_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContestProblem_Statement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_contest_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContestProblem_SampleTest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_contest_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchCreateContestUsersRequest_ContestUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_contest_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchCreateContestUsersResponse_ContestUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_contest_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListContestAllSubmissionsResponse_Submission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_contest_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListContestSubmissionsResponse_User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_contest_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListContestSubmissionsResponse_Submission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_v1_contest_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_v1_contest_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_v1_contest_proto_msgTypes[21].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v1_contest_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   35,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_v1_contest_proto_goTypes,
		DependencyIndexes: file_v1_contest_proto_depIdxs,
		EnumInfos:         file_v1_contest_proto_enumTypes,
		MessageInfos:      file_v1_contest_proto_msgTypes,
	}.Build()
	File_v1_contest_proto = out.File
	file_v1_contest_proto_rawDesc = nil
	file_v1_contest_proto_goTypes = nil
	file_v1_contest_proto_depIdxs = nil
}
