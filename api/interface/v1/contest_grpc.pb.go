// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: v1/contest.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ContestServiceClient is the client API for ContestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContestServiceClient interface {
	// 比赛列表
	ListContests(ctx context.Context, in *ListContestsRequest, opts ...grpc.CallOption) (*ListContestsResponse, error)
	// 比赛详情
	GetContest(ctx context.Context, in *GetContestRequest, opts ...grpc.CallOption) (*Contest, error)
	// 获取比赛题目列表
	ListContestProblems(ctx context.Context, in *ListContestProblemsRequest, opts ...grpc.CallOption) (*ListContestProblemsResponse, error)
	// 获取比赛题目
	GetContestProblem(ctx context.Context, in *GetContestProblemRequest, opts ...grpc.CallOption) (*ContestProblem, error)
	// 获取比赛用户
	ListContestUsers(ctx context.Context, in *ListContestUsersRequest, opts ...grpc.CallOption) (*ListContestUsersResponse, error)
}

type contestServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewContestServiceClient(cc grpc.ClientConnInterface) ContestServiceClient {
	return &contestServiceClient{cc}
}

func (c *contestServiceClient) ListContests(ctx context.Context, in *ListContestsRequest, opts ...grpc.CallOption) (*ListContestsResponse, error) {
	out := new(ListContestsResponse)
	err := c.cc.Invoke(ctx, "/jnoj.interface.v1.ContestService/ListContests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contestServiceClient) GetContest(ctx context.Context, in *GetContestRequest, opts ...grpc.CallOption) (*Contest, error) {
	out := new(Contest)
	err := c.cc.Invoke(ctx, "/jnoj.interface.v1.ContestService/GetContest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contestServiceClient) ListContestProblems(ctx context.Context, in *ListContestProblemsRequest, opts ...grpc.CallOption) (*ListContestProblemsResponse, error) {
	out := new(ListContestProblemsResponse)
	err := c.cc.Invoke(ctx, "/jnoj.interface.v1.ContestService/ListContestProblems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contestServiceClient) GetContestProblem(ctx context.Context, in *GetContestProblemRequest, opts ...grpc.CallOption) (*ContestProblem, error) {
	out := new(ContestProblem)
	err := c.cc.Invoke(ctx, "/jnoj.interface.v1.ContestService/GetContestProblem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contestServiceClient) ListContestUsers(ctx context.Context, in *ListContestUsersRequest, opts ...grpc.CallOption) (*ListContestUsersResponse, error) {
	out := new(ListContestUsersResponse)
	err := c.cc.Invoke(ctx, "/jnoj.interface.v1.ContestService/ListContestUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContestServiceServer is the server API for ContestService service.
// All implementations must embed UnimplementedContestServiceServer
// for forward compatibility
type ContestServiceServer interface {
	// 比赛列表
	ListContests(context.Context, *ListContestsRequest) (*ListContestsResponse, error)
	// 比赛详情
	GetContest(context.Context, *GetContestRequest) (*Contest, error)
	// 获取比赛题目列表
	ListContestProblems(context.Context, *ListContestProblemsRequest) (*ListContestProblemsResponse, error)
	// 获取比赛题目
	GetContestProblem(context.Context, *GetContestProblemRequest) (*ContestProblem, error)
	// 获取比赛用户
	ListContestUsers(context.Context, *ListContestUsersRequest) (*ListContestUsersResponse, error)
	mustEmbedUnimplementedContestServiceServer()
}

// UnimplementedContestServiceServer must be embedded to have forward compatible implementations.
type UnimplementedContestServiceServer struct {
}

func (UnimplementedContestServiceServer) ListContests(context.Context, *ListContestsRequest) (*ListContestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListContests not implemented")
}
func (UnimplementedContestServiceServer) GetContest(context.Context, *GetContestRequest) (*Contest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContest not implemented")
}
func (UnimplementedContestServiceServer) ListContestProblems(context.Context, *ListContestProblemsRequest) (*ListContestProblemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListContestProblems not implemented")
}
func (UnimplementedContestServiceServer) GetContestProblem(context.Context, *GetContestProblemRequest) (*ContestProblem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContestProblem not implemented")
}
func (UnimplementedContestServiceServer) ListContestUsers(context.Context, *ListContestUsersRequest) (*ListContestUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListContestUsers not implemented")
}
func (UnimplementedContestServiceServer) mustEmbedUnimplementedContestServiceServer() {}

// UnsafeContestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContestServiceServer will
// result in compilation errors.
type UnsafeContestServiceServer interface {
	mustEmbedUnimplementedContestServiceServer()
}

func RegisterContestServiceServer(s grpc.ServiceRegistrar, srv ContestServiceServer) {
	s.RegisterService(&ContestService_ServiceDesc, srv)
}

func _ContestService_ListContests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListContestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContestServiceServer).ListContests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jnoj.interface.v1.ContestService/ListContests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContestServiceServer).ListContests(ctx, req.(*ListContestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContestService_GetContest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContestServiceServer).GetContest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jnoj.interface.v1.ContestService/GetContest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContestServiceServer).GetContest(ctx, req.(*GetContestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContestService_ListContestProblems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListContestProblemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContestServiceServer).ListContestProblems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jnoj.interface.v1.ContestService/ListContestProblems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContestServiceServer).ListContestProblems(ctx, req.(*ListContestProblemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContestService_GetContestProblem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContestProblemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContestServiceServer).GetContestProblem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jnoj.interface.v1.ContestService/GetContestProblem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContestServiceServer).GetContestProblem(ctx, req.(*GetContestProblemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContestService_ListContestUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListContestUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContestServiceServer).ListContestUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jnoj.interface.v1.ContestService/ListContestUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContestServiceServer).ListContestUsers(ctx, req.(*ListContestUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ContestService_ServiceDesc is the grpc.ServiceDesc for ContestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "jnoj.interface.v1.ContestService",
	HandlerType: (*ContestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListContests",
			Handler:    _ContestService_ListContests_Handler,
		},
		{
			MethodName: "GetContest",
			Handler:    _ContestService_GetContest_Handler,
		},
		{
			MethodName: "ListContestProblems",
			Handler:    _ContestService_ListContestProblems_Handler,
		},
		{
			MethodName: "GetContestProblem",
			Handler:    _ContestService_GetContestProblem_Handler,
		},
		{
			MethodName: "ListContestUsers",
			Handler:    _ContestService_ListContestUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/contest.proto",
}
