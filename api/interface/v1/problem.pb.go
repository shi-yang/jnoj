// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.23.4
// source: v1/problem.proto

package v1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 题目类型：标准输入输出、函数题、客观题
type ProblemType int32

const (
	ProblemType_DEFAULT   ProblemType = 0 // 标准输入输出
	ProblemType_FUNCTION  ProblemType = 1 // 函数题
	ProblemType_OBJECTIVE ProblemType = 2 // 客观题
)

// Enum value maps for ProblemType.
var (
	ProblemType_name = map[int32]string{
		0: "DEFAULT",
		1: "FUNCTION",
		2: "OBJECTIVE",
	}
	ProblemType_value = map[string]int32{
		"DEFAULT":   0,
		"FUNCTION":  1,
		"OBJECTIVE": 2,
	}
)

func (x ProblemType) Enum() *ProblemType {
	p := new(ProblemType)
	*p = x
	return p
}

func (x ProblemType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProblemType) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_problem_proto_enumTypes[0].Descriptor()
}

func (ProblemType) Type() protoreflect.EnumType {
	return &file_v1_problem_proto_enumTypes[0]
}

func (x ProblemType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProblemType.Descriptor instead.
func (ProblemType) EnumDescriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{0}
}

type ProblemStatementType int32

const (
	ProblemStatementType_CODE      ProblemStatementType = 0 // 编程题
	ProblemStatementType_CHOICE    ProblemStatementType = 1 // 单选题
	ProblemStatementType_MULTIPLE  ProblemStatementType = 2 // 多选题
	ProblemStatementType_FILLBLANK ProblemStatementType = 3 // 填空题
)

// Enum value maps for ProblemStatementType.
var (
	ProblemStatementType_name = map[int32]string{
		0: "CODE",
		1: "CHOICE",
		2: "MULTIPLE",
		3: "FILLBLANK",
	}
	ProblemStatementType_value = map[string]int32{
		"CODE":      0,
		"CHOICE":    1,
		"MULTIPLE":  2,
		"FILLBLANK": 3,
	}
)

func (x ProblemStatementType) Enum() *ProblemStatementType {
	p := new(ProblemStatementType)
	*p = x
	return p
}

func (x ProblemStatementType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProblemStatementType) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_problem_proto_enumTypes[1].Descriptor()
}

func (ProblemStatementType) Type() protoreflect.EnumType {
	return &file_v1_problem_proto_enumTypes[1]
}

func (x ProblemStatementType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProblemStatementType.Descriptor instead.
func (ProblemStatementType) EnumDescriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{1}
}

type ProblemsetType int32

const (
	ProblemsetType_SIMPLE ProblemsetType = 0
	ProblemsetType_EXAM   ProblemsetType = 1
)

// Enum value maps for ProblemsetType.
var (
	ProblemsetType_name = map[int32]string{
		0: "SIMPLE",
		1: "EXAM",
	}
	ProblemsetType_value = map[string]int32{
		"SIMPLE": 0,
		"EXAM":   1,
	}
)

func (x ProblemsetType) Enum() *ProblemsetType {
	p := new(ProblemsetType)
	*p = x
	return p
}

func (x ProblemsetType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProblemsetType) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_problem_proto_enumTypes[2].Descriptor()
}

func (ProblemsetType) Type() protoreflect.EnumType {
	return &file_v1_problem_proto_enumTypes[2]
}

func (x ProblemsetType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProblemsetType.Descriptor instead.
func (ProblemsetType) EnumDescriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{2}
}

type ProblemsetMembership int32

const (
	ProblemsetMembership_ALLOW_ANYONE    ProblemsetMembership = 0
	ProblemsetMembership_INVITATION_CODE ProblemsetMembership = 1
)

// Enum value maps for ProblemsetMembership.
var (
	ProblemsetMembership_name = map[int32]string{
		0: "ALLOW_ANYONE",
		1: "INVITATION_CODE",
	}
	ProblemsetMembership_value = map[string]int32{
		"ALLOW_ANYONE":    0,
		"INVITATION_CODE": 1,
	}
)

func (x ProblemsetMembership) Enum() *ProblemsetMembership {
	p := new(ProblemsetMembership)
	*p = x
	return p
}

func (x ProblemsetMembership) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProblemsetMembership) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_problem_proto_enumTypes[3].Descriptor()
}

func (ProblemsetMembership) Type() protoreflect.EnumType {
	return &file_v1_problem_proto_enumTypes[3]
}

func (x ProblemsetMembership) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProblemsetMembership.Descriptor instead.
func (ProblemsetMembership) EnumDescriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{3}
}

type ProblemsetRole int32

const (
	ProblemsetRole_GUEST  ProblemsetRole = 0
	ProblemsetRole_PLAYER ProblemsetRole = 1
	ProblemsetRole_ADMIN  ProblemsetRole = 2
)

// Enum value maps for ProblemsetRole.
var (
	ProblemsetRole_name = map[int32]string{
		0: "GUEST",
		1: "PLAYER",
		2: "ADMIN",
	}
	ProblemsetRole_value = map[string]int32{
		"GUEST":  0,
		"PLAYER": 1,
		"ADMIN":  2,
	}
)

func (x ProblemsetRole) Enum() *ProblemsetRole {
	p := new(ProblemsetRole)
	*p = x
	return p
}

func (x ProblemsetRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProblemsetRole) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_problem_proto_enumTypes[4].Descriptor()
}

func (ProblemsetRole) Type() protoreflect.EnumType {
	return &file_v1_problem_proto_enumTypes[4]
}

func (x ProblemsetRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProblemsetRole.Descriptor instead.
func (ProblemsetRole) EnumDescriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{4}
}

type ListProblemsRequest_Author int32

const (
	ListProblemsRequest_ALL    ListProblemsRequest_Author = 0
	ListProblemsRequest_ONLYME ListProblemsRequest_Author = 1
)

// Enum value maps for ListProblemsRequest_Author.
var (
	ListProblemsRequest_Author_name = map[int32]string{
		0: "ALL",
		1: "ONLYME",
	}
	ListProblemsRequest_Author_value = map[string]int32{
		"ALL":    0,
		"ONLYME": 1,
	}
)

func (x ListProblemsRequest_Author) Enum() *ListProblemsRequest_Author {
	p := new(ListProblemsRequest_Author)
	*p = x
	return p
}

func (x ListProblemsRequest_Author) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListProblemsRequest_Author) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_problem_proto_enumTypes[5].Descriptor()
}

func (ListProblemsRequest_Author) Type() protoreflect.EnumType {
	return &file_v1_problem_proto_enumTypes[5]
}

func (x ListProblemsRequest_Author) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListProblemsRequest_Author.Descriptor instead.
func (ListProblemsRequest_Author) EnumDescriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{3, 0}
}

type ProblemsetProblem_Status int32

const (
	ProblemsetProblem_NOT_START ProblemsetProblem_Status = 0
	ProblemsetProblem_ATTEMPTED ProblemsetProblem_Status = 1
	ProblemsetProblem_SOLVED    ProblemsetProblem_Status = 2
)

// Enum value maps for ProblemsetProblem_Status.
var (
	ProblemsetProblem_Status_name = map[int32]string{
		0: "NOT_START",
		1: "ATTEMPTED",
		2: "SOLVED",
	}
	ProblemsetProblem_Status_value = map[string]int32{
		"NOT_START": 0,
		"ATTEMPTED": 1,
		"SOLVED":    2,
	}
)

func (x ProblemsetProblem_Status) Enum() *ProblemsetProblem_Status {
	p := new(ProblemsetProblem_Status)
	*p = x
	return p
}

func (x ProblemsetProblem_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProblemsetProblem_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_problem_proto_enumTypes[6].Descriptor()
}

func (ProblemsetProblem_Status) Type() protoreflect.EnumType {
	return &file_v1_problem_proto_enumTypes[6]
}

func (x ProblemsetProblem_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProblemsetProblem_Status.Descriptor instead.
func (ProblemsetProblem_Status) EnumDescriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{54, 0}
}

type BatchAddProblemToProblemsetPreviewRequest_Method int32

const (
	BatchAddProblemToProblemsetPreviewRequest_EXCEL BatchAddProblemToProblemsetPreviewRequest_Method = 0
)

// Enum value maps for BatchAddProblemToProblemsetPreviewRequest_Method.
var (
	BatchAddProblemToProblemsetPreviewRequest_Method_name = map[int32]string{
		0: "EXCEL",
	}
	BatchAddProblemToProblemsetPreviewRequest_Method_value = map[string]int32{
		"EXCEL": 0,
	}
)

func (x BatchAddProblemToProblemsetPreviewRequest_Method) Enum() *BatchAddProblemToProblemsetPreviewRequest_Method {
	p := new(BatchAddProblemToProblemsetPreviewRequest_Method)
	*p = x
	return p
}

func (x BatchAddProblemToProblemsetPreviewRequest_Method) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BatchAddProblemToProblemsetPreviewRequest_Method) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_problem_proto_enumTypes[7].Descriptor()
}

func (BatchAddProblemToProblemsetPreviewRequest_Method) Type() protoreflect.EnumType {
	return &file_v1_problem_proto_enumTypes[7]
}

func (x BatchAddProblemToProblemsetPreviewRequest_Method) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BatchAddProblemToProblemsetPreviewRequest_Method.Descriptor instead.
func (BatchAddProblemToProblemsetPreviewRequest_Method) EnumDescriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{61, 0}
}

// 样例
type SampleTest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Input  string `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
	Output string `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *SampleTest) Reset() {
	*x = SampleTest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_problem_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SampleTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SampleTest) ProtoMessage() {}

func (x *SampleTest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_problem_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SampleTest.ProtoReflect.Descriptor instead.
func (*SampleTest) Descriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{0}
}

func (x *SampleTest) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

func (x *SampleTest) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

// 题目
type Problem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 题目ID
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 名称
	Name string      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type ProblemType `protobuf:"varint,3,opt,name=type,proto3,enum=jnoj.interface.v1.ProblemType" json:"type,omitempty"`
	// 时间限制
	TimeLimit int32 `protobuf:"varint,4,opt,name=time_limit,json=timeLimit,proto3" json:"time_limit,omitempty"`
	// 内存限制
	MemoryLimit int32 `protobuf:"varint,5,opt,name=memory_limit,json=memoryLimit,proto3" json:"memory_limit,omitempty"`
	// 题目描述
	Statements    []*ProblemStatement `protobuf:"bytes,6,rep,name=statements,proto3" json:"statements,omitempty"`
	AcceptedCount int32               `protobuf:"varint,7,opt,name=accepted_count,json=acceptedCount,proto3" json:"accepted_count,omitempty"`
	SubmitCount   int32               `protobuf:"varint,8,opt,name=submit_count,json=submitCount,proto3" json:"submit_count,omitempty"`
	Status        int32               `protobuf:"varint,9,opt,name=status,proto3" json:"status,omitempty"`
	CheckerId     int32               `protobuf:"varint,10,opt,name=checker_id,json=checkerId,proto3" json:"checker_id,omitempty"`
	// 题目来源
	Source        string                 `protobuf:"bytes,11,opt,name=source,proto3" json:"source,omitempty"`
	Tags          []string               `protobuf:"bytes,12,rep,name=tags,proto3" json:"tags,omitempty"`
	UserId        int32                  `protobuf:"varint,13,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Nickname      string                 `protobuf:"bytes,14,opt,name=nickname,proto3" json:"nickname,omitempty"`
	AllowDownload bool                   `protobuf:"varint,15,opt,name=allow_download,json=allowDownload,proto3" json:"allow_download,omitempty"`
	SampleTests   []*SampleTest          `protobuf:"bytes,16,rep,name=sample_tests,json=sampleTests,proto3" json:"sample_tests,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,19,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *Problem) Reset() {
	*x = Problem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_problem_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Problem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Problem) ProtoMessage() {}

func (x *Problem) ProtoReflect() protoreflect.Message {
	mi := &file_v1_problem_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Problem.ProtoReflect.Descriptor instead.
func (*Problem) Descriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{1}
}

func (x *Problem) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Problem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Problem) GetType() ProblemType {
	if x != nil {
		return x.Type
	}
	return ProblemType_DEFAULT
}

func (x *Problem) GetTimeLimit() int32 {
	if x != nil {
		return x.TimeLimit
	}
	return 0
}

func (x *Problem) GetMemoryLimit() int32 {
	if x != nil {
		return x.MemoryLimit
	}
	return 0
}

func (x *Problem) GetStatements() []*ProblemStatement {
	if x != nil {
		return x.Statements
	}
	return nil
}

func (x *Problem) GetAcceptedCount() int32 {
	if x != nil {
		return x.AcceptedCount
	}
	return 0
}

func (x *Problem) GetSubmitCount() int32 {
	if x != nil {
		return x.SubmitCount
	}
	return 0
}

func (x *Problem) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Problem) GetCheckerId() int32 {
	if x != nil {
		return x.CheckerId
	}
	return 0
}

func (x *Problem) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Problem) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Problem) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Problem) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *Problem) GetAllowDownload() bool {
	if x != nil {
		return x.AllowDownload
	}
	return false
}

func (x *Problem) GetSampleTests() []*SampleTest {
	if x != nil {
		return x.SampleTests
	}
	return nil
}

func (x *Problem) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Problem) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

// 题目描述
type ProblemStatement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ProblemId int32                `protobuf:"varint,2,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	Language  string               `protobuf:"bytes,3,opt,name=language,proto3" json:"language,omitempty"`
	Name      string               `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Legend    string               `protobuf:"bytes,5,opt,name=legend,proto3" json:"legend,omitempty"`
	Input     string               `protobuf:"bytes,6,opt,name=input,proto3" json:"input,omitempty"`
	Output    string               `protobuf:"bytes,7,opt,name=output,proto3" json:"output,omitempty"`
	Note      string               `protobuf:"bytes,8,opt,name=note,proto3" json:"note,omitempty"`
	Type      ProblemStatementType `protobuf:"varint,9,opt,name=type,proto3,enum=jnoj.interface.v1.ProblemStatementType" json:"type,omitempty"`
}

func (x *ProblemStatement) Reset() {
	*x = ProblemStatement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_problem_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProblemStatement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProblemStatement) ProtoMessage() {}

func (x *ProblemStatement) ProtoReflect() protoreflect.Message {
	mi := &file_v1_problem_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProblemStatement.ProtoReflect.Descriptor instead.
func (*ProblemStatement) Descriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{2}
}

func (x *ProblemStatement) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProblemStatement) GetProblemId() int32 {
	if x != nil {
		return x.ProblemId
	}
	return 0
}

func (x *ProblemStatement) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *ProblemStatement) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProblemStatement) GetLegend() string {
	if x != nil {
		return x.Legend
	}
	return ""
}

func (x *ProblemStatement) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

func (x *ProblemStatement) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

func (x *ProblemStatement) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *ProblemStatement) GetType() ProblemStatementType {
	if x != nil {
		return x.Type
	}
	return ProblemStatementType_CODE
}

type ListProblemsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int32                      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Keyword  string                     `protobuf:"bytes,2,opt,name=keyword,proto3" json:"keyword,omitempty"`
	Author   ListProblemsRequest_Author `protobuf:"varint,3,opt,name=author,proto3,enum=jnoj.interface.v1.ListProblemsRequest_Author" json:"author,omitempty"`
	Username string                     `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
	Status   []int32                    `protobuf:"varint,5,rep,packed,name=status,proto3" json:"status,omitempty"`
	Type     []int32                    `protobuf:"varint,6,rep,packed,name=type,proto3" json:"type,omitempty"`
	Filter   string                     `protobuf:"bytes,7,opt,name=filter,proto3" json:"filter,omitempty"`
	OrderBy  *string                    `protobuf:"bytes,8,opt,name=order_by,json=orderBy,proto3,oneof" json:"order_by,omitempty"`
	Page     int32                      `protobuf:"varint,9,opt,name=page,proto3" json:"page,omitempty"`
	PerPage  int32                      `protobuf:"varint,10,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *ListProblemsRequest) Reset() {
	*x = ListProblemsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_problem_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProblemsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProblemsRequest) ProtoMessage() {}

func (x *ListProblemsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_problem_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProblemsRequest.ProtoReflect.Descriptor instead.
func (*ListProblemsRequest) Descriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{3}
}

func (x *ListProblemsRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ListProblemsRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *ListProblemsRequest) GetAuthor() ListProblemsRequest_Author {
	if x != nil {
		return x.Author
	}
	return ListProblemsRequest_ALL
}

func (x *ListProblemsRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ListProblemsRequest) GetStatus() []int32 {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ListProblemsRequest) GetType() []int32 {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *ListProblemsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListProblemsRequest) GetOrderBy() string {
	if x != nil && x.OrderBy != nil {
		return *x.OrderBy
	}
	return ""
}

func (x *ListProblemsRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListProblemsRequest) GetPerPage() int32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

type ListProblemsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data  []*Problem `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`    // 题目列表
	Total int64      `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"` // 总数
}

func (x *ListProblemsResponse) Reset() {
	*x = ListProblemsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_problem_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProblemsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProblemsResponse) ProtoMessage() {}

func (x *ListProblemsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_problem_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProblemsResponse.ProtoReflect.Descriptor instead.
func (*ListProblemsResponse) Descriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{4}
}

func (x *ListProblemsResponse) GetData() []*Problem {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ListProblemsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetProblemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetProblemRequest) Reset() {
	*x = GetProblemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_problem_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProblemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProblemRequest) ProtoMessage() {}

func (x *GetProblemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_problem_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProblemRequest.ProtoReflect.Descriptor instead.
func (*GetProblemRequest) Descriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{5}
}

func (x *GetProblemRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type CreateProblemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 题目名称
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// 题目类型
	Type ProblemType `protobuf:"varint,2,opt,name=type,proto3,enum=jnoj.interface.v1.ProblemType" json:"type,omitempty"`
}

func (x *CreateProblemRequest) Reset() {
	*x = CreateProblemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_problem_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateProblemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProblemRequest) ProtoMessage() {}

func (x *CreateProblemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_problem_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProblemRequest.ProtoReflect.Descriptor instead.
func (*CreateProblemRequest) Descriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{6}
}

func (x *CreateProblemRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateProblemRequest) GetType() ProblemType {
	if x != nil {
		return x.Type
	}
	return ProblemType_DEFAULT
}

type CreateProblemResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 题目ID
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreateProblemResponse) Reset() {
	*x = CreateProblemResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_problem_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateProblemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProblemResponse) ProtoMessage() {}

func (x *CreateProblemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_problem_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProblemResponse.ProtoReflect.Descriptor instead.
func (*CreateProblemResponse) Descriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{7}
}

func (x *CreateProblemResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type UpdateProblemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	TimeLimit   int64    `protobuf:"varint,3,opt,name=time_limit,json=timeLimit,proto3" json:"time_limit,omitempty"`
	MemoryLimit int64    `protobuf:"varint,4,opt,name=memory_limit,json=memoryLimit,proto3" json:"memory_limit,omitempty"`
	Status      int32    `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
	Source      string   `protobuf:"bytes,6,opt,name=source,proto3" json:"source,omitempty"`
	Tags        []string `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *UpdateProblemRequest) Reset() {
	*x = UpdateProblemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_problem_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProblemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProblemRequest) ProtoMessage() {}

func (x *UpdateProblemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_problem_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProblemRequest.ProtoReflect.Descriptor instead.
func (*UpdateProblemRequest) Descriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateProblemRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateProblemRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateProblemRequest) GetTimeLimit() int64 {
	if x != nil {
		return x.TimeLimit
	}
	return 0
}

func (x *UpdateProblemRequest) GetMemoryLimit() int64 {
	if x != nil {
		return x.MemoryLimit
	}
	return 0
}

func (x *UpdateProblemRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UpdateProblemRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *UpdateProblemRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type ListProblemStatementsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Page    int32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	PerPage int32 `protobuf:"varint,3,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *ListProblemStatementsRequest) Reset() {
	*x = ListProblemStatementsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_problem_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProblemStatementsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProblemStatementsRequest) ProtoMessage() {}

func (x *ListProblemStatementsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_problem_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProblemStatementsRequest.ProtoReflect.Descriptor instead.
func (*ListProblemStatementsRequest) Descriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{9}
}

func (x *ListProblemStatementsRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ListProblemStatementsRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListProblemStatementsRequest) GetPerPage() int32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

type ListProblemStatementsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data  []*ProblemStatement `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Total int64               `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *ListProblemStatementsResponse) Reset() {
	*x = ListProblemStatementsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_problem_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProblemStatementsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProblemStatementsResponse) ProtoMessage() {}

func (x *ListProblemStatementsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_problem_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProblemStatementsResponse.ProtoReflect.Descriptor instead.
func (*ListProblemStatementsResponse) Descriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{10}
}

func (x *ListProblemStatementsResponse) GetData() []*ProblemStatement {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ListProblemStatementsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetProblemStatementRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetProblemStatementRequest) Reset() {
	*x = GetProblemStatementRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_problem_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProblemStatementRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProblemStatementRequest) ProtoMessage() {}

func (x *GetProblemStatementRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_problem_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProblemStatementRequest.ProtoReflect.Descriptor instead.
func (*GetProblemStatementRequest) Descriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{11}
}

func (x *GetProblemStatementRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type CreateProblemStatementRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Language string `protobuf:"bytes,2,opt,name=language,proto3" json:"language,omitempty"`
}

func (x *CreateProblemStatementRequest) Reset() {
	*x = CreateProblemStatementRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_problem_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateProblemStatementRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProblemStatementRequest) ProtoMessage() {}

func (x *CreateProblemStatementRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_problem_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProblemStatementRequest.ProtoReflect.Descriptor instead.
func (*CreateProblemStatementRequest) Descriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{12}
}

func (x *CreateProblemStatementRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CreateProblemStatementRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

type UpdateProblemStatementRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int32                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Sid      int32                `protobuf:"varint,2,opt,name=sid,proto3" json:"sid,omitempty"`
	Language string               `protobuf:"bytes,3,opt,name=language,proto3" json:"language,omitempty"`
	Name     string               `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Input    string               `protobuf:"bytes,5,opt,name=input,proto3" json:"input,omitempty"`
	Output   string               `protobuf:"bytes,6,opt,name=output,proto3" json:"output,omitempty"`
	Note     string               `protobuf:"bytes,7,opt,name=note,proto3" json:"note,omitempty"`
	Legend   string               `protobuf:"bytes,8,opt,name=legend,proto3" json:"legend,omitempty"`
	Type     ProblemStatementType `protobuf:"varint,9,opt,name=type,proto3,enum=jnoj.interface.v1.ProblemStatementType" json:"type,omitempty"`
}

func (x *UpdateProblemStatementRequest) Reset() {
	*x = UpdateProblemStatementRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_problem_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProblemStatementRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProblemStatementRequest) ProtoMessage() {}

func (x *UpdateProblemStatementRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_problem_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProblemStatementRequest.ProtoReflect.Descriptor instead.
func (*UpdateProblemStatementRequest) Descriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateProblemStatementRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateProblemStatementRequest) GetSid() int32 {
	if x != nil {
		return x.Sid
	}
	return 0
}

func (x *UpdateProblemStatementRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *UpdateProblemStatementRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateProblemStatementRequest) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

func (x *UpdateProblemStatementRequest) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

func (x *UpdateProblemStatementRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *UpdateProblemStatementRequest) GetLegend() string {
	if x != nil {
		return x.Legend
	}
	return ""
}

func (x *UpdateProblemStatementRequest) GetType() ProblemStatementType {
	if x != nil {
		return x.Type
	}
	return ProblemStatementType_CODE
}

type DeleteProblemStatementRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Sid int32 `protobuf:"varint,2,opt,name=sid,proto3" json:"sid,omitempty"`
}

func (x *DeleteProblemStatementRequest) Reset() {
	*x = DeleteProblemStatementRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_problem_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteProblemStatementRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProblemStatementRequest) ProtoMessage() {}

func (x *DeleteProblemStatementRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_problem_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProblemStatementRequest.ProtoReflect.Descriptor instead.
func (*DeleteProblemStatementRequest) Descriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{14}
}

func (x *DeleteProblemStatementRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeleteProblemStatementRequest) GetSid() int32 {
	if x != nil {
		return x.Sid
	}
	return 0
}

type ListProblemTestsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Page    int32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	PerPage int32 `protobuf:"varint,3,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *ListProblemTestsRequest) Reset() {
	*x = ListProblemTestsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_problem_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProblemTestsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProblemTestsRequest) ProtoMessage() {}

func (x *ListProblemTestsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_problem_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProblemTestsRequest.ProtoReflect.Descriptor instead.
func (*ListProblemTestsRequest) Descriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{15}
}

func (x *ListProblemTestsRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ListProblemTestsRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListProblemTestsRequest) GetPerPage() int32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

type ListProblemTestsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data          []*ProblemTest `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Total         int64          `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	IsSampleFirst bool           `protobuf:"varint,3,opt,name=is_sample_first,json=isSampleFirst,proto3" json:"is_sample_first,omitempty"`
}

func (x *ListProblemTestsResponse) Reset() {
	*x = ListProblemTestsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_problem_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProblemTestsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProblemTestsResponse) ProtoMessage() {}

func (x *ListProblemTestsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_problem_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProblemTestsResponse.ProtoReflect.Descriptor instead.
func (*ListProblemTestsResponse) Descriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{16}
}

func (x *ListProblemTestsResponse) GetData() []*ProblemTest {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ListProblemTestsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListProblemTestsResponse) GetIsSampleFirst() bool {
	if x != nil {
		return x.IsSampleFirst
	}
	return false
}

type GetProblemTestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetProblemTestRequest) Reset() {
	*x = GetProblemTestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_problem_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProblemTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProblemTestRequest) ProtoMessage() {}

func (x *GetProblemTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_problem_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProblemTestRequest.ProtoReflect.Descriptor instead.
func (*GetProblemTestRequest) Descriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{17}
}

func (x *GetProblemTestRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ProblemTest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Order             int32                  `protobuf:"varint,2,opt,name=order,proto3" json:"order,omitempty"`
	ProblemId         int32                  `protobuf:"varint,3,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	IsExample         bool                   `protobuf:"varint,4,opt,name=is_example,json=isExample,proto3" json:"is_example,omitempty"`
	IsTestPoint       bool                   `protobuf:"varint,5,opt,name=is_test_point,json=isTestPoint,proto3" json:"is_test_point,omitempty"`
	Name              string                 `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	InputSize         int64                  `protobuf:"varint,7,opt,name=input_size,json=inputSize,proto3" json:"input_size,omitempty"`
	InputPreview      string                 `protobuf:"bytes,8,opt,name=input_preview,json=inputPreview,proto3" json:"input_preview,omitempty"`
	InputFileContent  []byte                 `protobuf:"bytes,9,opt,name=input_file_content,json=inputFileContent,proto3" json:"input_file_content,omitempty"`
	OutputSize        int64                  `protobuf:"varint,10,opt,name=output_size,json=outputSize,proto3" json:"output_size,omitempty"`
	OutputPreview     string                 `protobuf:"bytes,11,opt,name=output_preview,json=outputPreview,proto3" json:"output_preview,omitempty"`
	OutputFileContent []byte                 `protobuf:"bytes,12,opt,name=output_file_content,json=outputFileContent,proto3" json:"output_file_content,omitempty"`
	Remark            string                 `protobuf:"bytes,13,opt,name=remark,proto3" json:"remark,omitempty"`
	CreatedAt         *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt         *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *ProblemTest) Reset() {
	*x = ProblemTest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_problem_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProblemTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProblemTest) ProtoMessage() {}

func (x *ProblemTest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_problem_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProblemTest.ProtoReflect.Descriptor instead.
func (*ProblemTest) Descriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{18}
}

func (x *ProblemTest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProblemTest) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *ProblemTest) GetProblemId() int32 {
	if x != nil {
		return x.ProblemId
	}
	return 0
}

func (x *ProblemTest) GetIsExample() bool {
	if x != nil {
		return x.IsExample
	}
	return false
}

func (x *ProblemTest) GetIsTestPoint() bool {
	if x != nil {
		return x.IsTestPoint
	}
	return false
}

func (x *ProblemTest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProblemTest) GetInputSize() int64 {
	if x != nil {
		return x.InputSize
	}
	return 0
}

func (x *ProblemTest) GetInputPreview() string {
	if x != nil {
		return x.InputPreview
	}
	return ""
}

func (x *ProblemTest) GetInputFileContent() []byte {
	if x != nil {
		return x.InputFileContent
	}
	return nil
}

func (x *ProblemTest) GetOutputSize() int64 {
	if x != nil {
		return x.OutputSize
	}
	return 0
}

func (x *ProblemTest) GetOutputPreview() string {
	if x != nil {
		return x.OutputPreview
	}
	return ""
}

func (x *ProblemTest) GetOutputFileContent() []byte {
	if x != nil {
		return x.OutputFileContent
	}
	return nil
}

func (x *ProblemTest) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *ProblemTest) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ProblemTest) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type CreateProblemTestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	FileContent []byte `protobuf:"bytes,2,opt,name=file_content,json=fileContent,proto3" json:"file_content,omitempty"`
	Filename    string `protobuf:"bytes,3,opt,name=filename,proto3" json:"filename,omitempty"`
}

func (x *CreateProblemTestRequest) Reset() {
	*x = CreateProblemTestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_problem_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateProblemTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProblemTestRequest) ProtoMessage() {}

func (x *CreateProblemTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_problem_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProblemTestRequest.ProtoReflect.Descriptor instead.
func (*CreateProblemTestRequest) Descriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{19}
}

func (x *CreateProblemTestRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CreateProblemTestRequest) GetFileContent() []byte {
	if x != nil {
		return x.FileContent
	}
	return nil
}

func (x *CreateProblemTestRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

type UpdateProblemTestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Tid         int32  `protobuf:"varint,2,opt,name=tid,proto3" json:"tid,omitempty"`
	IsExample   bool   `protobuf:"varint,3,opt,name=is_example,json=isExample,proto3" json:"is_example,omitempty"`
	IsTestPoint bool   `protobuf:"varint,4,opt,name=is_test_point,json=isTestPoint,proto3" json:"is_test_point,omitempty"`
	Remark      string `protobuf:"bytes,5,opt,name=remark,proto3" json:"remark,omitempty"`
}

func (x *UpdateProblemTestRequest) Reset() {
	*x = UpdateProblemTestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_problem_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProblemTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProblemTestRequest) ProtoMessage() {}

func (x *UpdateProblemTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_problem_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProblemTestRequest.ProtoReflect.Descriptor instead.
func (*UpdateProblemTestRequest) Descriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{20}
}

func (x *UpdateProblemTestRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateProblemTestRequest) GetTid() int32 {
	if x != nil {
		return x.Tid
	}
	return 0
}

func (x *UpdateProblemTestRequest) GetIsExample() bool {
	if x != nil {
		return x.IsExample
	}
	return false
}

func (x *UpdateProblemTestRequest) GetIsTestPoint() bool {
	if x != nil {
		return x.IsTestPoint
	}
	return false
}

func (x *UpdateProblemTestRequest) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

type DeleteProblemTestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TestIds []int32 `protobuf:"varint,2,rep,packed,name=test_ids,json=testIds,proto3" json:"test_ids,omitempty"`
}

func (x *DeleteProblemTestRequest) Reset() {
	*x = DeleteProblemTestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_problem_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteProblemTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProblemTestRequest) ProtoMessage() {}

func (x *DeleteProblemTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_problem_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProblemTestRequest.ProtoReflect.Descriptor instead.
func (*DeleteProblemTestRequest) Descriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteProblemTestRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeleteProblemTestRequest) GetTestIds() []int32 {
	if x != nil {
		return x.TestIds
	}
	return nil
}

type SortProblemTestsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	SetSampleFirst *bool   `protobuf:"varint,2,opt,name=set_sample_first,json=setSampleFirst,proto3,oneof" json:"set_sample_first,omitempty"`
	SortByName     *bool   `protobuf:"varint,3,opt,name=sort_by_name,json=sortByName,proto3,oneof" json:"sort_by_name,omitempty"`
	Ids            []int32 `protobuf:"varint,4,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *SortProblemTestsRequest) Reset() {
	*x = SortProblemTestsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_problem_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SortProblemTestsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortProblemTestsRequest) ProtoMessage() {}

func (x *SortProblemTestsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_problem_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortProblemTestsRequest.ProtoReflect.Descriptor instead.
func (*SortProblemTestsRequest) Descriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{22}
}

func (x *SortProblemTestsRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SortProblemTestsRequest) GetSetSampleFirst() bool {
	if x != nil && x.SetSampleFirst != nil {
		return *x.SetSampleFirst
	}
	return false
}

func (x *SortProblemTestsRequest) GetSortByName() bool {
	if x != nil && x.SortByName != nil {
		return *x.SortByName
	}
	return false
}

func (x *SortProblemTestsRequest) GetIds() []int32 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type ListProblemFilesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	FileType string `protobuf:"bytes,2,opt,name=file_type,json=fileType,proto3" json:"file_type,omitempty"`
	Type     string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Name     string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Page     int32  `protobuf:"varint,5,opt,name=page,proto3" json:"page,omitempty"`
	PerPage  int32  `protobuf:"varint,6,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *ListProblemFilesRequest) Reset() {
	*x = ListProblemFilesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_problem_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProblemFilesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProblemFilesRequest) ProtoMessage() {}

func (x *ListProblemFilesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_problem_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProblemFilesRequest.ProtoReflect.Descriptor instead.
func (*ListProblemFilesRequest) Descriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{23}
}

func (x *ListProblemFilesRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ListProblemFilesRequest) GetFileType() string {
	if x != nil {
		return x.FileType
	}
	return ""
}

func (x *ListProblemFilesRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ListProblemFilesRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListProblemFilesRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListProblemFilesRequest) GetPerPage() int32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

type ListProblemFilesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data  []*ProblemFile `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Total int64          `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *ListProblemFilesResponse) Reset() {
	*x = ListProblemFilesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_problem_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProblemFilesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProblemFilesResponse) ProtoMessage() {}

func (x *ListProblemFilesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_problem_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProblemFilesResponse.ProtoReflect.Descriptor instead.
func (*ListProblemFilesResponse) Descriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{24}
}

func (x *ListProblemFilesResponse) GetData() []*ProblemFile {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ListProblemFilesResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetProblemFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Sid int32 `protobuf:"varint,2,opt,name=sid,proto3" json:"sid,omitempty"`
}

func (x *GetProblemFileRequest) Reset() {
	*x = GetProblemFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_problem_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProblemFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProblemFileRequest) ProtoMessage() {}

func (x *GetProblemFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_problem_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProblemFileRequest.ProtoReflect.Descriptor instead.
func (*GetProblemFileRequest) Descriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{25}
}

func (x *GetProblemFileRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetProblemFileRequest) GetSid() int32 {
	if x != nil {
		return x.Sid
	}
	return 0
}

type ProblemFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Language  int32                  `protobuf:"varint,3,opt,name=language,proto3" json:"language,omitempty"`
	Content   string                 `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	Type      string                 `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	UserId    int32                  `protobuf:"varint,6,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	FileType  string                 `protobuf:"bytes,7,opt,name=file_type,json=fileType,proto3" json:"file_type,omitempty"`
	FileSize  int64                  `protobuf:"varint,8,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *ProblemFile) Reset() {
	*x = ProblemFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_problem_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProblemFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProblemFile) ProtoMessage() {}

func (x *ProblemFile) ProtoReflect() protoreflect.Message {
	mi := &file_v1_problem_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProblemFile.ProtoReflect.Descriptor instead.
func (*ProblemFile) Descriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{26}
}

func (x *ProblemFile) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProblemFile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProblemFile) GetLanguage() int32 {
	if x != nil {
		return x.Language
	}
	return 0
}

func (x *ProblemFile) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *ProblemFile) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ProblemFile) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ProblemFile) GetFileType() string {
	if x != nil {
		return x.FileType
	}
	return ""
}

func (x *ProblemFile) GetFileSize() int64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *ProblemFile) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ProblemFile) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type CreateProblemFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Language    int32  `protobuf:"varint,3,opt,name=language,proto3" json:"language,omitempty"`
	Content     string `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	Type        string `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	FileType    string `protobuf:"bytes,6,opt,name=file_type,json=fileType,proto3" json:"file_type,omitempty"`
	Filename    string `protobuf:"bytes,7,opt,name=filename,proto3" json:"filename,omitempty"`
	FileContent []byte `protobuf:"bytes,8,opt,name=file_content,json=fileContent,proto3" json:"file_content,omitempty"`
}

func (x *CreateProblemFileRequest) Reset() {
	*x = CreateProblemFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_problem_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateProblemFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProblemFileRequest) ProtoMessage() {}

func (x *CreateProblemFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_problem_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProblemFileRequest.ProtoReflect.Descriptor instead.
func (*CreateProblemFileRequest) Descriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{27}
}

func (x *CreateProblemFileRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CreateProblemFileRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateProblemFileRequest) GetLanguage() int32 {
	if x != nil {
		return x.Language
	}
	return 0
}

func (x *CreateProblemFileRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *CreateProblemFileRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CreateProblemFileRequest) GetFileType() string {
	if x != nil {
		return x.FileType
	}
	return ""
}

func (x *CreateProblemFileRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *CreateProblemFileRequest) GetFileContent() []byte {
	if x != nil {
		return x.FileContent
	}
	return nil
}

type UpdateProblemFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Sid     int32  `protobuf:"varint,2,opt,name=sid,proto3" json:"sid,omitempty"`
	Name    string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Content string `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	Type    string `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *UpdateProblemFileRequest) Reset() {
	*x = UpdateProblemFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_problem_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProblemFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProblemFileRequest) ProtoMessage() {}

func (x *UpdateProblemFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_problem_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProblemFileRequest.ProtoReflect.Descriptor instead.
func (*UpdateProblemFileRequest) Descriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{28}
}

func (x *UpdateProblemFileRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateProblemFileRequest) GetSid() int32 {
	if x != nil {
		return x.Sid
	}
	return 0
}

func (x *UpdateProblemFileRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateProblemFileRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *UpdateProblemFileRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type DeleteProblemFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Sid int32 `protobuf:"varint,2,opt,name=sid,proto3" json:"sid,omitempty"`
}

func (x *DeleteProblemFileRequest) Reset() {
	*x = DeleteProblemFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_problem_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteProblemFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProblemFileRequest) ProtoMessage() {}

func (x *DeleteProblemFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_problem_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProblemFileRequest.ProtoReflect.Descriptor instead.
func (*DeleteProblemFileRequest) Descriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{29}
}

func (x *DeleteProblemFileRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeleteProblemFileRequest) GetSid() int32 {
	if x != nil {
		return x.Sid
	}
	return 0
}

type RunProblemFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sid int32 `protobuf:"varint,1,opt,name=sid,proto3" json:"sid,omitempty"`
}

func (x *RunProblemFileRequest) Reset() {
	*x = RunProblemFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_problem_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunProblemFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunProblemFileRequest) ProtoMessage() {}

func (x *RunProblemFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_problem_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunProblemFileRequest.ProtoReflect.Descriptor instead.
func (*RunProblemFileRequest) Descriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{30}
}

func (x *RunProblemFileRequest) GetSid() int32 {
	if x != nil {
		return x.Sid
	}
	return 0
}

type ListProblemStdCheckersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ListProblemStdCheckersRequest) Reset() {
	*x = ListProblemStdCheckersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_problem_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProblemStdCheckersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProblemStdCheckersRequest) ProtoMessage() {}

func (x *ListProblemStdCheckersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_problem_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProblemStdCheckersRequest.ProtoReflect.Descriptor instead.
func (*ListProblemStdCheckersRequest) Descriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{31}
}

func (x *ListProblemStdCheckersRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ListProblemStdCheckersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*ProblemFile `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ListProblemStdCheckersResponse) Reset() {
	*x = ListProblemStdCheckersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_problem_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProblemStdCheckersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProblemStdCheckersResponse) ProtoMessage() {}

func (x *ListProblemStdCheckersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_problem_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProblemStdCheckersResponse.ProtoReflect.Descriptor instead.
func (*ListProblemStdCheckersResponse) Descriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{32}
}

func (x *ListProblemStdCheckersResponse) GetData() []*ProblemFile {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdateProblemCheckerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CheckerId int32 `protobuf:"varint,2,opt,name=checker_id,json=checkerId,proto3" json:"checker_id,omitempty"`
}

func (x *UpdateProblemCheckerRequest) Reset() {
	*x = UpdateProblemCheckerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_problem_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProblemCheckerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProblemCheckerRequest) ProtoMessage() {}

func (x *UpdateProblemCheckerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_problem_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProblemCheckerRequest.ProtoReflect.Descriptor instead.
func (*UpdateProblemCheckerRequest) Descriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{33}
}

func (x *UpdateProblemCheckerRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateProblemCheckerRequest) GetCheckerId() int32 {
	if x != nil {
		return x.CheckerId
	}
	return 0
}

type VerifyProblemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *VerifyProblemRequest) Reset() {
	*x = VerifyProblemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_problem_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyProblemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyProblemRequest) ProtoMessage() {}

func (x *VerifyProblemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_problem_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyProblemRequest.ProtoReflect.Descriptor instead.
func (*VerifyProblemRequest) Descriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{34}
}

func (x *VerifyProblemRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type PackProblemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *PackProblemRequest) Reset() {
	*x = PackProblemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_problem_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackProblemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackProblemRequest) ProtoMessage() {}

func (x *PackProblemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_problem_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackProblemRequest.ProtoReflect.Descriptor instead.
func (*PackProblemRequest) Descriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{35}
}

func (x *PackProblemRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetProblemVerificationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetProblemVerificationRequest) Reset() {
	*x = GetProblemVerificationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_problem_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProblemVerificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProblemVerificationRequest) ProtoMessage() {}

func (x *GetProblemVerificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_problem_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProblemVerificationRequest.ProtoReflect.Descriptor instead.
func (*GetProblemVerificationRequest) Descriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{36}
}

func (x *GetProblemVerificationRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ProblemVerification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 int32                                    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ProblemId          int32                                    `protobuf:"varint,2,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	VerificationStatus int32                                    `protobuf:"varint,3,opt,name=verification_status,json=verificationStatus,proto3" json:"verification_status,omitempty"`
	VerificaitonInfo   []*ProblemVerification_VerificaitionInfo `protobuf:"bytes,4,rep,name=verificaiton_info,json=verificaitonInfo,proto3" json:"verificaiton_info,omitempty"`
}

func (x *ProblemVerification) Reset() {
	*x = ProblemVerification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_problem_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProblemVerification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProblemVerification) ProtoMessage() {}

func (x *ProblemVerification) ProtoReflect() protoreflect.Message {
	mi := &file_v1_problem_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProblemVerification.ProtoReflect.Descriptor instead.
func (*ProblemVerification) Descriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{37}
}

func (x *ProblemVerification) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProblemVerification) GetProblemId() int32 {
	if x != nil {
		return x.ProblemId
	}
	return 0
}

func (x *ProblemVerification) GetVerificationStatus() int32 {
	if x != nil {
		return x.VerificationStatus
	}
	return 0
}

func (x *ProblemVerification) GetVerificaitonInfo() []*ProblemVerification_VerificaitionInfo {
	if x != nil {
		return x.VerificaitonInfo
	}
	return nil
}

type Problemset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name           string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type           ProblemsetType         `protobuf:"varint,3,opt,name=type,proto3,enum=jnoj.interface.v1.ProblemsetType" json:"type,omitempty"`
	User           *Problemset_User       `protobuf:"bytes,4,opt,name=user,proto3" json:"user,omitempty"`
	Description    string                 `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Membership     ProblemsetMembership   `protobuf:"varint,6,opt,name=membership,proto3,enum=jnoj.interface.v1.ProblemsetMembership" json:"membership,omitempty"`
	InvitationCode string                 `protobuf:"bytes,7,opt,name=invitation_code,json=invitationCode,proto3" json:"invitation_code,omitempty"`
	ProblemCount   int32                  `protobuf:"varint,8,opt,name=problem_count,json=problemCount,proto3" json:"problem_count,omitempty"`
	MemberCount    int32                  `protobuf:"varint,9,opt,name=member_count,json=memberCount,proto3" json:"member_count,omitempty"`
	Role           ProblemsetRole         `protobuf:"varint,10,opt,name=role,proto3,enum=jnoj.interface.v1.ProblemsetRole" json:"role,omitempty"`
	Problems       []*ProblemsetProblem   `protobuf:"bytes,11,rep,name=problems,proto3" json:"problems,omitempty"`
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt      *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Parent         *Problemset            `protobuf:"bytes,14,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (x *Problemset) Reset() {
	*x = Problemset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_problem_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Problemset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Problemset) ProtoMessage() {}

func (x *Problemset) ProtoReflect() protoreflect.Message {
	mi := &file_v1_problem_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Problemset.ProtoReflect.Descriptor instead.
func (*Problemset) Descriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{38}
}

func (x *Problemset) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Problemset) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Problemset) GetType() ProblemsetType {
	if x != nil {
		return x.Type
	}
	return ProblemsetType_SIMPLE
}

func (x *Problemset) GetUser() *Problemset_User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Problemset) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Problemset) GetMembership() ProblemsetMembership {
	if x != nil {
		return x.Membership
	}
	return ProblemsetMembership_ALLOW_ANYONE
}

func (x *Problemset) GetInvitationCode() string {
	if x != nil {
		return x.InvitationCode
	}
	return ""
}

func (x *Problemset) GetProblemCount() int32 {
	if x != nil {
		return x.ProblemCount
	}
	return 0
}

func (x *Problemset) GetMemberCount() int32 {
	if x != nil {
		return x.MemberCount
	}
	return 0
}

func (x *Problemset) GetRole() ProblemsetRole {
	if x != nil {
		return x.Role
	}
	return ProblemsetRole_GUEST
}

func (x *Problemset) GetProblems() []*ProblemsetProblem {
	if x != nil {
		return x.Problems
	}
	return nil
}

func (x *Problemset) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Problemset) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Problemset) GetParent() *Problemset {
	if x != nil {
		return x.Parent
	}
	return nil
}

type ListProblemsetsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string                `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type       []ProblemsetType      `protobuf:"varint,2,rep,packed,name=type,proto3,enum=jnoj.interface.v1.ProblemsetType" json:"type,omitempty"`
	ParentId   *int32                `protobuf:"varint,3,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	Membership *ProblemsetMembership `protobuf:"varint,4,opt,name=membership,proto3,enum=jnoj.interface.v1.ProblemsetMembership,oneof" json:"membership,omitempty"`
	My         *bool                 `protobuf:"varint,5,opt,name=my,proto3,oneof" json:"my,omitempty"`
	Page       int32                 `protobuf:"varint,6,opt,name=page,proto3" json:"page,omitempty"`
	PerPage    int32                 `protobuf:"varint,7,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *ListProblemsetsRequest) Reset() {
	*x = ListProblemsetsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_problem_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProblemsetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProblemsetsRequest) ProtoMessage() {}

func (x *ListProblemsetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_problem_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProblemsetsRequest.ProtoReflect.Descriptor instead.
func (*ListProblemsetsRequest) Descriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{39}
}

func (x *ListProblemsetsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListProblemsetsRequest) GetType() []ProblemsetType {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *ListProblemsetsRequest) GetParentId() int32 {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return 0
}

func (x *ListProblemsetsRequest) GetMembership() ProblemsetMembership {
	if x != nil && x.Membership != nil {
		return *x.Membership
	}
	return ProblemsetMembership_ALLOW_ANYONE
}

func (x *ListProblemsetsRequest) GetMy() bool {
	if x != nil && x.My != nil {
		return *x.My
	}
	return false
}

func (x *ListProblemsetsRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListProblemsetsRequest) GetPerPage() int32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

type ListProblemsetsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data  []*Problemset `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Total int64         `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *ListProblemsetsResponse) Reset() {
	*x = ListProblemsetsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_problem_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProblemsetsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProblemsetsResponse) ProtoMessage() {}

func (x *ListProblemsetsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_problem_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProblemsetsResponse.ProtoReflect.Descriptor instead.
func (*ListProblemsetsResponse) Descriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{40}
}

func (x *ListProblemsetsResponse) GetData() []*Problemset {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ListProblemsetsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetProblemsetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetProblemsetRequest) Reset() {
	*x = GetProblemsetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_problem_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProblemsetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProblemsetRequest) ProtoMessage() {}

func (x *GetProblemsetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_problem_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProblemsetRequest.ProtoReflect.Descriptor instead.
func (*GetProblemsetRequest) Descriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{41}
}

func (x *GetProblemsetRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type CreateProblemsetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string         `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Type        ProblemsetType `protobuf:"varint,3,opt,name=type,proto3,enum=jnoj.interface.v1.ProblemsetType" json:"type,omitempty"`
}

func (x *CreateProblemsetRequest) Reset() {
	*x = CreateProblemsetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_problem_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateProblemsetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProblemsetRequest) ProtoMessage() {}

func (x *CreateProblemsetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_problem_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProblemsetRequest.ProtoReflect.Descriptor instead.
func (*CreateProblemsetRequest) Descriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{42}
}

func (x *CreateProblemsetRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateProblemsetRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateProblemsetRequest) GetType() ProblemsetType {
	if x != nil {
		return x.Type
	}
	return ProblemsetType_SIMPLE
}

type DeleteProblemsetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteProblemsetRequest) Reset() {
	*x = DeleteProblemsetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_problem_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteProblemsetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProblemsetRequest) ProtoMessage() {}

func (x *DeleteProblemsetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_problem_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProblemsetRequest.ProtoReflect.Descriptor instead.
func (*DeleteProblemsetRequest) Descriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{43}
}

func (x *DeleteProblemsetRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type UpdateProblemsetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int32                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name           string               `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description    string               `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Membership     ProblemsetMembership `protobuf:"varint,4,opt,name=membership,proto3,enum=jnoj.interface.v1.ProblemsetMembership" json:"membership,omitempty"`
	InvitationCode string               `protobuf:"bytes,5,opt,name=invitation_code,json=invitationCode,proto3" json:"invitation_code,omitempty"`
}

func (x *UpdateProblemsetRequest) Reset() {
	*x = UpdateProblemsetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_problem_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProblemsetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProblemsetRequest) ProtoMessage() {}

func (x *UpdateProblemsetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_problem_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProblemsetRequest.ProtoReflect.Descriptor instead.
func (*UpdateProblemsetRequest) Descriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{44}
}

func (x *UpdateProblemsetRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateProblemsetRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateProblemsetRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateProblemsetRequest) GetMembership() ProblemsetMembership {
	if x != nil {
		return x.Membership
	}
	return ProblemsetMembership_ALLOW_ANYONE
}

func (x *UpdateProblemsetRequest) GetInvitationCode() string {
	if x != nil {
		return x.InvitationCode
	}
	return ""
}

type CreateProblemsetChildRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ChildId int32 `protobuf:"varint,2,opt,name=child_id,json=childId,proto3" json:"child_id,omitempty"`
}

func (x *CreateProblemsetChildRequest) Reset() {
	*x = CreateProblemsetChildRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_problem_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateProblemsetChildRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProblemsetChildRequest) ProtoMessage() {}

func (x *CreateProblemsetChildRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_problem_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProblemsetChildRequest.ProtoReflect.Descriptor instead.
func (*CreateProblemsetChildRequest) Descriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{45}
}

func (x *CreateProblemsetChildRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CreateProblemsetChildRequest) GetChildId() int32 {
	if x != nil {
		return x.ChildId
	}
	return 0
}

type DeleteProblemsetChildRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ChildId int32 `protobuf:"varint,2,opt,name=child_id,json=childId,proto3" json:"child_id,omitempty"`
}

func (x *DeleteProblemsetChildRequest) Reset() {
	*x = DeleteProblemsetChildRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_problem_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteProblemsetChildRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProblemsetChildRequest) ProtoMessage() {}

func (x *DeleteProblemsetChildRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_problem_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProblemsetChildRequest.ProtoReflect.Descriptor instead.
func (*DeleteProblemsetChildRequest) Descriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{46}
}

func (x *DeleteProblemsetChildRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeleteProblemsetChildRequest) GetChildId() int32 {
	if x != nil {
		return x.ChildId
	}
	return 0
}

type SortProblemsetChildRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  int32                               `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Ids []*SortProblemsetChildRequest_Child `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *SortProblemsetChildRequest) Reset() {
	*x = SortProblemsetChildRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_problem_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SortProblemsetChildRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortProblemsetChildRequest) ProtoMessage() {}

func (x *SortProblemsetChildRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_problem_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortProblemsetChildRequest.ProtoReflect.Descriptor instead.
func (*SortProblemsetChildRequest) Descriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{47}
}

func (x *SortProblemsetChildRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SortProblemsetChildRequest) GetIds() []*SortProblemsetChildRequest_Child {
	if x != nil {
		return x.Ids
	}
	return nil
}

type ProblemsetUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AcceptedCount int32 `protobuf:"varint,2,opt,name=accepted_count,json=acceptedCount,proto3" json:"accepted_count,omitempty"`
	// 试卷模式：首次分数
	InitialScore float32 `protobuf:"fixed32,3,opt,name=initial_score,json=initialScore,proto3" json:"initial_score,omitempty"`
	// 试卷模式：最好分数
	BestScore float32                `protobuf:"fixed32,4,opt,name=best_score,json=bestScore,proto3" json:"best_score,omitempty"`
	User      *User                  `protobuf:"bytes,5,opt,name=user,proto3" json:"user,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *ProblemsetUser) Reset() {
	*x = ProblemsetUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_problem_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProblemsetUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProblemsetUser) ProtoMessage() {}

func (x *ProblemsetUser) ProtoReflect() protoreflect.Message {
	mi := &file_v1_problem_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProblemsetUser.ProtoReflect.Descriptor instead.
func (*ProblemsetUser) Descriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{48}
}

func (x *ProblemsetUser) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProblemsetUser) GetAcceptedCount() int32 {
	if x != nil {
		return x.AcceptedCount
	}
	return 0
}

func (x *ProblemsetUser) GetInitialScore() float32 {
	if x != nil {
		return x.InitialScore
	}
	return 0
}

func (x *ProblemsetUser) GetBestScore() float32 {
	if x != nil {
		return x.BestScore
	}
	return 0
}

func (x *ProblemsetUser) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *ProblemsetUser) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type ListProblemsetUsersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Username string  `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	OrderBy  *string `protobuf:"bytes,3,opt,name=order_by,json=orderBy,proto3,oneof" json:"order_by,omitempty"`
	Page     int32   `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
	PerPage  int32   `protobuf:"varint,5,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *ListProblemsetUsersRequest) Reset() {
	*x = ListProblemsetUsersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_problem_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProblemsetUsersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProblemsetUsersRequest) ProtoMessage() {}

func (x *ListProblemsetUsersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_problem_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProblemsetUsersRequest.ProtoReflect.Descriptor instead.
func (*ListProblemsetUsersRequest) Descriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{49}
}

func (x *ListProblemsetUsersRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ListProblemsetUsersRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ListProblemsetUsersRequest) GetOrderBy() string {
	if x != nil && x.OrderBy != nil {
		return *x.OrderBy
	}
	return ""
}

func (x *ListProblemsetUsersRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListProblemsetUsersRequest) GetPerPage() int32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

type ListProblemsetUsersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data  []*ProblemsetUser `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Total int32             `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *ListProblemsetUsersResponse) Reset() {
	*x = ListProblemsetUsersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_problem_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProblemsetUsersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProblemsetUsersResponse) ProtoMessage() {}

func (x *ListProblemsetUsersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_problem_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProblemsetUsersResponse.ProtoReflect.Descriptor instead.
func (*ListProblemsetUsersResponse) Descriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{50}
}

func (x *ListProblemsetUsersResponse) GetData() []*ProblemsetUser {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ListProblemsetUsersResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type CreateProblemsetUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Username       string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	InvitationCode string `protobuf:"bytes,3,opt,name=invitation_code,json=invitationCode,proto3" json:"invitation_code,omitempty"`
}

func (x *CreateProblemsetUserRequest) Reset() {
	*x = CreateProblemsetUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_problem_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateProblemsetUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProblemsetUserRequest) ProtoMessage() {}

func (x *CreateProblemsetUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_problem_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProblemsetUserRequest.ProtoReflect.Descriptor instead.
func (*CreateProblemsetUserRequest) Descriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{51}
}

func (x *CreateProblemsetUserRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CreateProblemsetUserRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *CreateProblemsetUserRequest) GetInvitationCode() string {
	if x != nil {
		return x.InvitationCode
	}
	return ""
}

type DeleteProblemsetUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId int32 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *DeleteProblemsetUserRequest) Reset() {
	*x = DeleteProblemsetUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_problem_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteProblemsetUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProblemsetUserRequest) ProtoMessage() {}

func (x *DeleteProblemsetUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_problem_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProblemsetUserRequest.ProtoReflect.Descriptor instead.
func (*DeleteProblemsetUserRequest) Descriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{52}
}

func (x *DeleteProblemsetUserRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeleteProblemsetUserRequest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type ListProblemsetProblemsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Keyword string `protobuf:"bytes,2,opt,name=keyword,proto3" json:"keyword,omitempty"`
	Page    int32  `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	PerPage int32  `protobuf:"varint,4,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *ListProblemsetProblemsRequest) Reset() {
	*x = ListProblemsetProblemsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_problem_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProblemsetProblemsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProblemsetProblemsRequest) ProtoMessage() {}

func (x *ListProblemsetProblemsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_problem_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProblemsetProblemsRequest.ProtoReflect.Descriptor instead.
func (*ListProblemsetProblemsRequest) Descriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{53}
}

func (x *ListProblemsetProblemsRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ListProblemsetProblemsRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *ListProblemsetProblemsRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListProblemsetProblemsRequest) GetPerPage() int32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

type ProblemsetProblem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 题目ID
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 次序
	Order int32 `protobuf:"varint,3,opt,name=order,proto3" json:"order,omitempty"`
	// 时间限制
	TimeLimit int32 `protobuf:"varint,4,opt,name=time_limit,json=timeLimit,proto3" json:"time_limit,omitempty"`
	// 内存限制
	MemoryLimit   int32 `protobuf:"varint,5,opt,name=memory_limit,json=memoryLimit,proto3" json:"memory_limit,omitempty"`
	AcceptedCount int32 `protobuf:"varint,6,opt,name=accepted_count,json=acceptedCount,proto3" json:"accepted_count,omitempty"`
	SubmitCount   int32 `protobuf:"varint,7,opt,name=submit_count,json=submitCount,proto3" json:"submit_count,omitempty"`
	ProblemsetId  int32 `protobuf:"varint,8,opt,name=problemset_id,json=problemsetId,proto3" json:"problemset_id,omitempty"`
	ProblemId     int32 `protobuf:"varint,9,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	// 题目来源
	Source string                   `protobuf:"bytes,10,opt,name=source,proto3" json:"source,omitempty"`
	Status ProblemsetProblem_Status `protobuf:"varint,11,opt,name=status,proto3,enum=jnoj.interface.v1.ProblemsetProblem_Status" json:"status,omitempty"`
	// 题目类型：标准输入输出、函数题、客观题
	Type ProblemType `protobuf:"varint,12,opt,name=type,proto3,enum=jnoj.interface.v1.ProblemType" json:"type,omitempty"`
	// 客观题内容
	Statement   *ProblemStatement `protobuf:"bytes,13,opt,name=statement,proto3" json:"statement,omitempty"`
	Tags        []string          `protobuf:"bytes,14,rep,name=tags,proto3" json:"tags,omitempty"`
	SampleTests []*SampleTest     `protobuf:"bytes,16,rep,name=sample_tests,json=sampleTests,proto3" json:"sample_tests,omitempty"`
	// 客观题题目分数
	Score float32 `protobuf:"fixed32,17,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *ProblemsetProblem) Reset() {
	*x = ProblemsetProblem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_problem_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProblemsetProblem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProblemsetProblem) ProtoMessage() {}

func (x *ProblemsetProblem) ProtoReflect() protoreflect.Message {
	mi := &file_v1_problem_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProblemsetProblem.ProtoReflect.Descriptor instead.
func (*ProblemsetProblem) Descriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{54}
}

func (x *ProblemsetProblem) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProblemsetProblem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProblemsetProblem) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *ProblemsetProblem) GetTimeLimit() int32 {
	if x != nil {
		return x.TimeLimit
	}
	return 0
}

func (x *ProblemsetProblem) GetMemoryLimit() int32 {
	if x != nil {
		return x.MemoryLimit
	}
	return 0
}

func (x *ProblemsetProblem) GetAcceptedCount() int32 {
	if x != nil {
		return x.AcceptedCount
	}
	return 0
}

func (x *ProblemsetProblem) GetSubmitCount() int32 {
	if x != nil {
		return x.SubmitCount
	}
	return 0
}

func (x *ProblemsetProblem) GetProblemsetId() int32 {
	if x != nil {
		return x.ProblemsetId
	}
	return 0
}

func (x *ProblemsetProblem) GetProblemId() int32 {
	if x != nil {
		return x.ProblemId
	}
	return 0
}

func (x *ProblemsetProblem) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *ProblemsetProblem) GetStatus() ProblemsetProblem_Status {
	if x != nil {
		return x.Status
	}
	return ProblemsetProblem_NOT_START
}

func (x *ProblemsetProblem) GetType() ProblemType {
	if x != nil {
		return x.Type
	}
	return ProblemType_DEFAULT
}

func (x *ProblemsetProblem) GetStatement() *ProblemStatement {
	if x != nil {
		return x.Statement
	}
	return nil
}

func (x *ProblemsetProblem) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ProblemsetProblem) GetSampleTests() []*SampleTest {
	if x != nil {
		return x.SampleTests
	}
	return nil
}

func (x *ProblemsetProblem) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

type ListProblemsetProblemsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Problems        []*ProblemsetProblem `protobuf:"bytes,1,rep,name=problems,proto3" json:"problems,omitempty"`
	ProblemTotal    int64                `protobuf:"varint,2,opt,name=problem_total,json=problemTotal,proto3" json:"problem_total,omitempty"`
	Problemsets     []*Problemset        `protobuf:"bytes,3,rep,name=problemsets,proto3" json:"problemsets,omitempty"`
	ProblemsetTotal int64                `protobuf:"varint,4,opt,name=problemset_total,json=problemsetTotal,proto3" json:"problemset_total,omitempty"`
}

func (x *ListProblemsetProblemsResponse) Reset() {
	*x = ListProblemsetProblemsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_problem_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProblemsetProblemsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProblemsetProblemsResponse) ProtoMessage() {}

func (x *ListProblemsetProblemsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_problem_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProblemsetProblemsResponse.ProtoReflect.Descriptor instead.
func (*ListProblemsetProblemsResponse) Descriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{55}
}

func (x *ListProblemsetProblemsResponse) GetProblems() []*ProblemsetProblem {
	if x != nil {
		return x.Problems
	}
	return nil
}

func (x *ListProblemsetProblemsResponse) GetProblemTotal() int64 {
	if x != nil {
		return x.ProblemTotal
	}
	return 0
}

func (x *ListProblemsetProblemsResponse) GetProblemsets() []*Problemset {
	if x != nil {
		return x.Problemsets
	}
	return nil
}

func (x *ListProblemsetProblemsResponse) GetProblemsetTotal() int64 {
	if x != nil {
		return x.ProblemsetTotal
	}
	return 0
}

type GetProblemsetProblemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Pid int32 `protobuf:"varint,2,opt,name=pid,proto3" json:"pid,omitempty"`
}

func (x *GetProblemsetProblemRequest) Reset() {
	*x = GetProblemsetProblemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_problem_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProblemsetProblemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProblemsetProblemRequest) ProtoMessage() {}

func (x *GetProblemsetProblemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_problem_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProblemsetProblemRequest.ProtoReflect.Descriptor instead.
func (*GetProblemsetProblemRequest) Descriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{56}
}

func (x *GetProblemsetProblemRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetProblemsetProblemRequest) GetPid() int32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

type UpdateProblemsetProblemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Pid   int32   `protobuf:"varint,2,opt,name=pid,proto3" json:"pid,omitempty"`
	Score float32 `protobuf:"fixed32,3,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *UpdateProblemsetProblemRequest) Reset() {
	*x = UpdateProblemsetProblemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_problem_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProblemsetProblemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProblemsetProblemRequest) ProtoMessage() {}

func (x *UpdateProblemsetProblemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_problem_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProblemsetProblemRequest.ProtoReflect.Descriptor instead.
func (*UpdateProblemsetProblemRequest) Descriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{57}
}

func (x *UpdateProblemsetProblemRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateProblemsetProblemRequest) GetPid() int32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *UpdateProblemsetProblemRequest) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

type GetProblemsetLateralProblemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Pid int32 `protobuf:"varint,2,opt,name=pid,proto3" json:"pid,omitempty"`
}

func (x *GetProblemsetLateralProblemRequest) Reset() {
	*x = GetProblemsetLateralProblemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_problem_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProblemsetLateralProblemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProblemsetLateralProblemRequest) ProtoMessage() {}

func (x *GetProblemsetLateralProblemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_problem_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProblemsetLateralProblemRequest.ProtoReflect.Descriptor instead.
func (*GetProblemsetLateralProblemRequest) Descriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{58}
}

func (x *GetProblemsetLateralProblemRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetProblemsetLateralProblemRequest) GetPid() int32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

type GetProblemsetLateralProblemResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Previous int32 `protobuf:"varint,1,opt,name=previous,proto3" json:"previous,omitempty"`
	Next     int32 `protobuf:"varint,2,opt,name=next,proto3" json:"next,omitempty"`
}

func (x *GetProblemsetLateralProblemResponse) Reset() {
	*x = GetProblemsetLateralProblemResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_problem_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProblemsetLateralProblemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProblemsetLateralProblemResponse) ProtoMessage() {}

func (x *GetProblemsetLateralProblemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_problem_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProblemsetLateralProblemResponse.ProtoReflect.Descriptor instead.
func (*GetProblemsetLateralProblemResponse) Descriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{59}
}

func (x *GetProblemsetLateralProblemResponse) GetPrevious() int32 {
	if x != nil {
		return x.Previous
	}
	return 0
}

func (x *GetProblemsetLateralProblemResponse) GetNext() int32 {
	if x != nil {
		return x.Next
	}
	return 0
}

type AddProblemToProblemsetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ProblemId int32 `protobuf:"varint,2,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
}

func (x *AddProblemToProblemsetRequest) Reset() {
	*x = AddProblemToProblemsetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_problem_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddProblemToProblemsetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddProblemToProblemsetRequest) ProtoMessage() {}

func (x *AddProblemToProblemsetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_problem_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddProblemToProblemsetRequest.ProtoReflect.Descriptor instead.
func (*AddProblemToProblemsetRequest) Descriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{60}
}

func (x *AddProblemToProblemsetRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AddProblemToProblemsetRequest) GetProblemId() int32 {
	if x != nil {
		return x.ProblemId
	}
	return 0
}

type BatchAddProblemToProblemsetPreviewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int32                                            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Method  BatchAddProblemToProblemsetPreviewRequest_Method `protobuf:"varint,2,opt,name=method,proto3,enum=jnoj.interface.v1.BatchAddProblemToProblemsetPreviewRequest_Method" json:"method,omitempty"`
	Content string                                           `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *BatchAddProblemToProblemsetPreviewRequest) Reset() {
	*x = BatchAddProblemToProblemsetPreviewRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_problem_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchAddProblemToProblemsetPreviewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchAddProblemToProblemsetPreviewRequest) ProtoMessage() {}

func (x *BatchAddProblemToProblemsetPreviewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_problem_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchAddProblemToProblemsetPreviewRequest.ProtoReflect.Descriptor instead.
func (*BatchAddProblemToProblemsetPreviewRequest) Descriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{61}
}

func (x *BatchAddProblemToProblemsetPreviewRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BatchAddProblemToProblemsetPreviewRequest) GetMethod() BatchAddProblemToProblemsetPreviewRequest_Method {
	if x != nil {
		return x.Method
	}
	return BatchAddProblemToProblemsetPreviewRequest_EXCEL
}

func (x *BatchAddProblemToProblemsetPreviewRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type BatchAddProblemToProblemsetPreviewResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Problems     []*ProblemsetProblem `protobuf:"bytes,1,rep,name=problems,proto3" json:"problems,omitempty"`
	Total        int32                `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	FailedReason []string             `protobuf:"bytes,3,rep,name=failed_reason,json=failedReason,proto3" json:"failed_reason,omitempty"`
}

func (x *BatchAddProblemToProblemsetPreviewResponse) Reset() {
	*x = BatchAddProblemToProblemsetPreviewResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_problem_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchAddProblemToProblemsetPreviewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchAddProblemToProblemsetPreviewResponse) ProtoMessage() {}

func (x *BatchAddProblemToProblemsetPreviewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_problem_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchAddProblemToProblemsetPreviewResponse.ProtoReflect.Descriptor instead.
func (*BatchAddProblemToProblemsetPreviewResponse) Descriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{62}
}

func (x *BatchAddProblemToProblemsetPreviewResponse) GetProblems() []*ProblemsetProblem {
	if x != nil {
		return x.Problems
	}
	return nil
}

func (x *BatchAddProblemToProblemsetPreviewResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *BatchAddProblemToProblemsetPreviewResponse) GetFailedReason() []string {
	if x != nil {
		return x.FailedReason
	}
	return nil
}

type BatchAddProblemToProblemsetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int32                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ProblemIds []int32              `protobuf:"varint,2,rep,packed,name=problem_ids,json=problemIds,proto3" json:"problem_ids,omitempty"`
	Problems   []*ProblemsetProblem `protobuf:"bytes,3,rep,name=problems,proto3" json:"problems,omitempty"`
}

func (x *BatchAddProblemToProblemsetRequest) Reset() {
	*x = BatchAddProblemToProblemsetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_problem_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchAddProblemToProblemsetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchAddProblemToProblemsetRequest) ProtoMessage() {}

func (x *BatchAddProblemToProblemsetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_problem_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchAddProblemToProblemsetRequest.ProtoReflect.Descriptor instead.
func (*BatchAddProblemToProblemsetRequest) Descriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{63}
}

func (x *BatchAddProblemToProblemsetRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BatchAddProblemToProblemsetRequest) GetProblemIds() []int32 {
	if x != nil {
		return x.ProblemIds
	}
	return nil
}

func (x *BatchAddProblemToProblemsetRequest) GetProblems() []*ProblemsetProblem {
	if x != nil {
		return x.Problems
	}
	return nil
}

type BatchAddProblemToProblemsetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FailedReason []string `protobuf:"bytes,3,rep,name=failed_reason,json=failedReason,proto3" json:"failed_reason,omitempty"`
}

func (x *BatchAddProblemToProblemsetResponse) Reset() {
	*x = BatchAddProblemToProblemsetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_problem_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchAddProblemToProblemsetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchAddProblemToProblemsetResponse) ProtoMessage() {}

func (x *BatchAddProblemToProblemsetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_problem_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchAddProblemToProblemsetResponse.ProtoReflect.Descriptor instead.
func (*BatchAddProblemToProblemsetResponse) Descriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{64}
}

func (x *BatchAddProblemToProblemsetResponse) GetFailedReason() []string {
	if x != nil {
		return x.FailedReason
	}
	return nil
}

type DeleteProblemFromProblemsetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ProblemId int32 `protobuf:"varint,2,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
}

func (x *DeleteProblemFromProblemsetRequest) Reset() {
	*x = DeleteProblemFromProblemsetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_problem_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteProblemFromProblemsetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProblemFromProblemsetRequest) ProtoMessage() {}

func (x *DeleteProblemFromProblemsetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_problem_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProblemFromProblemsetRequest.ProtoReflect.Descriptor instead.
func (*DeleteProblemFromProblemsetRequest) Descriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{65}
}

func (x *DeleteProblemFromProblemsetRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeleteProblemFromProblemsetRequest) GetProblemId() int32 {
	if x != nil {
		return x.ProblemId
	}
	return 0
}

type SortProblemsetProblemsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  int32                                               `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Ids []*SortProblemsetProblemsRequest_ProblemsetProblems `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *SortProblemsetProblemsRequest) Reset() {
	*x = SortProblemsetProblemsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_problem_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SortProblemsetProblemsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortProblemsetProblemsRequest) ProtoMessage() {}

func (x *SortProblemsetProblemsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_problem_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortProblemsetProblemsRequest.ProtoReflect.Descriptor instead.
func (*SortProblemsetProblemsRequest) Descriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{66}
}

func (x *SortProblemsetProblemsRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SortProblemsetProblemsRequest) GetIds() []*SortProblemsetProblemsRequest_ProblemsetProblems {
	if x != nil {
		return x.Ids
	}
	return nil
}

type ProblemLanguage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	LanguageCode int32  `protobuf:"varint,2,opt,name=language_code,json=languageCode,proto3" json:"language_code,omitempty"`
	LanguageName string `protobuf:"bytes,3,opt,name=language_name,json=languageName,proto3" json:"language_name,omitempty"`
	UserContent  string `protobuf:"bytes,4,opt,name=user_content,json=userContent,proto3" json:"user_content,omitempty"`
	MainContent  string `protobuf:"bytes,5,opt,name=main_content,json=mainContent,proto3" json:"main_content,omitempty"`
}

func (x *ProblemLanguage) Reset() {
	*x = ProblemLanguage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_problem_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProblemLanguage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProblemLanguage) ProtoMessage() {}

func (x *ProblemLanguage) ProtoReflect() protoreflect.Message {
	mi := &file_v1_problem_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProblemLanguage.ProtoReflect.Descriptor instead.
func (*ProblemLanguage) Descriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{67}
}

func (x *ProblemLanguage) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProblemLanguage) GetLanguageCode() int32 {
	if x != nil {
		return x.LanguageCode
	}
	return 0
}

func (x *ProblemLanguage) GetLanguageName() string {
	if x != nil {
		return x.LanguageName
	}
	return ""
}

func (x *ProblemLanguage) GetUserContent() string {
	if x != nil {
		return x.UserContent
	}
	return ""
}

func (x *ProblemLanguage) GetMainContent() string {
	if x != nil {
		return x.MainContent
	}
	return ""
}

type ListProblemLanguagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId int32 `protobuf:"varint,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
}

func (x *ListProblemLanguagesRequest) Reset() {
	*x = ListProblemLanguagesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_problem_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProblemLanguagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProblemLanguagesRequest) ProtoMessage() {}

func (x *ListProblemLanguagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_problem_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProblemLanguagesRequest.ProtoReflect.Descriptor instead.
func (*ListProblemLanguagesRequest) Descriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{68}
}

func (x *ListProblemLanguagesRequest) GetProblemId() int32 {
	if x != nil {
		return x.ProblemId
	}
	return 0
}

type ListProblemLanguagesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data  []*ProblemLanguage `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Total int64              `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *ListProblemLanguagesResponse) Reset() {
	*x = ListProblemLanguagesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_problem_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProblemLanguagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProblemLanguagesResponse) ProtoMessage() {}

func (x *ListProblemLanguagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_problem_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProblemLanguagesResponse.ProtoReflect.Descriptor instead.
func (*ListProblemLanguagesResponse) Descriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{69}
}

func (x *ListProblemLanguagesResponse) GetData() []*ProblemLanguage {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ListProblemLanguagesResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetProblemLanguageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId int32 `protobuf:"varint,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	Id        int32 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetProblemLanguageRequest) Reset() {
	*x = GetProblemLanguageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_problem_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProblemLanguageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProblemLanguageRequest) ProtoMessage() {}

func (x *GetProblemLanguageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_problem_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProblemLanguageRequest.ProtoReflect.Descriptor instead.
func (*GetProblemLanguageRequest) Descriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{70}
}

func (x *GetProblemLanguageRequest) GetProblemId() int32 {
	if x != nil {
		return x.ProblemId
	}
	return 0
}

func (x *GetProblemLanguageRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type CreateProblemLanguageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId   int32  `protobuf:"varint,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	UserContent string `protobuf:"bytes,2,opt,name=user_content,json=userContent,proto3" json:"user_content,omitempty"`
	MainContent string `protobuf:"bytes,3,opt,name=main_content,json=mainContent,proto3" json:"main_content,omitempty"`
	Language    int32  `protobuf:"varint,4,opt,name=language,proto3" json:"language,omitempty"`
}

func (x *CreateProblemLanguageRequest) Reset() {
	*x = CreateProblemLanguageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_problem_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateProblemLanguageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProblemLanguageRequest) ProtoMessage() {}

func (x *CreateProblemLanguageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_problem_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProblemLanguageRequest.ProtoReflect.Descriptor instead.
func (*CreateProblemLanguageRequest) Descriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{71}
}

func (x *CreateProblemLanguageRequest) GetProblemId() int32 {
	if x != nil {
		return x.ProblemId
	}
	return 0
}

func (x *CreateProblemLanguageRequest) GetUserContent() string {
	if x != nil {
		return x.UserContent
	}
	return ""
}

func (x *CreateProblemLanguageRequest) GetMainContent() string {
	if x != nil {
		return x.MainContent
	}
	return ""
}

func (x *CreateProblemLanguageRequest) GetLanguage() int32 {
	if x != nil {
		return x.Language
	}
	return 0
}

type UpdateProblemLanguageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId   int32  `protobuf:"varint,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	Id          int32  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	UserContent string `protobuf:"bytes,3,opt,name=user_content,json=userContent,proto3" json:"user_content,omitempty"`
	MainContent string `protobuf:"bytes,4,opt,name=main_content,json=mainContent,proto3" json:"main_content,omitempty"`
}

func (x *UpdateProblemLanguageRequest) Reset() {
	*x = UpdateProblemLanguageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_problem_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProblemLanguageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProblemLanguageRequest) ProtoMessage() {}

func (x *UpdateProblemLanguageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_problem_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProblemLanguageRequest.ProtoReflect.Descriptor instead.
func (*UpdateProblemLanguageRequest) Descriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{72}
}

func (x *UpdateProblemLanguageRequest) GetProblemId() int32 {
	if x != nil {
		return x.ProblemId
	}
	return 0
}

func (x *UpdateProblemLanguageRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateProblemLanguageRequest) GetUserContent() string {
	if x != nil {
		return x.UserContent
	}
	return ""
}

func (x *UpdateProblemLanguageRequest) GetMainContent() string {
	if x != nil {
		return x.MainContent
	}
	return ""
}

type DeleteProblemLanguageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId int32 `protobuf:"varint,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	Id        int32 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteProblemLanguageRequest) Reset() {
	*x = DeleteProblemLanguageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_problem_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteProblemLanguageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProblemLanguageRequest) ProtoMessage() {}

func (x *DeleteProblemLanguageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_problem_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProblemLanguageRequest.ProtoReflect.Descriptor instead.
func (*DeleteProblemLanguageRequest) Descriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{73}
}

func (x *DeleteProblemLanguageRequest) GetProblemId() int32 {
	if x != nil {
		return x.ProblemId
	}
	return 0
}

func (x *DeleteProblemLanguageRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DownloadProblemsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int32 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *DownloadProblemsRequest) Reset() {
	*x = DownloadProblemsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_problem_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadProblemsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadProblemsRequest) ProtoMessage() {}

func (x *DownloadProblemsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_problem_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadProblemsRequest.ProtoReflect.Descriptor instead.
func (*DownloadProblemsRequest) Descriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{74}
}

func (x *DownloadProblemsRequest) GetIds() []int32 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type DownloadProblemsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *DownloadProblemsResponse) Reset() {
	*x = DownloadProblemsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_problem_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadProblemsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadProblemsResponse) ProtoMessage() {}

func (x *DownloadProblemsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_problem_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadProblemsResponse.ProtoReflect.Descriptor instead.
func (*DownloadProblemsResponse) Descriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{75}
}

func (x *DownloadProblemsResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type GetProblemsetAnswerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AnswerId int32 `protobuf:"varint,2,opt,name=answer_id,json=answerId,proto3" json:"answer_id,omitempty"`
}

func (x *GetProblemsetAnswerRequest) Reset() {
	*x = GetProblemsetAnswerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_problem_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProblemsetAnswerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProblemsetAnswerRequest) ProtoMessage() {}

func (x *GetProblemsetAnswerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_problem_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProblemsetAnswerRequest.ProtoReflect.Descriptor instead.
func (*GetProblemsetAnswerRequest) Descriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{76}
}

func (x *GetProblemsetAnswerRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetProblemsetAnswerRequest) GetAnswerId() int32 {
	if x != nil {
		return x.AnswerId
	}
	return 0
}

type ProblemsetAnswer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ProblemsetId         int32                  `protobuf:"varint,2,opt,name=problemset_id,json=problemsetId,proto3" json:"problemset_id,omitempty"`
	UserId               int32                  `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Answer               string                 `protobuf:"bytes,4,opt,name=answer,proto3" json:"answer,omitempty"`
	AnsweredProblemIds   string                 `protobuf:"bytes,5,opt,name=answered_problem_ids,json=answeredProblemIds,proto3" json:"answered_problem_ids,omitempty"`
	UnansweredProblemIds string                 `protobuf:"bytes,6,opt,name=unanswered_problem_ids,json=unansweredProblemIds,proto3" json:"unanswered_problem_ids,omitempty"`
	CorrectProblemIds    string                 `protobuf:"bytes,7,opt,name=correct_problem_ids,json=correctProblemIds,proto3" json:"correct_problem_ids,omitempty"`
	WrongProblemIds      string                 `protobuf:"bytes,8,opt,name=wrong_problem_ids,json=wrongProblemIds,proto3" json:"wrong_problem_ids,omitempty"`
	SubmissionIds        string                 `protobuf:"bytes,9,opt,name=submission_ids,json=submissionIds,proto3" json:"submission_ids,omitempty"`
	Score                float32                `protobuf:"fixed32,10,opt,name=score,proto3" json:"score,omitempty"`
	Submissions          []*Submission          `protobuf:"bytes,11,rep,name=submissions,proto3" json:"submissions,omitempty"`
	User                 *User                  `protobuf:"bytes,12,opt,name=user,proto3" json:"user,omitempty"`
	SubmittedAt          *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=submitted_at,json=submittedAt,proto3" json:"submitted_at,omitempty"`
	CreatedAt            *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *ProblemsetAnswer) Reset() {
	*x = ProblemsetAnswer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_problem_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProblemsetAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProblemsetAnswer) ProtoMessage() {}

func (x *ProblemsetAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_v1_problem_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProblemsetAnswer.ProtoReflect.Descriptor instead.
func (*ProblemsetAnswer) Descriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{77}
}

func (x *ProblemsetAnswer) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProblemsetAnswer) GetProblemsetId() int32 {
	if x != nil {
		return x.ProblemsetId
	}
	return 0
}

func (x *ProblemsetAnswer) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ProblemsetAnswer) GetAnswer() string {
	if x != nil {
		return x.Answer
	}
	return ""
}

func (x *ProblemsetAnswer) GetAnsweredProblemIds() string {
	if x != nil {
		return x.AnsweredProblemIds
	}
	return ""
}

func (x *ProblemsetAnswer) GetUnansweredProblemIds() string {
	if x != nil {
		return x.UnansweredProblemIds
	}
	return ""
}

func (x *ProblemsetAnswer) GetCorrectProblemIds() string {
	if x != nil {
		return x.CorrectProblemIds
	}
	return ""
}

func (x *ProblemsetAnswer) GetWrongProblemIds() string {
	if x != nil {
		return x.WrongProblemIds
	}
	return ""
}

func (x *ProblemsetAnswer) GetSubmissionIds() string {
	if x != nil {
		return x.SubmissionIds
	}
	return ""
}

func (x *ProblemsetAnswer) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *ProblemsetAnswer) GetSubmissions() []*Submission {
	if x != nil {
		return x.Submissions
	}
	return nil
}

func (x *ProblemsetAnswer) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *ProblemsetAnswer) GetSubmittedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.SubmittedAt
	}
	return nil
}

func (x *ProblemsetAnswer) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type ListProblemsetAnswersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	My       *bool  `protobuf:"varint,3,opt,name=my,proto3,oneof" json:"my,omitempty"`
	Page     int32  `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
	PerPage  int32  `protobuf:"varint,5,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *ListProblemsetAnswersRequest) Reset() {
	*x = ListProblemsetAnswersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_problem_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProblemsetAnswersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProblemsetAnswersRequest) ProtoMessage() {}

func (x *ListProblemsetAnswersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_problem_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProblemsetAnswersRequest.ProtoReflect.Descriptor instead.
func (*ListProblemsetAnswersRequest) Descriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{78}
}

func (x *ListProblemsetAnswersRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ListProblemsetAnswersRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ListProblemsetAnswersRequest) GetMy() bool {
	if x != nil && x.My != nil {
		return *x.My
	}
	return false
}

func (x *ListProblemsetAnswersRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListProblemsetAnswersRequest) GetPerPage() int32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

type ListProblemsetAnswersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data  []*ProblemsetAnswer `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Total int32               `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *ListProblemsetAnswersResponse) Reset() {
	*x = ListProblemsetAnswersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_problem_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProblemsetAnswersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProblemsetAnswersResponse) ProtoMessage() {}

func (x *ListProblemsetAnswersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_problem_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProblemsetAnswersResponse.ProtoReflect.Descriptor instead.
func (*ListProblemsetAnswersResponse) Descriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{79}
}

func (x *ListProblemsetAnswersResponse) GetData() []*ProblemsetAnswer {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ListProblemsetAnswersResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type CreateProblemsetAnswerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreateProblemsetAnswerRequest) Reset() {
	*x = CreateProblemsetAnswerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_problem_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateProblemsetAnswerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProblemsetAnswerRequest) ProtoMessage() {}

func (x *CreateProblemsetAnswerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_problem_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProblemsetAnswerRequest.ProtoReflect.Descriptor instead.
func (*CreateProblemsetAnswerRequest) Descriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{80}
}

func (x *CreateProblemsetAnswerRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type UpdateProblemsetAnswerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AnswerId    int32                  `protobuf:"varint,2,opt,name=answer_id,json=answerId,proto3" json:"answer_id,omitempty"`
	Answer      string                 `protobuf:"bytes,3,opt,name=answer,proto3" json:"answer,omitempty"`
	SubmittedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=submitted_at,json=submittedAt,proto3" json:"submitted_at,omitempty"`
}

func (x *UpdateProblemsetAnswerRequest) Reset() {
	*x = UpdateProblemsetAnswerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_problem_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProblemsetAnswerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProblemsetAnswerRequest) ProtoMessage() {}

func (x *UpdateProblemsetAnswerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_problem_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProblemsetAnswerRequest.ProtoReflect.Descriptor instead.
func (*UpdateProblemsetAnswerRequest) Descriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{81}
}

func (x *UpdateProblemsetAnswerRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateProblemsetAnswerRequest) GetAnswerId() int32 {
	if x != nil {
		return x.AnswerId
	}
	return 0
}

func (x *UpdateProblemsetAnswerRequest) GetAnswer() string {
	if x != nil {
		return x.Answer
	}
	return ""
}

func (x *UpdateProblemsetAnswerRequest) GetSubmittedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.SubmittedAt
	}
	return nil
}

type ProblemVerification_VerificaitionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action       string `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *ProblemVerification_VerificaitionInfo) Reset() {
	*x = ProblemVerification_VerificaitionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_problem_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProblemVerification_VerificaitionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProblemVerification_VerificaitionInfo) ProtoMessage() {}

func (x *ProblemVerification_VerificaitionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_v1_problem_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProblemVerification_VerificaitionInfo.ProtoReflect.Descriptor instead.
func (*ProblemVerification_VerificaitionInfo) Descriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{37, 0}
}

func (x *ProblemVerification_VerificaitionInfo) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *ProblemVerification_VerificaitionInfo) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type Problemset_User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Nickname string `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Username string `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *Problemset_User) Reset() {
	*x = Problemset_User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_problem_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Problemset_User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Problemset_User) ProtoMessage() {}

func (x *Problemset_User) ProtoReflect() protoreflect.Message {
	mi := &file_v1_problem_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Problemset_User.ProtoReflect.Descriptor instead.
func (*Problemset_User) Descriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{38, 0}
}

func (x *Problemset_User) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Problemset_User) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *Problemset_User) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type SortProblemsetChildRequest_Child struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Order int32 `protobuf:"varint,1,opt,name=order,proto3" json:"order,omitempty"`
	Id    int32 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SortProblemsetChildRequest_Child) Reset() {
	*x = SortProblemsetChildRequest_Child{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_problem_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SortProblemsetChildRequest_Child) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortProblemsetChildRequest_Child) ProtoMessage() {}

func (x *SortProblemsetChildRequest_Child) ProtoReflect() protoreflect.Message {
	mi := &file_v1_problem_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortProblemsetChildRequest_Child.ProtoReflect.Descriptor instead.
func (*SortProblemsetChildRequest_Child) Descriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{47, 0}
}

func (x *SortProblemsetChildRequest_Child) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *SortProblemsetChildRequest_Child) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type SortProblemsetProblemsRequest_ProblemsetProblems struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Order int32 `protobuf:"varint,1,opt,name=order,proto3" json:"order,omitempty"`
	Id    int32 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SortProblemsetProblemsRequest_ProblemsetProblems) Reset() {
	*x = SortProblemsetProblemsRequest_ProblemsetProblems{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_problem_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SortProblemsetProblemsRequest_ProblemsetProblems) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortProblemsetProblemsRequest_ProblemsetProblems) ProtoMessage() {}

func (x *SortProblemsetProblemsRequest_ProblemsetProblems) ProtoReflect() protoreflect.Message {
	mi := &file_v1_problem_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortProblemsetProblemsRequest_ProblemsetProblems.ProtoReflect.Descriptor instead.
func (*SortProblemsetProblemsRequest_ProblemsetProblems) Descriptor() ([]byte, []int) {
	return file_v1_problem_proto_rawDescGZIP(), []int{66, 0}
}

func (x *SortProblemsetProblemsRequest_ProblemsetProblems) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *SortProblemsetProblemsRequest_ProblemsetProblems) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

var File_v1_problem_proto protoreflect.FileDescriptor

var file_v1_problem_proto_rawDesc = []byte{
	0x0a, 0x10, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x11, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x76, 0x31, 0x2f, 0x73,
	0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0d, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3a,
	0x0a, 0x0a, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0xa9, 0x05, 0x0a, 0x07, 0x50,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x43, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65,
	0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e,
	0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e,
	0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x40,
	0x0a, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x18, 0x10,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x54,
	0x65, 0x73, 0x74, 0x52, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x65, 0x73, 0x74, 0x73,
	0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x88, 0x02, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65,
	0x67, 0x65, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x65, 0x67, 0x65,
	0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x6f, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x22, 0xe1, 0x02, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x45, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x22, 0x1d, 0x0a, 0x06, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x4f, 0x4e, 0x4c, 0x59, 0x4d, 0x45, 0x10, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x62, 0x79, 0x22, 0x5c, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6a, 0x6e,
	0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x22, 0x23, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x5e, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x27, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x22, 0xd9, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a,
	0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x22, 0x06, 0x18, 0x98, 0x75, 0x28, 0xfa, 0x01, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2d, 0x0a, 0x0c, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x0a, 0xfa, 0x42, 0x07, 0x22, 0x05, 0x18, 0x80, 0x08, 0x28, 0x04, 0x52, 0x0b, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x5d, 0x0a,
	0x1c, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x22, 0x6e, 0x0a, 0x1d,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6a, 0x6e,
	0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x2c, 0x0a, 0x1a,
	0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4b, 0x0a, 0x1d, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0x88, 0x02, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x73, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x6c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c,
	0x65, 0x67, 0x65, 0x6e, 0x64, 0x12, 0x3b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x22, 0x41, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x73, 0x69, 0x64, 0x22, 0x58, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x54, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x22,
	0x8c, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x54,
	0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6a, 0x6e, 0x6f,
	0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x54, 0x65, 0x73, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x69, 0x73, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x46, 0x69, 0x72, 0x73, 0x74, 0x22, 0x27,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x54, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0xa1, 0x04, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x54, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x69, 0x73, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x69, 0x73, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x69,
	0x73, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x10, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x2e, 0x0a,
	0x13, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x69, 0x0a, 0x18, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x54, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x66,
	0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x97, 0x01, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x45, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x54,
	0x65, 0x73, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x22, 0x45, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07,
	0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x73, 0x22, 0xb7, 0x01, 0x0a, 0x17, 0x53, 0x6f, 0x72, 0x74,
	0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x54, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x10, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x0e, 0x73, 0x65, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x46, 0x69, 0x72, 0x73, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x0a, 0x73, 0x6f, 0x72, 0x74,
	0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x03, 0x69, 0x64, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f,
	0x73, 0x65, 0x74, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x9d, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67,
	0x65, 0x22, 0x64, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6a, 0x6e,
	0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x39, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x73,
	0x69, 0x64, 0x22, 0xc4, 0x02, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x46, 0x69,
	0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xe4, 0x01, 0x0a, 0x18, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x22, 0x7e, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x73, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x3c, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x73, 0x69, 0x64, 0x22, 0x29,
	0x0a, 0x15, 0x52, 0x75, 0x6e, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x46, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x73, 0x69, 0x64, 0x22, 0x2f, 0x0a, 0x1d, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x53, 0x74, 0x64, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x54, 0x0a, 0x1e, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x53, 0x74, 0x64, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6a, 0x6e, 0x6f,
	0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x4c, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x22, 0x26,
	0x0a, 0x14, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x24, 0x0a, 0x12, 0x50, 0x61, 0x63, 0x6b, 0x50, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2f, 0x0a, 0x1d,
	0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0xae, 0x02,
	0x0a, 0x13, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x12, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x65, 0x0a, 0x11, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x69, 0x74, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x38, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x69, 0x74, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x50, 0x0a, 0x11,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xf1,
	0x05, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x21, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x73, 0x65, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x73, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52,
	0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x27, 0x0a, 0x0f, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x04,
	0x72, 0x6f, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6a, 0x6e, 0x6f,
	0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72,
	0x6f, 0x6c, 0x65, 0x12, 0x40, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x73, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x35, 0x0a, 0x06, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6a, 0x6e,
	0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x1a, 0x4e, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0xbb, 0x02, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x21, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x08, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a, 0x0a, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27,
	0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x48, 0x01, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x6d, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x02, 0x6d, 0x79, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x6d, 0x79,
	0x22, 0x62, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73,
	0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x22, 0x26, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x86, 0x01, 0x0a,
	0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6a,
	0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x29, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x22, 0xd1, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x73, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52,
	0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x27, 0x0a, 0x0f, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0x49, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x22,
	0x49, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x73, 0x65, 0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x22, 0xa2, 0x01, 0x0a, 0x1a, 0x53,
	0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x43, 0x68, 0x69,
	0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x45, 0x0a, 0x03, 0x69, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x50,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x52, 0x03, 0x69, 0x64, 0x73,
	0x1a, 0x2d, 0x0a, 0x05, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22,
	0xf8, 0x01, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x09, 0x62, 0x65, 0x73, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x30, 0x0a,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6a, 0x6e,
	0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12,
	0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xa4, 0x01, 0x0a, 0x1a, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x42, 0x79, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x65, 0x72,
	0x50, 0x61, 0x67, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62,
	0x79, 0x22, 0x6a, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x73, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x35, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x72, 0x0a,
	0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64,
	0x65, 0x22, 0x46, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x73, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x78, 0x0a, 0x1d, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50,
	0x61, 0x67, 0x65, 0x22, 0x91, 0x05, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65,
	0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6a, 0x6e,
	0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x32, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e,
	0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18,
	0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x40, 0x0a, 0x0c, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x65, 0x73, 0x74,
	0x52, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x65, 0x73, 0x74, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x22, 0x32, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0d, 0x0a,
	0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09,
	0x41, 0x54, 0x54, 0x45, 0x4d, 0x50, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53,
	0x4f, 0x4c, 0x56, 0x45, 0x44, 0x10, 0x02, 0x22, 0xf3, 0x01, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6a,
	0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x3f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x73, 0x65, 0x74, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65,
	0x74, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74,
	0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x70, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x3f, 0x0a,
	0x1b, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x69, 0x64, 0x22, 0x58,
	0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x46, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c,
	0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x69, 0x64,
	0x22, 0x55, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65,
	0x74, 0x4c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x6f, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x6f, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x22, 0x4e, 0x0a, 0x1d, 0x41, 0x64, 0x64, 0x50, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x54, 0x6f, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64, 0x22, 0xc7, 0x01, 0x0a, 0x29, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x54, 0x6f, 0x50, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5b, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x43, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x41,
	0x64, 0x64, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x54, 0x6f, 0x50, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x73, 0x65, 0x74, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x13, 0x0a, 0x06,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x58, 0x43, 0x45, 0x4c, 0x10,
	0x00, 0x22, 0xa9, 0x01, 0x0a, 0x2a, 0x42, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x64, 0x50, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x54, 0x6f, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65,
	0x74, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x40, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0c, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x97, 0x01,
	0x0a, 0x22, 0x42, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x54, 0x6f, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x49, 0x64, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x22, 0x4a, 0x0a, 0x23, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x54, 0x6f, 0x50, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x22, 0x53, 0x0a, 0x22, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64, 0x22, 0xc2, 0x01, 0x0a, 0x1d, 0x53, 0x6f, 0x72,
	0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x55, 0x0a, 0x03, 0x69, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x72, 0x74,
	0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x73, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x52, 0x03, 0x69, 0x64,
	0x73, 0x1a, 0x3a, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0xb1, 0x01,
	0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x22, 0x3c, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64, 0x22,
	0x6c, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x4c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x36, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x4a, 0x0a,
	0x19, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x4c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x9f, 0x01, 0x0a, 0x1c, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x4c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0x93, 0x01, 0x0a, 0x1c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x4c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x22, 0x4d, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x2b, 0x0a, 0x17, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x2c, 0x0a,
	0x18, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x49, 0x0a, 0x1a, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x41, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x49, 0x64, 0x22, 0xe6, 0x04, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x73, 0x65, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x70,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x49, 0x64, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x75, 0x6e, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x65,
	0x64, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x75, 0x6e, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x65, 0x64, 0x50,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x72,
	0x72, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x50,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x77, 0x72, 0x6f,
	0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x77, 0x72, 0x6f, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x49, 0x64, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73,
	0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x3f, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x30, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22,
	0x95, 0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73,
	0x65, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x13, 0x0a, 0x02,
	0x6d, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x02, 0x6d, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65,
	0x42, 0x05, 0x0a, 0x03, 0x5f, 0x6d, 0x79, 0x22, 0x6e, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x73, 0x65, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x2f, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0xa3, 0x01, 0x0a, 0x1d, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x41, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12,
	0x3d, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x41, 0x74, 0x2a, 0x37,
	0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a,
	0x07, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x55,
	0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x42, 0x4a, 0x45,
	0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x2a, 0x49, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x08, 0x0a, 0x04, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x48, 0x4f,
	0x49, 0x43, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x4c,
	0x45, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x49, 0x4c, 0x4c, 0x42, 0x4c, 0x41, 0x4e, 0x4b,
	0x10, 0x03, 0x2a, 0x26, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x10, 0x00,
	0x12, 0x08, 0x0a, 0x04, 0x45, 0x58, 0x41, 0x4d, 0x10, 0x01, 0x2a, 0x3d, 0x0a, 0x14, 0x50, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x41, 0x4e, 0x59, 0x4f,
	0x4e, 0x45, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x01, 0x2a, 0x32, 0x0a, 0x0e, 0x50, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x47,
	0x55, 0x45, 0x53, 0x54, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52,
	0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x10, 0x02, 0x32, 0xad, 0x3e,
	0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x72, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73,
	0x12, 0x26, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x11, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0b, 0x12, 0x09, 0x2f, 0x70, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x73, 0x12, 0x66, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x12, 0x24, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x12, 0x0e, 0x2f, 0x70,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x78, 0x0a, 0x0d,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x12, 0x27, 0x2e,
	0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x14, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x3a, 0x01, 0x2a, 0x22, 0x09, 0x2f, 0x70, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x12, 0x6f, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x12, 0x27, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1a, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x22, 0x19, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x13, 0x3a, 0x01, 0x2a, 0x1a, 0x0e, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x9d, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x2f, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x70,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x8c, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x2d, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23,
	0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x70, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x95, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x30, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e,
	0x3a, 0x01, 0x2a, 0x22, 0x19, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x9b,
	0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6a, 0x6e,
	0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x3a, 0x01, 0x2a, 0x1a, 0x1f, 0x2f, 0x70, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x73, 0x69, 0x64, 0x7d, 0x12, 0x8b, 0x01, 0x0a,
	0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x2a, 0x1f, 0x2f, 0x70, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x73, 0x69, 0x64, 0x7d, 0x12, 0x89, 0x01, 0x0a, 0x10, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x54, 0x65, 0x73, 0x74, 0x73, 0x12,
	0x2a, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x54,
	0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6a, 0x6e,
	0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x54, 0x65, 0x73, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16,
	0x12, 0x14, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x12, 0x78, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x54, 0x65, 0x73, 0x74, 0x12, 0x28, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x54, 0x65,
	0x73, 0x74, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x70, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73,
	0x12, 0x81, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x54, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x54,
	0x65, 0x73, 0x74, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x3a, 0x01, 0x2a, 0x22, 0x14,
	0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x74,
	0x65, 0x73, 0x74, 0x73, 0x12, 0x87, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x54, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x2e, 0x6a, 0x6e, 0x6f,
	0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x54, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x54, 0x65, 0x73, 0x74, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x3a,
	0x01, 0x2a, 0x1a, 0x1a, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x7b, 0x74, 0x69, 0x64, 0x7d, 0x12, 0x7c,
	0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x54,
	0x65, 0x73, 0x74, 0x12, 0x2b, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c,
	0x2a, 0x1a, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x7b, 0x0a, 0x10,
	0x53, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x54, 0x65, 0x73, 0x74, 0x73,
	0x12, 0x2a, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x54, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x3a, 0x01, 0x2a, 0x22,
	0x18, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f,
	0x74, 0x65, 0x73, 0x74, 0x2f, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x89, 0x01, 0x0a, 0x10, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x2a,
	0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6a, 0x6e, 0x6f,
	0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12,
	0x14, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x7e, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x28, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1e, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x46, 0x69, 0x6c,
	0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x70, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f,
	0x7b, 0x73, 0x69, 0x64, 0x7d, 0x12, 0x81, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x2b, 0x2e, 0x6a, 0x6e,
	0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19,
	0x3a, 0x01, 0x2a, 0x22, 0x14, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x87, 0x01, 0x0a, 0x11, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x12,
	0x2b, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6a,
	0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x22, 0x25, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1f, 0x3a, 0x01, 0x2a, 0x1a, 0x1a, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x73,
	0x69, 0x64, 0x7d, 0x12, 0x7c, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x2b, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x22, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x2a, 0x1a, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73,
	0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x73, 0x69, 0x64,
	0x7d, 0x12, 0x77, 0x0a, 0x0e, 0x52, 0x75, 0x6e, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x46,
	0x69, 0x6c, 0x65, 0x12, 0x28, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x50, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x3a, 0x01, 0x2a,
	0x22, 0x18, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x2f, 0x7b, 0x73, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x75, 0x6e, 0x12, 0xa1, 0x01, 0x0a, 0x14, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x2e, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12, 0x20, 0x2f, 0x70,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x12, 0x95,
	0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x4c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x4c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x12,
	0x25, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x99, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x12, 0x2f, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x22, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x4c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x3a, 0x01, 0x2a,
	0x22, 0x20, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x9e, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x2f, 0x2e, 0x6a,
	0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x4c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e,
	0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x3a, 0x01, 0x2a, 0x1a, 0x25, 0x2f, 0x70,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x12, 0x8f, 0x01, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x2f, 0x2e,
	0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x4c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x2a, 0x25,
	0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73,
	0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xa2, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x53, 0x74, 0x64, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x73,
	0x12, 0x30, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x53, 0x74, 0x64, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x53, 0x74, 0x64, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f,
	0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x74,
	0x64, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x82, 0x01, 0x0a, 0x14, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x65, 0x72, 0x12, 0x2e, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x22, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1c, 0x3a, 0x01, 0x2a, 0x1a, 0x17, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x12,
	0x72, 0x0a, 0x0d, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x12, 0x27, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x3a, 0x01, 0x2a, 0x22, 0x15, 0x2f, 0x70,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x12, 0x6c, 0x0a, 0x0b, 0x50, 0x61, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x12, 0x25, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x3a, 0x01, 0x2a, 0x22, 0x13, 0x2f, 0x70,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x61, 0x63,
	0x6b, 0x12, 0x97, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x2e, 0x6a,
	0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26,
	0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b,
	0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x7e, 0x0a, 0x0f, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x73, 0x12, 0x29,
	0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x14, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x12, 0x0c, 0x2f,
	0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x73, 0x12, 0x72, 0x0a, 0x0d, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x12, 0x27, 0x2e, 0x6a,
	0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x73, 0x65, 0x74, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x70,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12,
	0x76, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x73, 0x65, 0x74, 0x12, 0x2a, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1d, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x22, 0x17,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x3a, 0x01, 0x2a, 0x22, 0x0c, 0x2f, 0x70, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x73, 0x12, 0x71, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x12, 0x2a, 0x2e, 0x6a, 0x6e,
	0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x2a, 0x11, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x7b, 0x0a, 0x10, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x12, 0x2a,
	0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6a, 0x6e, 0x6f,
	0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x16, 0x3a, 0x01, 0x2a, 0x1a, 0x11, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65,
	0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x87, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x43, 0x68, 0x69, 0x6c,
	0x64, 0x12, 0x2f, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1f, 0x3a, 0x01, 0x2a, 0x22, 0x1a, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73,
	0x65, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65,
	0x6e, 0x12, 0x8f, 0x01, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x12, 0x2f, 0x2e, 0x6a, 0x6e,
	0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74,
	0x43, 0x68, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x2a, 0x25, 0x2f, 0x70,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f,
	0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x2f, 0x7b, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f,
	0x69, 0x64, 0x7d, 0x12, 0x85, 0x01, 0x0a, 0x13, 0x53, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x12, 0x2d, 0x2e, 0x6a, 0x6e,
	0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x43, 0x68,
	0x69, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x3a, 0x01, 0x2a, 0x22, 0x1c, 0x2f,
	0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x2f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x2f, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x95, 0x01, 0x0a, 0x13,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x12, 0x2d, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x73, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x70, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x12, 0x8d, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x2e, 0x2e, 0x6a,
	0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6a,
	0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x22,
	0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x3a, 0x01, 0x2a, 0x22, 0x17, 0x2f, 0x70, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x12, 0x89, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x2e, 0x2e, 0x6a,
	0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x2a, 0x21, 0x2f, 0x70,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x12,
	0xa1, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x12, 0x30, 0x2e, 0x6a, 0x6e, 0x6f,
	0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6a,
	0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x73, 0x12, 0x8c, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x73, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x12, 0x2e, 0x2e, 0x6a,
	0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x6a,
	0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22,
	0x12, 0x20, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x69,
	0x64, 0x7d, 0x12, 0x9f, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x12, 0x31,
	0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x73, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x24, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x3a,
	0x01, 0x2a, 0x1a, 0x20, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x73,
	0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x2f, 0x7b,
	0x70, 0x69, 0x64, 0x7d, 0x12, 0xbe, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x12, 0x35, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x6a, 0x6e,
	0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x4c, 0x61, 0x74,
	0x65, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x12, 0x28, 0x2f, 0x70, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x70,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x69, 0x64, 0x7d, 0x2f, 0x6c, 0x61,
	0x74, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x89, 0x01, 0x0a, 0x16, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x54, 0x6f, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74,
	0x12, 0x30, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x54,
	0x6f, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1f, 0x3a, 0x01, 0x2a, 0x22, 0x1a, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73,
	0x65, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x73, 0x12, 0xd6, 0x01, 0x0a, 0x22, 0x42, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x64, 0x50, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x54, 0x6f, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65,
	0x74, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x3c, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x54, 0x6f, 0x50, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x54, 0x6f, 0x50, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x3a, 0x01, 0x2a,
	0x22, 0x28, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0xb9, 0x01, 0x0a, 0x1b, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x54, 0x6f,
	0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x12, 0x35, 0x2e, 0x6a, 0x6e, 0x6f,
	0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x54, 0x6f,
	0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x36, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x64, 0x50, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x54, 0x6f, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x25, 0x3a, 0x01, 0x2a, 0x22, 0x20, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65,
	0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x12, 0x9d, 0x01, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x12, 0x35, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x2a, 0x27, 0x2f,
	0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x8d, 0x01, 0x0a, 0x16, 0x53, 0x6f, 0x72, 0x74, 0x50,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x73, 0x12, 0x30, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x73, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x29, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x23, 0x3a, 0x01, 0x2a, 0x22, 0x1e, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x2f, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x98, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x2d,
	0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74,
	0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e,
	0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x41, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x12, 0x25, 0x2f, 0x70, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x7d, 0x12, 0x9d, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x73, 0x65, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x12, 0x2f, 0x2e, 0x6a, 0x6e,
	0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x41, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6a,
	0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x41,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x73, 0x12, 0x95, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x30, 0x2e, 0x6a,
	0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65,
	0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23,
	0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x41, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x3a, 0x01, 0x2a, 0x22, 0x19,
	0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x2f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x12, 0x94, 0x01, 0x0a, 0x16, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x41, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x12, 0x30, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x30,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x3a, 0x01, 0x2a, 0x1a, 0x25, 0x2f, 0x70, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d,
	0x12, 0x8a, 0x01, 0x0a, 0x10, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x73, 0x12, 0x2a, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2b, 0x2e, 0x6a, 0x6e, 0x6f, 0x6a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x3a, 0x01, 0x2a, 0x22, 0x12, 0x2f, 0x64, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x42, 0x15, 0x5a,
	0x13, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x76,
	0x31, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_v1_problem_proto_rawDescOnce sync.Once
	file_v1_problem_proto_rawDescData = file_v1_problem_proto_rawDesc
)

func file_v1_problem_proto_rawDescGZIP() []byte {
	file_v1_problem_proto_rawDescOnce.Do(func() {
		file_v1_problem_proto_rawDescData = protoimpl.X.CompressGZIP(file_v1_problem_proto_rawDescData)
	})
	return file_v1_problem_proto_rawDescData
}

var file_v1_problem_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_v1_problem_proto_msgTypes = make([]protoimpl.MessageInfo, 86)
var file_v1_problem_proto_goTypes = []interface{}{
	(ProblemType)(0),                                         // 0: jnoj.interface.v1.ProblemType
	(ProblemStatementType)(0),                                // 1: jnoj.interface.v1.ProblemStatementType
	(ProblemsetType)(0),                                      // 2: jnoj.interface.v1.ProblemsetType
	(ProblemsetMembership)(0),                                // 3: jnoj.interface.v1.ProblemsetMembership
	(ProblemsetRole)(0),                                      // 4: jnoj.interface.v1.ProblemsetRole
	(ListProblemsRequest_Author)(0),                          // 5: jnoj.interface.v1.ListProblemsRequest.Author
	(ProblemsetProblem_Status)(0),                            // 6: jnoj.interface.v1.ProblemsetProblem.Status
	(BatchAddProblemToProblemsetPreviewRequest_Method)(0),    // 7: jnoj.interface.v1.BatchAddProblemToProblemsetPreviewRequest.Method
	(*SampleTest)(nil),                                       // 8: jnoj.interface.v1.SampleTest
	(*Problem)(nil),                                          // 9: jnoj.interface.v1.Problem
	(*ProblemStatement)(nil),                                 // 10: jnoj.interface.v1.ProblemStatement
	(*ListProblemsRequest)(nil),                              // 11: jnoj.interface.v1.ListProblemsRequest
	(*ListProblemsResponse)(nil),                             // 12: jnoj.interface.v1.ListProblemsResponse
	(*GetProblemRequest)(nil),                                // 13: jnoj.interface.v1.GetProblemRequest
	(*CreateProblemRequest)(nil),                             // 14: jnoj.interface.v1.CreateProblemRequest
	(*CreateProblemResponse)(nil),                            // 15: jnoj.interface.v1.CreateProblemResponse
	(*UpdateProblemRequest)(nil),                             // 16: jnoj.interface.v1.UpdateProblemRequest
	(*ListProblemStatementsRequest)(nil),                     // 17: jnoj.interface.v1.ListProblemStatementsRequest
	(*ListProblemStatementsResponse)(nil),                    // 18: jnoj.interface.v1.ListProblemStatementsResponse
	(*GetProblemStatementRequest)(nil),                       // 19: jnoj.interface.v1.GetProblemStatementRequest
	(*CreateProblemStatementRequest)(nil),                    // 20: jnoj.interface.v1.CreateProblemStatementRequest
	(*UpdateProblemStatementRequest)(nil),                    // 21: jnoj.interface.v1.UpdateProblemStatementRequest
	(*DeleteProblemStatementRequest)(nil),                    // 22: jnoj.interface.v1.DeleteProblemStatementRequest
	(*ListProblemTestsRequest)(nil),                          // 23: jnoj.interface.v1.ListProblemTestsRequest
	(*ListProblemTestsResponse)(nil),                         // 24: jnoj.interface.v1.ListProblemTestsResponse
	(*GetProblemTestRequest)(nil),                            // 25: jnoj.interface.v1.GetProblemTestRequest
	(*ProblemTest)(nil),                                      // 26: jnoj.interface.v1.ProblemTest
	(*CreateProblemTestRequest)(nil),                         // 27: jnoj.interface.v1.CreateProblemTestRequest
	(*UpdateProblemTestRequest)(nil),                         // 28: jnoj.interface.v1.UpdateProblemTestRequest
	(*DeleteProblemTestRequest)(nil),                         // 29: jnoj.interface.v1.DeleteProblemTestRequest
	(*SortProblemTestsRequest)(nil),                          // 30: jnoj.interface.v1.SortProblemTestsRequest
	(*ListProblemFilesRequest)(nil),                          // 31: jnoj.interface.v1.ListProblemFilesRequest
	(*ListProblemFilesResponse)(nil),                         // 32: jnoj.interface.v1.ListProblemFilesResponse
	(*GetProblemFileRequest)(nil),                            // 33: jnoj.interface.v1.GetProblemFileRequest
	(*ProblemFile)(nil),                                      // 34: jnoj.interface.v1.ProblemFile
	(*CreateProblemFileRequest)(nil),                         // 35: jnoj.interface.v1.CreateProblemFileRequest
	(*UpdateProblemFileRequest)(nil),                         // 36: jnoj.interface.v1.UpdateProblemFileRequest
	(*DeleteProblemFileRequest)(nil),                         // 37: jnoj.interface.v1.DeleteProblemFileRequest
	(*RunProblemFileRequest)(nil),                            // 38: jnoj.interface.v1.RunProblemFileRequest
	(*ListProblemStdCheckersRequest)(nil),                    // 39: jnoj.interface.v1.ListProblemStdCheckersRequest
	(*ListProblemStdCheckersResponse)(nil),                   // 40: jnoj.interface.v1.ListProblemStdCheckersResponse
	(*UpdateProblemCheckerRequest)(nil),                      // 41: jnoj.interface.v1.UpdateProblemCheckerRequest
	(*VerifyProblemRequest)(nil),                             // 42: jnoj.interface.v1.VerifyProblemRequest
	(*PackProblemRequest)(nil),                               // 43: jnoj.interface.v1.PackProblemRequest
	(*GetProblemVerificationRequest)(nil),                    // 44: jnoj.interface.v1.GetProblemVerificationRequest
	(*ProblemVerification)(nil),                              // 45: jnoj.interface.v1.ProblemVerification
	(*Problemset)(nil),                                       // 46: jnoj.interface.v1.Problemset
	(*ListProblemsetsRequest)(nil),                           // 47: jnoj.interface.v1.ListProblemsetsRequest
	(*ListProblemsetsResponse)(nil),                          // 48: jnoj.interface.v1.ListProblemsetsResponse
	(*GetProblemsetRequest)(nil),                             // 49: jnoj.interface.v1.GetProblemsetRequest
	(*CreateProblemsetRequest)(nil),                          // 50: jnoj.interface.v1.CreateProblemsetRequest
	(*DeleteProblemsetRequest)(nil),                          // 51: jnoj.interface.v1.DeleteProblemsetRequest
	(*UpdateProblemsetRequest)(nil),                          // 52: jnoj.interface.v1.UpdateProblemsetRequest
	(*CreateProblemsetChildRequest)(nil),                     // 53: jnoj.interface.v1.CreateProblemsetChildRequest
	(*DeleteProblemsetChildRequest)(nil),                     // 54: jnoj.interface.v1.DeleteProblemsetChildRequest
	(*SortProblemsetChildRequest)(nil),                       // 55: jnoj.interface.v1.SortProblemsetChildRequest
	(*ProblemsetUser)(nil),                                   // 56: jnoj.interface.v1.ProblemsetUser
	(*ListProblemsetUsersRequest)(nil),                       // 57: jnoj.interface.v1.ListProblemsetUsersRequest
	(*ListProblemsetUsersResponse)(nil),                      // 58: jnoj.interface.v1.ListProblemsetUsersResponse
	(*CreateProblemsetUserRequest)(nil),                      // 59: jnoj.interface.v1.CreateProblemsetUserRequest
	(*DeleteProblemsetUserRequest)(nil),                      // 60: jnoj.interface.v1.DeleteProblemsetUserRequest
	(*ListProblemsetProblemsRequest)(nil),                    // 61: jnoj.interface.v1.ListProblemsetProblemsRequest
	(*ProblemsetProblem)(nil),                                // 62: jnoj.interface.v1.ProblemsetProblem
	(*ListProblemsetProblemsResponse)(nil),                   // 63: jnoj.interface.v1.ListProblemsetProblemsResponse
	(*GetProblemsetProblemRequest)(nil),                      // 64: jnoj.interface.v1.GetProblemsetProblemRequest
	(*UpdateProblemsetProblemRequest)(nil),                   // 65: jnoj.interface.v1.UpdateProblemsetProblemRequest
	(*GetProblemsetLateralProblemRequest)(nil),               // 66: jnoj.interface.v1.GetProblemsetLateralProblemRequest
	(*GetProblemsetLateralProblemResponse)(nil),              // 67: jnoj.interface.v1.GetProblemsetLateralProblemResponse
	(*AddProblemToProblemsetRequest)(nil),                    // 68: jnoj.interface.v1.AddProblemToProblemsetRequest
	(*BatchAddProblemToProblemsetPreviewRequest)(nil),        // 69: jnoj.interface.v1.BatchAddProblemToProblemsetPreviewRequest
	(*BatchAddProblemToProblemsetPreviewResponse)(nil),       // 70: jnoj.interface.v1.BatchAddProblemToProblemsetPreviewResponse
	(*BatchAddProblemToProblemsetRequest)(nil),               // 71: jnoj.interface.v1.BatchAddProblemToProblemsetRequest
	(*BatchAddProblemToProblemsetResponse)(nil),              // 72: jnoj.interface.v1.BatchAddProblemToProblemsetResponse
	(*DeleteProblemFromProblemsetRequest)(nil),               // 73: jnoj.interface.v1.DeleteProblemFromProblemsetRequest
	(*SortProblemsetProblemsRequest)(nil),                    // 74: jnoj.interface.v1.SortProblemsetProblemsRequest
	(*ProblemLanguage)(nil),                                  // 75: jnoj.interface.v1.ProblemLanguage
	(*ListProblemLanguagesRequest)(nil),                      // 76: jnoj.interface.v1.ListProblemLanguagesRequest
	(*ListProblemLanguagesResponse)(nil),                     // 77: jnoj.interface.v1.ListProblemLanguagesResponse
	(*GetProblemLanguageRequest)(nil),                        // 78: jnoj.interface.v1.GetProblemLanguageRequest
	(*CreateProblemLanguageRequest)(nil),                     // 79: jnoj.interface.v1.CreateProblemLanguageRequest
	(*UpdateProblemLanguageRequest)(nil),                     // 80: jnoj.interface.v1.UpdateProblemLanguageRequest
	(*DeleteProblemLanguageRequest)(nil),                     // 81: jnoj.interface.v1.DeleteProblemLanguageRequest
	(*DownloadProblemsRequest)(nil),                          // 82: jnoj.interface.v1.DownloadProblemsRequest
	(*DownloadProblemsResponse)(nil),                         // 83: jnoj.interface.v1.DownloadProblemsResponse
	(*GetProblemsetAnswerRequest)(nil),                       // 84: jnoj.interface.v1.GetProblemsetAnswerRequest
	(*ProblemsetAnswer)(nil),                                 // 85: jnoj.interface.v1.ProblemsetAnswer
	(*ListProblemsetAnswersRequest)(nil),                     // 86: jnoj.interface.v1.ListProblemsetAnswersRequest
	(*ListProblemsetAnswersResponse)(nil),                    // 87: jnoj.interface.v1.ListProblemsetAnswersResponse
	(*CreateProblemsetAnswerRequest)(nil),                    // 88: jnoj.interface.v1.CreateProblemsetAnswerRequest
	(*UpdateProblemsetAnswerRequest)(nil),                    // 89: jnoj.interface.v1.UpdateProblemsetAnswerRequest
	(*ProblemVerification_VerificaitionInfo)(nil),            // 90: jnoj.interface.v1.ProblemVerification.VerificaitionInfo
	(*Problemset_User)(nil),                                  // 91: jnoj.interface.v1.Problemset.User
	(*SortProblemsetChildRequest_Child)(nil),                 // 92: jnoj.interface.v1.SortProblemsetChildRequest.Child
	(*SortProblemsetProblemsRequest_ProblemsetProblems)(nil), // 93: jnoj.interface.v1.SortProblemsetProblemsRequest.ProblemsetProblems
	(*timestamppb.Timestamp)(nil),                            // 94: google.protobuf.Timestamp
	(*User)(nil),                                             // 95: jnoj.interface.v1.user.User
	(*Submission)(nil),                                       // 96: jnoj.interface.v1.Submission
	(*emptypb.Empty)(nil),                                    // 97: google.protobuf.Empty
}
var file_v1_problem_proto_depIdxs = []int32{
	0,   // 0: jnoj.interface.v1.Problem.type:type_name -> jnoj.interface.v1.ProblemType
	10,  // 1: jnoj.interface.v1.Problem.statements:type_name -> jnoj.interface.v1.ProblemStatement
	8,   // 2: jnoj.interface.v1.Problem.sample_tests:type_name -> jnoj.interface.v1.SampleTest
	94,  // 3: jnoj.interface.v1.Problem.created_at:type_name -> google.protobuf.Timestamp
	94,  // 4: jnoj.interface.v1.Problem.updated_at:type_name -> google.protobuf.Timestamp
	1,   // 5: jnoj.interface.v1.ProblemStatement.type:type_name -> jnoj.interface.v1.ProblemStatementType
	5,   // 6: jnoj.interface.v1.ListProblemsRequest.author:type_name -> jnoj.interface.v1.ListProblemsRequest.Author
	9,   // 7: jnoj.interface.v1.ListProblemsResponse.data:type_name -> jnoj.interface.v1.Problem
	0,   // 8: jnoj.interface.v1.CreateProblemRequest.type:type_name -> jnoj.interface.v1.ProblemType
	10,  // 9: jnoj.interface.v1.ListProblemStatementsResponse.data:type_name -> jnoj.interface.v1.ProblemStatement
	1,   // 10: jnoj.interface.v1.UpdateProblemStatementRequest.type:type_name -> jnoj.interface.v1.ProblemStatementType
	26,  // 11: jnoj.interface.v1.ListProblemTestsResponse.data:type_name -> jnoj.interface.v1.ProblemTest
	94,  // 12: jnoj.interface.v1.ProblemTest.created_at:type_name -> google.protobuf.Timestamp
	94,  // 13: jnoj.interface.v1.ProblemTest.updated_at:type_name -> google.protobuf.Timestamp
	34,  // 14: jnoj.interface.v1.ListProblemFilesResponse.data:type_name -> jnoj.interface.v1.ProblemFile
	94,  // 15: jnoj.interface.v1.ProblemFile.created_at:type_name -> google.protobuf.Timestamp
	94,  // 16: jnoj.interface.v1.ProblemFile.updated_at:type_name -> google.protobuf.Timestamp
	34,  // 17: jnoj.interface.v1.ListProblemStdCheckersResponse.data:type_name -> jnoj.interface.v1.ProblemFile
	90,  // 18: jnoj.interface.v1.ProblemVerification.verificaiton_info:type_name -> jnoj.interface.v1.ProblemVerification.VerificaitionInfo
	2,   // 19: jnoj.interface.v1.Problemset.type:type_name -> jnoj.interface.v1.ProblemsetType
	91,  // 20: jnoj.interface.v1.Problemset.user:type_name -> jnoj.interface.v1.Problemset.User
	3,   // 21: jnoj.interface.v1.Problemset.membership:type_name -> jnoj.interface.v1.ProblemsetMembership
	4,   // 22: jnoj.interface.v1.Problemset.role:type_name -> jnoj.interface.v1.ProblemsetRole
	62,  // 23: jnoj.interface.v1.Problemset.problems:type_name -> jnoj.interface.v1.ProblemsetProblem
	94,  // 24: jnoj.interface.v1.Problemset.created_at:type_name -> google.protobuf.Timestamp
	94,  // 25: jnoj.interface.v1.Problemset.updated_at:type_name -> google.protobuf.Timestamp
	46,  // 26: jnoj.interface.v1.Problemset.parent:type_name -> jnoj.interface.v1.Problemset
	2,   // 27: jnoj.interface.v1.ListProblemsetsRequest.type:type_name -> jnoj.interface.v1.ProblemsetType
	3,   // 28: jnoj.interface.v1.ListProblemsetsRequest.membership:type_name -> jnoj.interface.v1.ProblemsetMembership
	46,  // 29: jnoj.interface.v1.ListProblemsetsResponse.data:type_name -> jnoj.interface.v1.Problemset
	2,   // 30: jnoj.interface.v1.CreateProblemsetRequest.type:type_name -> jnoj.interface.v1.ProblemsetType
	3,   // 31: jnoj.interface.v1.UpdateProblemsetRequest.membership:type_name -> jnoj.interface.v1.ProblemsetMembership
	92,  // 32: jnoj.interface.v1.SortProblemsetChildRequest.ids:type_name -> jnoj.interface.v1.SortProblemsetChildRequest.Child
	95,  // 33: jnoj.interface.v1.ProblemsetUser.user:type_name -> jnoj.interface.v1.user.User
	94,  // 34: jnoj.interface.v1.ProblemsetUser.created_at:type_name -> google.protobuf.Timestamp
	56,  // 35: jnoj.interface.v1.ListProblemsetUsersResponse.data:type_name -> jnoj.interface.v1.ProblemsetUser
	6,   // 36: jnoj.interface.v1.ProblemsetProblem.status:type_name -> jnoj.interface.v1.ProblemsetProblem.Status
	0,   // 37: jnoj.interface.v1.ProblemsetProblem.type:type_name -> jnoj.interface.v1.ProblemType
	10,  // 38: jnoj.interface.v1.ProblemsetProblem.statement:type_name -> jnoj.interface.v1.ProblemStatement
	8,   // 39: jnoj.interface.v1.ProblemsetProblem.sample_tests:type_name -> jnoj.interface.v1.SampleTest
	62,  // 40: jnoj.interface.v1.ListProblemsetProblemsResponse.problems:type_name -> jnoj.interface.v1.ProblemsetProblem
	46,  // 41: jnoj.interface.v1.ListProblemsetProblemsResponse.problemsets:type_name -> jnoj.interface.v1.Problemset
	7,   // 42: jnoj.interface.v1.BatchAddProblemToProblemsetPreviewRequest.method:type_name -> jnoj.interface.v1.BatchAddProblemToProblemsetPreviewRequest.Method
	62,  // 43: jnoj.interface.v1.BatchAddProblemToProblemsetPreviewResponse.problems:type_name -> jnoj.interface.v1.ProblemsetProblem
	62,  // 44: jnoj.interface.v1.BatchAddProblemToProblemsetRequest.problems:type_name -> jnoj.interface.v1.ProblemsetProblem
	93,  // 45: jnoj.interface.v1.SortProblemsetProblemsRequest.ids:type_name -> jnoj.interface.v1.SortProblemsetProblemsRequest.ProblemsetProblems
	75,  // 46: jnoj.interface.v1.ListProblemLanguagesResponse.data:type_name -> jnoj.interface.v1.ProblemLanguage
	96,  // 47: jnoj.interface.v1.ProblemsetAnswer.submissions:type_name -> jnoj.interface.v1.Submission
	95,  // 48: jnoj.interface.v1.ProblemsetAnswer.user:type_name -> jnoj.interface.v1.user.User
	94,  // 49: jnoj.interface.v1.ProblemsetAnswer.submitted_at:type_name -> google.protobuf.Timestamp
	94,  // 50: jnoj.interface.v1.ProblemsetAnswer.created_at:type_name -> google.protobuf.Timestamp
	85,  // 51: jnoj.interface.v1.ListProblemsetAnswersResponse.data:type_name -> jnoj.interface.v1.ProblemsetAnswer
	94,  // 52: jnoj.interface.v1.UpdateProblemsetAnswerRequest.submitted_at:type_name -> google.protobuf.Timestamp
	11,  // 53: jnoj.interface.v1.ProblemService.ListProblems:input_type -> jnoj.interface.v1.ListProblemsRequest
	13,  // 54: jnoj.interface.v1.ProblemService.GetProblem:input_type -> jnoj.interface.v1.GetProblemRequest
	14,  // 55: jnoj.interface.v1.ProblemService.CreateProblem:input_type -> jnoj.interface.v1.CreateProblemRequest
	16,  // 56: jnoj.interface.v1.ProblemService.UpdateProblem:input_type -> jnoj.interface.v1.UpdateProblemRequest
	17,  // 57: jnoj.interface.v1.ProblemService.ListProblemStatements:input_type -> jnoj.interface.v1.ListProblemStatementsRequest
	19,  // 58: jnoj.interface.v1.ProblemService.GetProblemStatement:input_type -> jnoj.interface.v1.GetProblemStatementRequest
	20,  // 59: jnoj.interface.v1.ProblemService.CreateProblemStatement:input_type -> jnoj.interface.v1.CreateProblemStatementRequest
	21,  // 60: jnoj.interface.v1.ProblemService.UpdateProblemStatement:input_type -> jnoj.interface.v1.UpdateProblemStatementRequest
	22,  // 61: jnoj.interface.v1.ProblemService.DeleteProblemStatement:input_type -> jnoj.interface.v1.DeleteProblemStatementRequest
	23,  // 62: jnoj.interface.v1.ProblemService.ListProblemTests:input_type -> jnoj.interface.v1.ListProblemTestsRequest
	25,  // 63: jnoj.interface.v1.ProblemService.GetProblemTest:input_type -> jnoj.interface.v1.GetProblemTestRequest
	27,  // 64: jnoj.interface.v1.ProblemService.CreateProblemTest:input_type -> jnoj.interface.v1.CreateProblemTestRequest
	28,  // 65: jnoj.interface.v1.ProblemService.UpdateProblemTest:input_type -> jnoj.interface.v1.UpdateProblemTestRequest
	29,  // 66: jnoj.interface.v1.ProblemService.DeleteProblemTest:input_type -> jnoj.interface.v1.DeleteProblemTestRequest
	30,  // 67: jnoj.interface.v1.ProblemService.SortProblemTests:input_type -> jnoj.interface.v1.SortProblemTestsRequest
	31,  // 68: jnoj.interface.v1.ProblemService.ListProblemFiles:input_type -> jnoj.interface.v1.ListProblemFilesRequest
	33,  // 69: jnoj.interface.v1.ProblemService.GetProblemFile:input_type -> jnoj.interface.v1.GetProblemFileRequest
	35,  // 70: jnoj.interface.v1.ProblemService.CreateProblemFile:input_type -> jnoj.interface.v1.CreateProblemFileRequest
	36,  // 71: jnoj.interface.v1.ProblemService.UpdateProblemFile:input_type -> jnoj.interface.v1.UpdateProblemFileRequest
	37,  // 72: jnoj.interface.v1.ProblemService.DeleteProblemFile:input_type -> jnoj.interface.v1.DeleteProblemFileRequest
	38,  // 73: jnoj.interface.v1.ProblemService.RunProblemFile:input_type -> jnoj.interface.v1.RunProblemFileRequest
	76,  // 74: jnoj.interface.v1.ProblemService.ListProblemLanguages:input_type -> jnoj.interface.v1.ListProblemLanguagesRequest
	78,  // 75: jnoj.interface.v1.ProblemService.GetProblemLanguage:input_type -> jnoj.interface.v1.GetProblemLanguageRequest
	79,  // 76: jnoj.interface.v1.ProblemService.CreateProblemLanguage:input_type -> jnoj.interface.v1.CreateProblemLanguageRequest
	80,  // 77: jnoj.interface.v1.ProblemService.UpdateProblemLanguage:input_type -> jnoj.interface.v1.UpdateProblemLanguageRequest
	81,  // 78: jnoj.interface.v1.ProblemService.DeleteProblemLanguage:input_type -> jnoj.interface.v1.DeleteProblemLanguageRequest
	39,  // 79: jnoj.interface.v1.ProblemService.ListProblemStdCheckers:input_type -> jnoj.interface.v1.ListProblemStdCheckersRequest
	41,  // 80: jnoj.interface.v1.ProblemService.UpdateProblemChecker:input_type -> jnoj.interface.v1.UpdateProblemCheckerRequest
	42,  // 81: jnoj.interface.v1.ProblemService.VerifyProblem:input_type -> jnoj.interface.v1.VerifyProblemRequest
	43,  // 82: jnoj.interface.v1.ProblemService.PackProblem:input_type -> jnoj.interface.v1.PackProblemRequest
	44,  // 83: jnoj.interface.v1.ProblemService.GetProblemVerification:input_type -> jnoj.interface.v1.GetProblemVerificationRequest
	47,  // 84: jnoj.interface.v1.ProblemService.ListProblemsets:input_type -> jnoj.interface.v1.ListProblemsetsRequest
	49,  // 85: jnoj.interface.v1.ProblemService.GetProblemset:input_type -> jnoj.interface.v1.GetProblemsetRequest
	50,  // 86: jnoj.interface.v1.ProblemService.CreateProblemset:input_type -> jnoj.interface.v1.CreateProblemsetRequest
	51,  // 87: jnoj.interface.v1.ProblemService.DeleteProblemset:input_type -> jnoj.interface.v1.DeleteProblemsetRequest
	52,  // 88: jnoj.interface.v1.ProblemService.UpdateProblemset:input_type -> jnoj.interface.v1.UpdateProblemsetRequest
	53,  // 89: jnoj.interface.v1.ProblemService.CreateProblemsetChild:input_type -> jnoj.interface.v1.CreateProblemsetChildRequest
	54,  // 90: jnoj.interface.v1.ProblemService.DeleteProblemsetChild:input_type -> jnoj.interface.v1.DeleteProblemsetChildRequest
	55,  // 91: jnoj.interface.v1.ProblemService.SortProblemsetChild:input_type -> jnoj.interface.v1.SortProblemsetChildRequest
	57,  // 92: jnoj.interface.v1.ProblemService.ListProblemsetUsers:input_type -> jnoj.interface.v1.ListProblemsetUsersRequest
	59,  // 93: jnoj.interface.v1.ProblemService.CreateProblemsetUser:input_type -> jnoj.interface.v1.CreateProblemsetUserRequest
	60,  // 94: jnoj.interface.v1.ProblemService.DeleteProblemsetUser:input_type -> jnoj.interface.v1.DeleteProblemsetUserRequest
	61,  // 95: jnoj.interface.v1.ProblemService.ListProblemsetProblems:input_type -> jnoj.interface.v1.ListProblemsetProblemsRequest
	64,  // 96: jnoj.interface.v1.ProblemService.GetProblemsetProblem:input_type -> jnoj.interface.v1.GetProblemsetProblemRequest
	65,  // 97: jnoj.interface.v1.ProblemService.UpdateProblemsetProblem:input_type -> jnoj.interface.v1.UpdateProblemsetProblemRequest
	66,  // 98: jnoj.interface.v1.ProblemService.GetProblemsetLateralProblem:input_type -> jnoj.interface.v1.GetProblemsetLateralProblemRequest
	68,  // 99: jnoj.interface.v1.ProblemService.AddProblemToProblemset:input_type -> jnoj.interface.v1.AddProblemToProblemsetRequest
	69,  // 100: jnoj.interface.v1.ProblemService.BatchAddProblemToProblemsetPreview:input_type -> jnoj.interface.v1.BatchAddProblemToProblemsetPreviewRequest
	71,  // 101: jnoj.interface.v1.ProblemService.BatchAddProblemToProblemset:input_type -> jnoj.interface.v1.BatchAddProblemToProblemsetRequest
	73,  // 102: jnoj.interface.v1.ProblemService.DeleteProblemFromProblemset:input_type -> jnoj.interface.v1.DeleteProblemFromProblemsetRequest
	74,  // 103: jnoj.interface.v1.ProblemService.SortProblemsetProblems:input_type -> jnoj.interface.v1.SortProblemsetProblemsRequest
	84,  // 104: jnoj.interface.v1.ProblemService.GetProblemsetAnswer:input_type -> jnoj.interface.v1.GetProblemsetAnswerRequest
	86,  // 105: jnoj.interface.v1.ProblemService.ListProblemsetAnswers:input_type -> jnoj.interface.v1.ListProblemsetAnswersRequest
	88,  // 106: jnoj.interface.v1.ProblemService.CreateProblemsetAnswer:input_type -> jnoj.interface.v1.CreateProblemsetAnswerRequest
	89,  // 107: jnoj.interface.v1.ProblemService.UpdateProblemsetAnswer:input_type -> jnoj.interface.v1.UpdateProblemsetAnswerRequest
	82,  // 108: jnoj.interface.v1.ProblemService.DownloadProblems:input_type -> jnoj.interface.v1.DownloadProblemsRequest
	12,  // 109: jnoj.interface.v1.ProblemService.ListProblems:output_type -> jnoj.interface.v1.ListProblemsResponse
	9,   // 110: jnoj.interface.v1.ProblemService.GetProblem:output_type -> jnoj.interface.v1.Problem
	15,  // 111: jnoj.interface.v1.ProblemService.CreateProblem:output_type -> jnoj.interface.v1.CreateProblemResponse
	9,   // 112: jnoj.interface.v1.ProblemService.UpdateProblem:output_type -> jnoj.interface.v1.Problem
	18,  // 113: jnoj.interface.v1.ProblemService.ListProblemStatements:output_type -> jnoj.interface.v1.ListProblemStatementsResponse
	10,  // 114: jnoj.interface.v1.ProblemService.GetProblemStatement:output_type -> jnoj.interface.v1.ProblemStatement
	10,  // 115: jnoj.interface.v1.ProblemService.CreateProblemStatement:output_type -> jnoj.interface.v1.ProblemStatement
	10,  // 116: jnoj.interface.v1.ProblemService.UpdateProblemStatement:output_type -> jnoj.interface.v1.ProblemStatement
	97,  // 117: jnoj.interface.v1.ProblemService.DeleteProblemStatement:output_type -> google.protobuf.Empty
	24,  // 118: jnoj.interface.v1.ProblemService.ListProblemTests:output_type -> jnoj.interface.v1.ListProblemTestsResponse
	26,  // 119: jnoj.interface.v1.ProblemService.GetProblemTest:output_type -> jnoj.interface.v1.ProblemTest
	26,  // 120: jnoj.interface.v1.ProblemService.CreateProblemTest:output_type -> jnoj.interface.v1.ProblemTest
	26,  // 121: jnoj.interface.v1.ProblemService.UpdateProblemTest:output_type -> jnoj.interface.v1.ProblemTest
	97,  // 122: jnoj.interface.v1.ProblemService.DeleteProblemTest:output_type -> google.protobuf.Empty
	97,  // 123: jnoj.interface.v1.ProblemService.SortProblemTests:output_type -> google.protobuf.Empty
	32,  // 124: jnoj.interface.v1.ProblemService.ListProblemFiles:output_type -> jnoj.interface.v1.ListProblemFilesResponse
	34,  // 125: jnoj.interface.v1.ProblemService.GetProblemFile:output_type -> jnoj.interface.v1.ProblemFile
	34,  // 126: jnoj.interface.v1.ProblemService.CreateProblemFile:output_type -> jnoj.interface.v1.ProblemFile
	34,  // 127: jnoj.interface.v1.ProblemService.UpdateProblemFile:output_type -> jnoj.interface.v1.ProblemFile
	97,  // 128: jnoj.interface.v1.ProblemService.DeleteProblemFile:output_type -> google.protobuf.Empty
	97,  // 129: jnoj.interface.v1.ProblemService.RunProblemFile:output_type -> google.protobuf.Empty
	77,  // 130: jnoj.interface.v1.ProblemService.ListProblemLanguages:output_type -> jnoj.interface.v1.ListProblemLanguagesResponse
	75,  // 131: jnoj.interface.v1.ProblemService.GetProblemLanguage:output_type -> jnoj.interface.v1.ProblemLanguage
	75,  // 132: jnoj.interface.v1.ProblemService.CreateProblemLanguage:output_type -> jnoj.interface.v1.ProblemLanguage
	75,  // 133: jnoj.interface.v1.ProblemService.UpdateProblemLanguage:output_type -> jnoj.interface.v1.ProblemLanguage
	97,  // 134: jnoj.interface.v1.ProblemService.DeleteProblemLanguage:output_type -> google.protobuf.Empty
	40,  // 135: jnoj.interface.v1.ProblemService.ListProblemStdCheckers:output_type -> jnoj.interface.v1.ListProblemStdCheckersResponse
	97,  // 136: jnoj.interface.v1.ProblemService.UpdateProblemChecker:output_type -> google.protobuf.Empty
	97,  // 137: jnoj.interface.v1.ProblemService.VerifyProblem:output_type -> google.protobuf.Empty
	97,  // 138: jnoj.interface.v1.ProblemService.PackProblem:output_type -> google.protobuf.Empty
	45,  // 139: jnoj.interface.v1.ProblemService.GetProblemVerification:output_type -> jnoj.interface.v1.ProblemVerification
	48,  // 140: jnoj.interface.v1.ProblemService.ListProblemsets:output_type -> jnoj.interface.v1.ListProblemsetsResponse
	46,  // 141: jnoj.interface.v1.ProblemService.GetProblemset:output_type -> jnoj.interface.v1.Problemset
	46,  // 142: jnoj.interface.v1.ProblemService.CreateProblemset:output_type -> jnoj.interface.v1.Problemset
	97,  // 143: jnoj.interface.v1.ProblemService.DeleteProblemset:output_type -> google.protobuf.Empty
	46,  // 144: jnoj.interface.v1.ProblemService.UpdateProblemset:output_type -> jnoj.interface.v1.Problemset
	97,  // 145: jnoj.interface.v1.ProblemService.CreateProblemsetChild:output_type -> google.protobuf.Empty
	97,  // 146: jnoj.interface.v1.ProblemService.DeleteProblemsetChild:output_type -> google.protobuf.Empty
	97,  // 147: jnoj.interface.v1.ProblemService.SortProblemsetChild:output_type -> google.protobuf.Empty
	58,  // 148: jnoj.interface.v1.ProblemService.ListProblemsetUsers:output_type -> jnoj.interface.v1.ListProblemsetUsersResponse
	56,  // 149: jnoj.interface.v1.ProblemService.CreateProblemsetUser:output_type -> jnoj.interface.v1.ProblemsetUser
	97,  // 150: jnoj.interface.v1.ProblemService.DeleteProblemsetUser:output_type -> google.protobuf.Empty
	63,  // 151: jnoj.interface.v1.ProblemService.ListProblemsetProblems:output_type -> jnoj.interface.v1.ListProblemsetProblemsResponse
	9,   // 152: jnoj.interface.v1.ProblemService.GetProblemsetProblem:output_type -> jnoj.interface.v1.Problem
	62,  // 153: jnoj.interface.v1.ProblemService.UpdateProblemsetProblem:output_type -> jnoj.interface.v1.ProblemsetProblem
	67,  // 154: jnoj.interface.v1.ProblemService.GetProblemsetLateralProblem:output_type -> jnoj.interface.v1.GetProblemsetLateralProblemResponse
	97,  // 155: jnoj.interface.v1.ProblemService.AddProblemToProblemset:output_type -> google.protobuf.Empty
	70,  // 156: jnoj.interface.v1.ProblemService.BatchAddProblemToProblemsetPreview:output_type -> jnoj.interface.v1.BatchAddProblemToProblemsetPreviewResponse
	72,  // 157: jnoj.interface.v1.ProblemService.BatchAddProblemToProblemset:output_type -> jnoj.interface.v1.BatchAddProblemToProblemsetResponse
	97,  // 158: jnoj.interface.v1.ProblemService.DeleteProblemFromProblemset:output_type -> google.protobuf.Empty
	97,  // 159: jnoj.interface.v1.ProblemService.SortProblemsetProblems:output_type -> google.protobuf.Empty
	85,  // 160: jnoj.interface.v1.ProblemService.GetProblemsetAnswer:output_type -> jnoj.interface.v1.ProblemsetAnswer
	87,  // 161: jnoj.interface.v1.ProblemService.ListProblemsetAnswers:output_type -> jnoj.interface.v1.ListProblemsetAnswersResponse
	85,  // 162: jnoj.interface.v1.ProblemService.CreateProblemsetAnswer:output_type -> jnoj.interface.v1.ProblemsetAnswer
	97,  // 163: jnoj.interface.v1.ProblemService.UpdateProblemsetAnswer:output_type -> google.protobuf.Empty
	83,  // 164: jnoj.interface.v1.ProblemService.DownloadProblems:output_type -> jnoj.interface.v1.DownloadProblemsResponse
	109, // [109:165] is the sub-list for method output_type
	53,  // [53:109] is the sub-list for method input_type
	53,  // [53:53] is the sub-list for extension type_name
	53,  // [53:53] is the sub-list for extension extendee
	0,   // [0:53] is the sub-list for field type_name
}

func init() { file_v1_problem_proto_init() }
func file_v1_problem_proto_init() {
	if File_v1_problem_proto != nil {
		return
	}
	file_v1_submission_proto_init()
	file_v1_user_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_v1_problem_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SampleTest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_problem_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Problem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_problem_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProblemStatement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_problem_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProblemsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_problem_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProblemsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_problem_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProblemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_problem_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateProblemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_problem_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateProblemResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_problem_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProblemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_problem_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProblemStatementsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_problem_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProblemStatementsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_problem_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProblemStatementRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_problem_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateProblemStatementRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_problem_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProblemStatementRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_problem_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteProblemStatementRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_problem_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProblemTestsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_problem_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProblemTestsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_problem_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProblemTestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_problem_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProblemTest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_problem_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateProblemTestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_problem_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProblemTestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_problem_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteProblemTestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_problem_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SortProblemTestsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_problem_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProblemFilesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_problem_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProblemFilesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_problem_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProblemFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_problem_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProblemFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_problem_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateProblemFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_problem_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProblemFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_problem_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteProblemFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_problem_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunProblemFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_problem_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProblemStdCheckersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_problem_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProblemStdCheckersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_problem_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProblemCheckerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_problem_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyProblemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_problem_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackProblemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_problem_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProblemVerificationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_problem_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProblemVerification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_problem_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Problemset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_problem_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProblemsetsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_problem_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProblemsetsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_problem_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProblemsetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_problem_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateProblemsetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_problem_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteProblemsetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_problem_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProblemsetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_problem_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateProblemsetChildRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_problem_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteProblemsetChildRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_problem_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SortProblemsetChildRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_problem_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProblemsetUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_problem_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProblemsetUsersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_problem_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProblemsetUsersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_problem_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateProblemsetUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_problem_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteProblemsetUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_problem_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProblemsetProblemsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_problem_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProblemsetProblem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_problem_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProblemsetProblemsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_problem_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProblemsetProblemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_problem_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProblemsetProblemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_problem_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProblemsetLateralProblemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_problem_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProblemsetLateralProblemResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_problem_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddProblemToProblemsetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_problem_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchAddProblemToProblemsetPreviewRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_problem_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchAddProblemToProblemsetPreviewResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_problem_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchAddProblemToProblemsetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_problem_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchAddProblemToProblemsetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_problem_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteProblemFromProblemsetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_problem_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SortProblemsetProblemsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_problem_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProblemLanguage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_problem_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProblemLanguagesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_problem_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProblemLanguagesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_problem_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProblemLanguageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_problem_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateProblemLanguageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_problem_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProblemLanguageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_problem_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteProblemLanguageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_problem_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadProblemsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_problem_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadProblemsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_problem_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProblemsetAnswerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_problem_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProblemsetAnswer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_problem_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProblemsetAnswersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_problem_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProblemsetAnswersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_problem_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateProblemsetAnswerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_problem_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProblemsetAnswerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_problem_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProblemVerification_VerificaitionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_problem_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Problemset_User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_problem_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SortProblemsetChildRequest_Child); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_problem_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SortProblemsetProblemsRequest_ProblemsetProblems); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_v1_problem_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_v1_problem_proto_msgTypes[22].OneofWrappers = []interface{}{}
	file_v1_problem_proto_msgTypes[39].OneofWrappers = []interface{}{}
	file_v1_problem_proto_msgTypes[49].OneofWrappers = []interface{}{}
	file_v1_problem_proto_msgTypes[78].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v1_problem_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   86,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_v1_problem_proto_goTypes,
		DependencyIndexes: file_v1_problem_proto_depIdxs,
		EnumInfos:         file_v1_problem_proto_enumTypes,
		MessageInfos:      file_v1_problem_proto_msgTypes,
	}.Build()
	File_v1_problem_proto = out.File
	file_v1_problem_proto_rawDesc = nil
	file_v1_problem_proto_goTypes = nil
	file_v1_problem_proto_depIdxs = nil
}
