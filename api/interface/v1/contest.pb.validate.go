// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/contest.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListContestsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListContestsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListContestsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListContestsRequestMultiError, or nil if none found.
func (m *ListContestsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListContestsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Page

	// no validation rules for PerPage

	if m.GroupId != nil {
		// no validation rules for GroupId
	}

	if len(errors) > 0 {
		return ListContestsRequestMultiError(errors)
	}

	return nil
}

// ListContestsRequestMultiError is an error wrapping multiple validation
// errors returned by ListContestsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListContestsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListContestsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListContestsRequestMultiError) AllErrors() []error { return m }

// ListContestsRequestValidationError is the validation error returned by
// ListContestsRequest.Validate if the designated constraints aren't met.
type ListContestsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListContestsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListContestsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListContestsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListContestsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListContestsRequestValidationError) ErrorName() string {
	return "ListContestsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListContestsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListContestsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListContestsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListContestsRequestValidationError{}

// Validate checks the field values on ListContestsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListContestsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListContestsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListContestsResponseMultiError, or nil if none found.
func (m *ListContestsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListContestsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListContestsResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListContestsResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListContestsResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListContestsResponseMultiError(errors)
	}

	return nil
}

// ListContestsResponseMultiError is an error wrapping multiple validation
// errors returned by ListContestsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListContestsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListContestsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListContestsResponseMultiError) AllErrors() []error { return m }

// ListContestsResponseValidationError is the validation error returned by
// ListContestsResponse.Validate if the designated constraints aren't met.
type ListContestsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListContestsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListContestsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListContestsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListContestsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListContestsResponseValidationError) ErrorName() string {
	return "ListContestsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListContestsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListContestsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListContestsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListContestsResponseValidationError{}

// Validate checks the field values on GetContestRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetContestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetContestRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetContestRequestMultiError, or nil if none found.
func (m *GetContestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetContestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetContestRequestMultiError(errors)
	}

	return nil
}

// GetContestRequestMultiError is an error wrapping multiple validation errors
// returned by GetContestRequest.ValidateAll() if the designated constraints
// aren't met.
type GetContestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetContestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetContestRequestMultiError) AllErrors() []error { return m }

// GetContestRequestValidationError is the validation error returned by
// GetContestRequest.Validate if the designated constraints aren't met.
type GetContestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetContestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetContestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetContestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetContestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetContestRequestValidationError) ErrorName() string {
	return "GetContestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetContestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetContestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetContestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetContestRequestValidationError{}

// Validate checks the field values on UpdateContestRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateContestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateContestRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateContestRequestMultiError, or nil if none found.
func (m *UpdateContestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateContestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Description

	if all {
		switch v := interface{}(m.GetStartTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateContestRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateContestRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateContestRequestValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateContestRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateContestRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateContestRequestValidationError{
				field:  "EndTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFrozenTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateContestRequestValidationError{
					field:  "FrozenTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateContestRequestValidationError{
					field:  "FrozenTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFrozenTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateContestRequestValidationError{
				field:  "FrozenTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Type

	// no validation rules for Privacy

	// no validation rules for Membership

	// no validation rules for InvitationCode

	if len(errors) > 0 {
		return UpdateContestRequestMultiError(errors)
	}

	return nil
}

// UpdateContestRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateContestRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateContestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateContestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateContestRequestMultiError) AllErrors() []error { return m }

// UpdateContestRequestValidationError is the validation error returned by
// UpdateContestRequest.Validate if the designated constraints aren't met.
type UpdateContestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateContestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateContestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateContestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateContestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateContestRequestValidationError) ErrorName() string {
	return "UpdateContestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateContestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateContestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateContestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateContestRequestValidationError{}

// Validate checks the field values on Contest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Contest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Contest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ContestMultiError, or nil if none found.
func (m *Contest) ValidateAll() error {
	return m.validate(true)
}

func (m *Contest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Description

	if all {
		switch v := interface{}(m.GetStartTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ContestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ContestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ContestValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ContestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ContestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ContestValidationError{
				field:  "EndTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFrozenTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ContestValidationError{
					field:  "FrozenTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ContestValidationError{
					field:  "FrozenTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFrozenTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ContestValidationError{
				field:  "FrozenTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Type

	// no validation rules for Privacy

	// no validation rules for Membership

	if utf8.RuneCountInString(m.GetInvitationCode()) > 16 {
		err := ContestValidationError{
			field:  "InvitationCode",
			reason: "value length must be at most 16 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ParticipantCount

	// no validation rules for UserId

	// no validation rules for Role

	if all {
		switch v := interface{}(m.GetVirtualStart()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ContestValidationError{
					field:  "VirtualStart",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ContestValidationError{
					field:  "VirtualStart",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVirtualStart()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ContestValidationError{
				field:  "VirtualStart",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RunningStatus

	if all {
		switch v := interface{}(m.GetOwner()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ContestValidationError{
					field:  "Owner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ContestValidationError{
					field:  "Owner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOwner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ContestValidationError{
				field:  "Owner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ContestMultiError(errors)
	}

	return nil
}

// ContestMultiError is an error wrapping multiple validation errors returned
// by Contest.ValidateAll() if the designated constraints aren't met.
type ContestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContestMultiError) AllErrors() []error { return m }

// ContestValidationError is the validation error returned by Contest.Validate
// if the designated constraints aren't met.
type ContestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContestValidationError) ErrorName() string { return "ContestValidationError" }

// Error satisfies the builtin error interface
func (e ContestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContestValidationError{}

// Validate checks the field values on ListContestProblemsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListContestProblemsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListContestProblemsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListContestProblemsRequestMultiError, or nil if none found.
func (m *ListContestProblemsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListContestProblemsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return ListContestProblemsRequestMultiError(errors)
	}

	return nil
}

// ListContestProblemsRequestMultiError is an error wrapping multiple
// validation errors returned by ListContestProblemsRequest.ValidateAll() if
// the designated constraints aren't met.
type ListContestProblemsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListContestProblemsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListContestProblemsRequestMultiError) AllErrors() []error { return m }

// ListContestProblemsRequestValidationError is the validation error returned
// by ListContestProblemsRequest.Validate if the designated constraints aren't met.
type ListContestProblemsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListContestProblemsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListContestProblemsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListContestProblemsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListContestProblemsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListContestProblemsRequestValidationError) ErrorName() string {
	return "ListContestProblemsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListContestProblemsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListContestProblemsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListContestProblemsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListContestProblemsRequestValidationError{}

// Validate checks the field values on ListContestProblemsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListContestProblemsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListContestProblemsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListContestProblemsResponseMultiError, or nil if none found.
func (m *ListContestProblemsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListContestProblemsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListContestProblemsResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListContestProblemsResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListContestProblemsResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListContestProblemsResponseMultiError(errors)
	}

	return nil
}

// ListContestProblemsResponseMultiError is an error wrapping multiple
// validation errors returned by ListContestProblemsResponse.ValidateAll() if
// the designated constraints aren't met.
type ListContestProblemsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListContestProblemsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListContestProblemsResponseMultiError) AllErrors() []error { return m }

// ListContestProblemsResponseValidationError is the validation error returned
// by ListContestProblemsResponse.Validate if the designated constraints
// aren't met.
type ListContestProblemsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListContestProblemsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListContestProblemsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListContestProblemsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListContestProblemsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListContestProblemsResponseValidationError) ErrorName() string {
	return "ListContestProblemsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListContestProblemsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListContestProblemsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListContestProblemsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListContestProblemsResponseValidationError{}

// Validate checks the field values on GetContestProblemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetContestProblemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetContestProblemRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetContestProblemRequestMultiError, or nil if none found.
func (m *GetContestProblemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetContestProblemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Number

	if len(errors) > 0 {
		return GetContestProblemRequestMultiError(errors)
	}

	return nil
}

// GetContestProblemRequestMultiError is an error wrapping multiple validation
// errors returned by GetContestProblemRequest.ValidateAll() if the designated
// constraints aren't met.
type GetContestProblemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetContestProblemRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetContestProblemRequestMultiError) AllErrors() []error { return m }

// GetContestProblemRequestValidationError is the validation error returned by
// GetContestProblemRequest.Validate if the designated constraints aren't met.
type GetContestProblemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetContestProblemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetContestProblemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetContestProblemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetContestProblemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetContestProblemRequestValidationError) ErrorName() string {
	return "GetContestProblemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetContestProblemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetContestProblemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetContestProblemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetContestProblemRequestValidationError{}

// Validate checks the field values on CreateContestRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateContestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateContestRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateContestRequestMultiError, or nil if none found.
func (m *CreateContestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateContestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for GroupId

	if all {
		switch v := interface{}(m.GetStartTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateContestRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateContestRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateContestRequestValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateContestRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateContestRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateContestRequestValidationError{
				field:  "EndTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateContestRequestMultiError(errors)
	}

	return nil
}

// CreateContestRequestMultiError is an error wrapping multiple validation
// errors returned by CreateContestRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateContestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateContestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateContestRequestMultiError) AllErrors() []error { return m }

// CreateContestRequestValidationError is the validation error returned by
// CreateContestRequest.Validate if the designated constraints aren't met.
type CreateContestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateContestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateContestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateContestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateContestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateContestRequestValidationError) ErrorName() string {
	return "CreateContestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateContestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateContestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateContestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateContestRequestValidationError{}

// Validate checks the field values on ContestProblem with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ContestProblem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContestProblem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ContestProblemMultiError,
// or nil if none found.
func (m *ContestProblem) ValidateAll() error {
	return m.validate(true)
}

func (m *ContestProblem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Number

	// no validation rules for ContestId

	// no validation rules for ProblemId

	// no validation rules for SubmitCount

	// no validation rules for AcceptedCount

	// no validation rules for TimeLimit

	// no validation rules for MemoryLimit

	// no validation rules for Source

	for idx, item := range m.GetStatements() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ContestProblemValidationError{
						field:  fmt.Sprintf("Statements[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ContestProblemValidationError{
						field:  fmt.Sprintf("Statements[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ContestProblemValidationError{
					field:  fmt.Sprintf("Statements[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetSampleTests() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ContestProblemValidationError{
						field:  fmt.Sprintf("SampleTests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ContestProblemValidationError{
						field:  fmt.Sprintf("SampleTests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ContestProblemValidationError{
					field:  fmt.Sprintf("SampleTests[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Status

	if len(errors) > 0 {
		return ContestProblemMultiError(errors)
	}

	return nil
}

// ContestProblemMultiError is an error wrapping multiple validation errors
// returned by ContestProblem.ValidateAll() if the designated constraints
// aren't met.
type ContestProblemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContestProblemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContestProblemMultiError) AllErrors() []error { return m }

// ContestProblemValidationError is the validation error returned by
// ContestProblem.Validate if the designated constraints aren't met.
type ContestProblemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContestProblemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContestProblemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContestProblemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContestProblemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContestProblemValidationError) ErrorName() string { return "ContestProblemValidationError" }

// Error satisfies the builtin error interface
func (e ContestProblemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContestProblem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContestProblemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContestProblemValidationError{}

// Validate checks the field values on CreateContestProblemRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateContestProblemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateContestProblemRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateContestProblemRequestMultiError, or nil if none found.
func (m *CreateContestProblemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateContestProblemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ProblemId

	if len(errors) > 0 {
		return CreateContestProblemRequestMultiError(errors)
	}

	return nil
}

// CreateContestProblemRequestMultiError is an error wrapping multiple
// validation errors returned by CreateContestProblemRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateContestProblemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateContestProblemRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateContestProblemRequestMultiError) AllErrors() []error { return m }

// CreateContestProblemRequestValidationError is the validation error returned
// by CreateContestProblemRequest.Validate if the designated constraints
// aren't met.
type CreateContestProblemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateContestProblemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateContestProblemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateContestProblemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateContestProblemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateContestProblemRequestValidationError) ErrorName() string {
	return "CreateContestProblemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateContestProblemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateContestProblemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateContestProblemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateContestProblemRequestValidationError{}

// Validate checks the field values on DeleteContestProblemRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteContestProblemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteContestProblemRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteContestProblemRequestMultiError, or nil if none found.
func (m *DeleteContestProblemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteContestProblemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Number

	if len(errors) > 0 {
		return DeleteContestProblemRequestMultiError(errors)
	}

	return nil
}

// DeleteContestProblemRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteContestProblemRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteContestProblemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteContestProblemRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteContestProblemRequestMultiError) AllErrors() []error { return m }

// DeleteContestProblemRequestValidationError is the validation error returned
// by DeleteContestProblemRequest.Validate if the designated constraints
// aren't met.
type DeleteContestProblemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteContestProblemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteContestProblemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteContestProblemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteContestProblemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteContestProblemRequestValidationError) ErrorName() string {
	return "DeleteContestProblemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteContestProblemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteContestProblemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteContestProblemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteContestProblemRequestValidationError{}

// Validate checks the field values on ContestUser with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ContestUser) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContestUser with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ContestUserMultiError, or
// nil if none found.
func (m *ContestUser) ValidateAll() error {
	return m.validate(true)
}

func (m *ContestUser) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for UserId

	// no validation rules for UserNickname

	if all {
		switch v := interface{}(m.GetVirtualStart()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ContestUserValidationError{
					field:  "VirtualStart",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ContestUserValidationError{
					field:  "VirtualStart",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVirtualStart()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ContestUserValidationError{
				field:  "VirtualStart",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Role

	if len(errors) > 0 {
		return ContestUserMultiError(errors)
	}

	return nil
}

// ContestUserMultiError is an error wrapping multiple validation errors
// returned by ContestUser.ValidateAll() if the designated constraints aren't met.
type ContestUserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContestUserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContestUserMultiError) AllErrors() []error { return m }

// ContestUserValidationError is the validation error returned by
// ContestUser.Validate if the designated constraints aren't met.
type ContestUserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContestUserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContestUserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContestUserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContestUserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContestUserValidationError) ErrorName() string { return "ContestUserValidationError" }

// Error satisfies the builtin error interface
func (e ContestUserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContestUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContestUserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContestUserValidationError{}

// Validate checks the field values on ListContestUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListContestUsersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListContestUsersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListContestUsersRequestMultiError, or nil if none found.
func (m *ListContestUsersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListContestUsersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ContestId

	// no validation rules for Name

	// no validation rules for OfficialContest

	// no validation rules for Page

	// no validation rules for PerPage

	if m.Role != nil {
		// no validation rules for Role
	}

	if len(errors) > 0 {
		return ListContestUsersRequestMultiError(errors)
	}

	return nil
}

// ListContestUsersRequestMultiError is an error wrapping multiple validation
// errors returned by ListContestUsersRequest.ValidateAll() if the designated
// constraints aren't met.
type ListContestUsersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListContestUsersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListContestUsersRequestMultiError) AllErrors() []error { return m }

// ListContestUsersRequestValidationError is the validation error returned by
// ListContestUsersRequest.Validate if the designated constraints aren't met.
type ListContestUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListContestUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListContestUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListContestUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListContestUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListContestUsersRequestValidationError) ErrorName() string {
	return "ListContestUsersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListContestUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListContestUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListContestUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListContestUsersRequestValidationError{}

// Validate checks the field values on ListContestUsersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListContestUsersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListContestUsersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListContestUsersResponseMultiError, or nil if none found.
func (m *ListContestUsersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListContestUsersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListContestUsersResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListContestUsersResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListContestUsersResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListContestUsersResponseMultiError(errors)
	}

	return nil
}

// ListContestUsersResponseMultiError is an error wrapping multiple validation
// errors returned by ListContestUsersResponse.ValidateAll() if the designated
// constraints aren't met.
type ListContestUsersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListContestUsersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListContestUsersResponseMultiError) AllErrors() []error { return m }

// ListContestUsersResponseValidationError is the validation error returned by
// ListContestUsersResponse.Validate if the designated constraints aren't met.
type ListContestUsersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListContestUsersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListContestUsersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListContestUsersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListContestUsersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListContestUsersResponseValidationError) ErrorName() string {
	return "ListContestUsersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListContestUsersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListContestUsersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListContestUsersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListContestUsersResponseValidationError{}

// Validate checks the field values on CreateContestUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateContestUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateContestUserRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateContestUserRequestMultiError, or nil if none found.
func (m *CreateContestUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateContestUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ContestId

	// no validation rules for InvitationCode

	if utf8.RuneCountInString(m.GetName()) > 64 {
		err := CreateContestUserRequestValidationError{
			field:  "Name",
			reason: "value length must be at most 64 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateContestUserRequestMultiError(errors)
	}

	return nil
}

// CreateContestUserRequestMultiError is an error wrapping multiple validation
// errors returned by CreateContestUserRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateContestUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateContestUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateContestUserRequestMultiError) AllErrors() []error { return m }

// CreateContestUserRequestValidationError is the validation error returned by
// CreateContestUserRequest.Validate if the designated constraints aren't met.
type CreateContestUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateContestUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateContestUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateContestUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateContestUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateContestUserRequestValidationError) ErrorName() string {
	return "CreateContestUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateContestUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateContestUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateContestUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateContestUserRequestValidationError{}

// Validate checks the field values on BatchCreateContestUsersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchCreateContestUsersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchCreateContestUsersRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// BatchCreateContestUsersRequestMultiError, or nil if none found.
func (m *BatchCreateContestUsersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchCreateContestUsersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BatchCreateContestUsersRequestValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BatchCreateContestUsersRequestValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BatchCreateContestUsersRequestValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Role

	// no validation rules for ContestId

	if len(errors) > 0 {
		return BatchCreateContestUsersRequestMultiError(errors)
	}

	return nil
}

// BatchCreateContestUsersRequestMultiError is an error wrapping multiple
// validation errors returned by BatchCreateContestUsersRequest.ValidateAll()
// if the designated constraints aren't met.
type BatchCreateContestUsersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchCreateContestUsersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchCreateContestUsersRequestMultiError) AllErrors() []error { return m }

// BatchCreateContestUsersRequestValidationError is the validation error
// returned by BatchCreateContestUsersRequest.Validate if the designated
// constraints aren't met.
type BatchCreateContestUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchCreateContestUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchCreateContestUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchCreateContestUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchCreateContestUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchCreateContestUsersRequestValidationError) ErrorName() string {
	return "BatchCreateContestUsersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BatchCreateContestUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchCreateContestUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchCreateContestUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchCreateContestUsersRequestValidationError{}

// Validate checks the field values on BatchCreateContestUsersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchCreateContestUsersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchCreateContestUsersResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// BatchCreateContestUsersResponseMultiError, or nil if none found.
func (m *BatchCreateContestUsersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchCreateContestUsersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSuccess() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BatchCreateContestUsersResponseValidationError{
						field:  fmt.Sprintf("Success[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BatchCreateContestUsersResponseValidationError{
						field:  fmt.Sprintf("Success[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BatchCreateContestUsersResponseValidationError{
					field:  fmt.Sprintf("Success[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetFailed() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BatchCreateContestUsersResponseValidationError{
						field:  fmt.Sprintf("Failed[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BatchCreateContestUsersResponseValidationError{
						field:  fmt.Sprintf("Failed[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BatchCreateContestUsersResponseValidationError{
					field:  fmt.Sprintf("Failed[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return BatchCreateContestUsersResponseMultiError(errors)
	}

	return nil
}

// BatchCreateContestUsersResponseMultiError is an error wrapping multiple
// validation errors returned by BatchCreateContestUsersResponse.ValidateAll()
// if the designated constraints aren't met.
type BatchCreateContestUsersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchCreateContestUsersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchCreateContestUsersResponseMultiError) AllErrors() []error { return m }

// BatchCreateContestUsersResponseValidationError is the validation error
// returned by BatchCreateContestUsersResponse.Validate if the designated
// constraints aren't met.
type BatchCreateContestUsersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchCreateContestUsersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchCreateContestUsersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchCreateContestUsersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchCreateContestUsersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchCreateContestUsersResponseValidationError) ErrorName() string {
	return "BatchCreateContestUsersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BatchCreateContestUsersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchCreateContestUsersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchCreateContestUsersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchCreateContestUsersResponseValidationError{}

// Validate checks the field values on UpdateContestUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateContestUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateContestUserRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateContestUserRequestMultiError, or nil if none found.
func (m *UpdateContestUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateContestUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ContestId

	// no validation rules for UserId

	// no validation rules for Name

	// no validation rules for Role

	if len(errors) > 0 {
		return UpdateContestUserRequestMultiError(errors)
	}

	return nil
}

// UpdateContestUserRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateContestUserRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateContestUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateContestUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateContestUserRequestMultiError) AllErrors() []error { return m }

// UpdateContestUserRequestValidationError is the validation error returned by
// UpdateContestUserRequest.Validate if the designated constraints aren't met.
type UpdateContestUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateContestUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateContestUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateContestUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateContestUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateContestUserRequestValidationError) ErrorName() string {
	return "UpdateContestUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateContestUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateContestUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateContestUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateContestUserRequestValidationError{}

// Validate checks the field values on ListContestAllSubmissionsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListContestAllSubmissionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListContestAllSubmissionsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListContestAllSubmissionsRequestMultiError, or nil if none found.
func (m *ListContestAllSubmissionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListContestAllSubmissionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ContestId

	// no validation rules for OfficialContest

	if len(errors) > 0 {
		return ListContestAllSubmissionsRequestMultiError(errors)
	}

	return nil
}

// ListContestAllSubmissionsRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListContestAllSubmissionsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListContestAllSubmissionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListContestAllSubmissionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListContestAllSubmissionsRequestMultiError) AllErrors() []error { return m }

// ListContestAllSubmissionsRequestValidationError is the validation error
// returned by ListContestAllSubmissionsRequest.Validate if the designated
// constraints aren't met.
type ListContestAllSubmissionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListContestAllSubmissionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListContestAllSubmissionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListContestAllSubmissionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListContestAllSubmissionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListContestAllSubmissionsRequestValidationError) ErrorName() string {
	return "ListContestAllSubmissionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListContestAllSubmissionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListContestAllSubmissionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListContestAllSubmissionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListContestAllSubmissionsRequestValidationError{}

// Validate checks the field values on ListContestAllSubmissionsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListContestAllSubmissionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListContestAllSubmissionsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListContestAllSubmissionsResponseMultiError, or nil if none found.
func (m *ListContestAllSubmissionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListContestAllSubmissionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListContestAllSubmissionsResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListContestAllSubmissionsResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListContestAllSubmissionsResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListContestAllSubmissionsResponseMultiError(errors)
	}

	return nil
}

// ListContestAllSubmissionsResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListContestAllSubmissionsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListContestAllSubmissionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListContestAllSubmissionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListContestAllSubmissionsResponseMultiError) AllErrors() []error { return m }

// ListContestAllSubmissionsResponseValidationError is the validation error
// returned by ListContestAllSubmissionsResponse.Validate if the designated
// constraints aren't met.
type ListContestAllSubmissionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListContestAllSubmissionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListContestAllSubmissionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListContestAllSubmissionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListContestAllSubmissionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListContestAllSubmissionsResponseValidationError) ErrorName() string {
	return "ListContestAllSubmissionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListContestAllSubmissionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListContestAllSubmissionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListContestAllSubmissionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListContestAllSubmissionsResponseValidationError{}

// Validate checks the field values on ListContestSubmissionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListContestSubmissionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListContestSubmissionsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListContestSubmissionsRequestMultiError, or nil if none found.
func (m *ListContestSubmissionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListContestSubmissionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ContestId

	// no validation rules for UserId

	// no validation rules for Page

	// no validation rules for PerPage

	if m.Problem != nil {
		// no validation rules for Problem
	}

	if len(errors) > 0 {
		return ListContestSubmissionsRequestMultiError(errors)
	}

	return nil
}

// ListContestSubmissionsRequestMultiError is an error wrapping multiple
// validation errors returned by ListContestSubmissionsRequest.ValidateAll()
// if the designated constraints aren't met.
type ListContestSubmissionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListContestSubmissionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListContestSubmissionsRequestMultiError) AllErrors() []error { return m }

// ListContestSubmissionsRequestValidationError is the validation error
// returned by ListContestSubmissionsRequest.Validate if the designated
// constraints aren't met.
type ListContestSubmissionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListContestSubmissionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListContestSubmissionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListContestSubmissionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListContestSubmissionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListContestSubmissionsRequestValidationError) ErrorName() string {
	return "ListContestSubmissionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListContestSubmissionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListContestSubmissionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListContestSubmissionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListContestSubmissionsRequestValidationError{}

// Validate checks the field values on ListContestSubmissionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListContestSubmissionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListContestSubmissionsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListContestSubmissionsResponseMultiError, or nil if none found.
func (m *ListContestSubmissionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListContestSubmissionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListContestSubmissionsResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListContestSubmissionsResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListContestSubmissionsResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListContestSubmissionsResponseMultiError(errors)
	}

	return nil
}

// ListContestSubmissionsResponseMultiError is an error wrapping multiple
// validation errors returned by ListContestSubmissionsResponse.ValidateAll()
// if the designated constraints aren't met.
type ListContestSubmissionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListContestSubmissionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListContestSubmissionsResponseMultiError) AllErrors() []error { return m }

// ListContestSubmissionsResponseValidationError is the validation error
// returned by ListContestSubmissionsResponse.Validate if the designated
// constraints aren't met.
type ListContestSubmissionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListContestSubmissionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListContestSubmissionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListContestSubmissionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListContestSubmissionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListContestSubmissionsResponseValidationError) ErrorName() string {
	return "ListContestSubmissionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListContestSubmissionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListContestSubmissionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListContestSubmissionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListContestSubmissionsResponseValidationError{}

// Validate checks the field values on ContestProblemLanguage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContestProblemLanguage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContestProblemLanguage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContestProblemLanguageMultiError, or nil if none found.
func (m *ContestProblemLanguage) ValidateAll() error {
	return m.validate(true)
}

func (m *ContestProblemLanguage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for LanguageCode

	// no validation rules for LanguageName

	// no validation rules for UserContent

	// no validation rules for MainContent

	if len(errors) > 0 {
		return ContestProblemLanguageMultiError(errors)
	}

	return nil
}

// ContestProblemLanguageMultiError is an error wrapping multiple validation
// errors returned by ContestProblemLanguage.ValidateAll() if the designated
// constraints aren't met.
type ContestProblemLanguageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContestProblemLanguageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContestProblemLanguageMultiError) AllErrors() []error { return m }

// ContestProblemLanguageValidationError is the validation error returned by
// ContestProblemLanguage.Validate if the designated constraints aren't met.
type ContestProblemLanguageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContestProblemLanguageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContestProblemLanguageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContestProblemLanguageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContestProblemLanguageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContestProblemLanguageValidationError) ErrorName() string {
	return "ContestProblemLanguageValidationError"
}

// Error satisfies the builtin error interface
func (e ContestProblemLanguageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContestProblemLanguage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContestProblemLanguageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContestProblemLanguageValidationError{}

// Validate checks the field values on ListContestProblemLanguagesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListContestProblemLanguagesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListContestProblemLanguagesRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListContestProblemLanguagesRequestMultiError, or nil if none found.
func (m *ListContestProblemLanguagesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListContestProblemLanguagesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Number

	if len(errors) > 0 {
		return ListContestProblemLanguagesRequestMultiError(errors)
	}

	return nil
}

// ListContestProblemLanguagesRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListContestProblemLanguagesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListContestProblemLanguagesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListContestProblemLanguagesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListContestProblemLanguagesRequestMultiError) AllErrors() []error { return m }

// ListContestProblemLanguagesRequestValidationError is the validation error
// returned by ListContestProblemLanguagesRequest.Validate if the designated
// constraints aren't met.
type ListContestProblemLanguagesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListContestProblemLanguagesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListContestProblemLanguagesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListContestProblemLanguagesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListContestProblemLanguagesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListContestProblemLanguagesRequestValidationError) ErrorName() string {
	return "ListContestProblemLanguagesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListContestProblemLanguagesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListContestProblemLanguagesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListContestProblemLanguagesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListContestProblemLanguagesRequestValidationError{}

// Validate checks the field values on ListContestProblemLanguagesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListContestProblemLanguagesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListContestProblemLanguagesResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListContestProblemLanguagesResponseMultiError, or nil if none found.
func (m *ListContestProblemLanguagesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListContestProblemLanguagesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListContestProblemLanguagesResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListContestProblemLanguagesResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListContestProblemLanguagesResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListContestProblemLanguagesResponseMultiError(errors)
	}

	return nil
}

// ListContestProblemLanguagesResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListContestProblemLanguagesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListContestProblemLanguagesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListContestProblemLanguagesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListContestProblemLanguagesResponseMultiError) AllErrors() []error { return m }

// ListContestProblemLanguagesResponseValidationError is the validation error
// returned by ListContestProblemLanguagesResponse.Validate if the designated
// constraints aren't met.
type ListContestProblemLanguagesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListContestProblemLanguagesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListContestProblemLanguagesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListContestProblemLanguagesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListContestProblemLanguagesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListContestProblemLanguagesResponseValidationError) ErrorName() string {
	return "ListContestProblemLanguagesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListContestProblemLanguagesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListContestProblemLanguagesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListContestProblemLanguagesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListContestProblemLanguagesResponseValidationError{}

// Validate checks the field values on GetContestProblemLanguageRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetContestProblemLanguageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetContestProblemLanguageRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetContestProblemLanguageRequestMultiError, or nil if none found.
func (m *GetContestProblemLanguageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetContestProblemLanguageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Number

	// no validation rules for Language

	if len(errors) > 0 {
		return GetContestProblemLanguageRequestMultiError(errors)
	}

	return nil
}

// GetContestProblemLanguageRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetContestProblemLanguageRequest.ValidateAll() if the designated
// constraints aren't met.
type GetContestProblemLanguageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetContestProblemLanguageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetContestProblemLanguageRequestMultiError) AllErrors() []error { return m }

// GetContestProblemLanguageRequestValidationError is the validation error
// returned by GetContestProblemLanguageRequest.Validate if the designated
// constraints aren't met.
type GetContestProblemLanguageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetContestProblemLanguageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetContestProblemLanguageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetContestProblemLanguageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetContestProblemLanguageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetContestProblemLanguageRequestValidationError) ErrorName() string {
	return "GetContestProblemLanguageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetContestProblemLanguageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetContestProblemLanguageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetContestProblemLanguageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetContestProblemLanguageRequestValidationError{}

// Validate checks the field values on Contest_Owner with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Contest_Owner) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Contest_Owner with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Contest_OwnerMultiError, or
// nil if none found.
func (m *Contest_Owner) ValidateAll() error {
	return m.validate(true)
}

func (m *Contest_Owner) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for UserNickname

	if len(errors) > 0 {
		return Contest_OwnerMultiError(errors)
	}

	return nil
}

// Contest_OwnerMultiError is an error wrapping multiple validation errors
// returned by Contest_Owner.ValidateAll() if the designated constraints
// aren't met.
type Contest_OwnerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Contest_OwnerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Contest_OwnerMultiError) AllErrors() []error { return m }

// Contest_OwnerValidationError is the validation error returned by
// Contest_Owner.Validate if the designated constraints aren't met.
type Contest_OwnerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Contest_OwnerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Contest_OwnerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Contest_OwnerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Contest_OwnerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Contest_OwnerValidationError) ErrorName() string { return "Contest_OwnerValidationError" }

// Error satisfies the builtin error interface
func (e Contest_OwnerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContest_Owner.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Contest_OwnerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Contest_OwnerValidationError{}

// Validate checks the field values on ContestProblem_Statement with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContestProblem_Statement) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContestProblem_Statement with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContestProblem_StatementMultiError, or nil if none found.
func (m *ContestProblem_Statement) ValidateAll() error {
	return m.validate(true)
}

func (m *ContestProblem_Statement) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ProblemId

	// no validation rules for Language

	// no validation rules for Name

	// no validation rules for Legend

	// no validation rules for Input

	// no validation rules for Output

	// no validation rules for Note

	if len(errors) > 0 {
		return ContestProblem_StatementMultiError(errors)
	}

	return nil
}

// ContestProblem_StatementMultiError is an error wrapping multiple validation
// errors returned by ContestProblem_Statement.ValidateAll() if the designated
// constraints aren't met.
type ContestProblem_StatementMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContestProblem_StatementMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContestProblem_StatementMultiError) AllErrors() []error { return m }

// ContestProblem_StatementValidationError is the validation error returned by
// ContestProblem_Statement.Validate if the designated constraints aren't met.
type ContestProblem_StatementValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContestProblem_StatementValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContestProblem_StatementValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContestProblem_StatementValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContestProblem_StatementValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContestProblem_StatementValidationError) ErrorName() string {
	return "ContestProblem_StatementValidationError"
}

// Error satisfies the builtin error interface
func (e ContestProblem_StatementValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContestProblem_Statement.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContestProblem_StatementValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContestProblem_StatementValidationError{}

// Validate checks the field values on ContestProblem_SampleTest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContestProblem_SampleTest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContestProblem_SampleTest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContestProblem_SampleTestMultiError, or nil if none found.
func (m *ContestProblem_SampleTest) ValidateAll() error {
	return m.validate(true)
}

func (m *ContestProblem_SampleTest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Input

	// no validation rules for Output

	if len(errors) > 0 {
		return ContestProblem_SampleTestMultiError(errors)
	}

	return nil
}

// ContestProblem_SampleTestMultiError is an error wrapping multiple validation
// errors returned by ContestProblem_SampleTest.ValidateAll() if the
// designated constraints aren't met.
type ContestProblem_SampleTestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContestProblem_SampleTestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContestProblem_SampleTestMultiError) AllErrors() []error { return m }

// ContestProblem_SampleTestValidationError is the validation error returned by
// ContestProblem_SampleTest.Validate if the designated constraints aren't met.
type ContestProblem_SampleTestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContestProblem_SampleTestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContestProblem_SampleTestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContestProblem_SampleTestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContestProblem_SampleTestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContestProblem_SampleTestValidationError) ErrorName() string {
	return "ContestProblem_SampleTestValidationError"
}

// Error satisfies the builtin error interface
func (e ContestProblem_SampleTestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContestProblem_SampleTest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContestProblem_SampleTestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContestProblem_SampleTestValidationError{}

// Validate checks the field values on
// BatchCreateContestUsersRequest_ContestUser with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BatchCreateContestUsersRequest_ContestUser) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// BatchCreateContestUsersRequest_ContestUser with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// BatchCreateContestUsersRequest_ContestUserMultiError, or nil if none found.
func (m *BatchCreateContestUsersRequest_ContestUser) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchCreateContestUsersRequest_ContestUser) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for Name

	if len(errors) > 0 {
		return BatchCreateContestUsersRequest_ContestUserMultiError(errors)
	}

	return nil
}

// BatchCreateContestUsersRequest_ContestUserMultiError is an error wrapping
// multiple validation errors returned by
// BatchCreateContestUsersRequest_ContestUser.ValidateAll() if the designated
// constraints aren't met.
type BatchCreateContestUsersRequest_ContestUserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchCreateContestUsersRequest_ContestUserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchCreateContestUsersRequest_ContestUserMultiError) AllErrors() []error { return m }

// BatchCreateContestUsersRequest_ContestUserValidationError is the validation
// error returned by BatchCreateContestUsersRequest_ContestUser.Validate if
// the designated constraints aren't met.
type BatchCreateContestUsersRequest_ContestUserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchCreateContestUsersRequest_ContestUserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchCreateContestUsersRequest_ContestUserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchCreateContestUsersRequest_ContestUserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchCreateContestUsersRequest_ContestUserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchCreateContestUsersRequest_ContestUserValidationError) ErrorName() string {
	return "BatchCreateContestUsersRequest_ContestUserValidationError"
}

// Error satisfies the builtin error interface
func (e BatchCreateContestUsersRequest_ContestUserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchCreateContestUsersRequest_ContestUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchCreateContestUsersRequest_ContestUserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchCreateContestUsersRequest_ContestUserValidationError{}

// Validate checks the field values on
// BatchCreateContestUsersResponse_ContestUser with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BatchCreateContestUsersResponse_ContestUser) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// BatchCreateContestUsersResponse_ContestUser with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// BatchCreateContestUsersResponse_ContestUserMultiError, or nil if none found.
func (m *BatchCreateContestUsersResponse_ContestUser) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchCreateContestUsersResponse_ContestUser) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for Name

	// no validation rules for Reason

	if len(errors) > 0 {
		return BatchCreateContestUsersResponse_ContestUserMultiError(errors)
	}

	return nil
}

// BatchCreateContestUsersResponse_ContestUserMultiError is an error wrapping
// multiple validation errors returned by
// BatchCreateContestUsersResponse_ContestUser.ValidateAll() if the designated
// constraints aren't met.
type BatchCreateContestUsersResponse_ContestUserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchCreateContestUsersResponse_ContestUserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchCreateContestUsersResponse_ContestUserMultiError) AllErrors() []error { return m }

// BatchCreateContestUsersResponse_ContestUserValidationError is the validation
// error returned by BatchCreateContestUsersResponse_ContestUser.Validate if
// the designated constraints aren't met.
type BatchCreateContestUsersResponse_ContestUserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchCreateContestUsersResponse_ContestUserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchCreateContestUsersResponse_ContestUserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchCreateContestUsersResponse_ContestUserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchCreateContestUsersResponse_ContestUserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchCreateContestUsersResponse_ContestUserValidationError) ErrorName() string {
	return "BatchCreateContestUsersResponse_ContestUserValidationError"
}

// Error satisfies the builtin error interface
func (e BatchCreateContestUsersResponse_ContestUserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchCreateContestUsersResponse_ContestUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchCreateContestUsersResponse_ContestUserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchCreateContestUsersResponse_ContestUserValidationError{}

// Validate checks the field values on
// ListContestAllSubmissionsResponse_Submission with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListContestAllSubmissionsResponse_Submission) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListContestAllSubmissionsResponse_Submission with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ListContestAllSubmissionsResponse_SubmissionMultiError, or nil if none found.
func (m *ListContestAllSubmissionsResponse_Submission) ValidateAll() error {
	return m.validate(true)
}

func (m *ListContestAllSubmissionsResponse_Submission) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Problem

	// no validation rules for Status

	// no validation rules for UserId

	// no validation rules for Score

	if len(errors) > 0 {
		return ListContestAllSubmissionsResponse_SubmissionMultiError(errors)
	}

	return nil
}

// ListContestAllSubmissionsResponse_SubmissionMultiError is an error wrapping
// multiple validation errors returned by
// ListContestAllSubmissionsResponse_Submission.ValidateAll() if the
// designated constraints aren't met.
type ListContestAllSubmissionsResponse_SubmissionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListContestAllSubmissionsResponse_SubmissionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListContestAllSubmissionsResponse_SubmissionMultiError) AllErrors() []error { return m }

// ListContestAllSubmissionsResponse_SubmissionValidationError is the
// validation error returned by
// ListContestAllSubmissionsResponse_Submission.Validate if the designated
// constraints aren't met.
type ListContestAllSubmissionsResponse_SubmissionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListContestAllSubmissionsResponse_SubmissionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListContestAllSubmissionsResponse_SubmissionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListContestAllSubmissionsResponse_SubmissionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListContestAllSubmissionsResponse_SubmissionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListContestAllSubmissionsResponse_SubmissionValidationError) ErrorName() string {
	return "ListContestAllSubmissionsResponse_SubmissionValidationError"
}

// Error satisfies the builtin error interface
func (e ListContestAllSubmissionsResponse_SubmissionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListContestAllSubmissionsResponse_Submission.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListContestAllSubmissionsResponse_SubmissionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListContestAllSubmissionsResponse_SubmissionValidationError{}

// Validate checks the field values on ListContestSubmissionsResponse_User with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListContestSubmissionsResponse_User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListContestSubmissionsResponse_User
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListContestSubmissionsResponse_UserMultiError, or nil if none found.
func (m *ListContestSubmissionsResponse_User) ValidateAll() error {
	return m.validate(true)
}

func (m *ListContestSubmissionsResponse_User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Nickname

	if len(errors) > 0 {
		return ListContestSubmissionsResponse_UserMultiError(errors)
	}

	return nil
}

// ListContestSubmissionsResponse_UserMultiError is an error wrapping multiple
// validation errors returned by
// ListContestSubmissionsResponse_User.ValidateAll() if the designated
// constraints aren't met.
type ListContestSubmissionsResponse_UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListContestSubmissionsResponse_UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListContestSubmissionsResponse_UserMultiError) AllErrors() []error { return m }

// ListContestSubmissionsResponse_UserValidationError is the validation error
// returned by ListContestSubmissionsResponse_User.Validate if the designated
// constraints aren't met.
type ListContestSubmissionsResponse_UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListContestSubmissionsResponse_UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListContestSubmissionsResponse_UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListContestSubmissionsResponse_UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListContestSubmissionsResponse_UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListContestSubmissionsResponse_UserValidationError) ErrorName() string {
	return "ListContestSubmissionsResponse_UserValidationError"
}

// Error satisfies the builtin error interface
func (e ListContestSubmissionsResponse_UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListContestSubmissionsResponse_User.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListContestSubmissionsResponse_UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListContestSubmissionsResponse_UserValidationError{}

// Validate checks the field values on
// ListContestSubmissionsResponse_Submission with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListContestSubmissionsResponse_Submission) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListContestSubmissionsResponse_Submission with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ListContestSubmissionsResponse_SubmissionMultiError, or nil if none found.
func (m *ListContestSubmissionsResponse_Submission) ValidateAll() error {
	return m.validate(true)
}

func (m *ListContestSubmissionsResponse_Submission) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ProblemNumber

	// no validation rules for ProblemName

	// no validation rules for Verdict

	// no validation rules for Time

	// no validation rules for Memory

	// no validation rules for UserId

	// no validation rules for Score

	// no validation rules for Language

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListContestSubmissionsResponse_SubmissionValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListContestSubmissionsResponse_SubmissionValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListContestSubmissionsResponse_SubmissionValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListContestSubmissionsResponse_SubmissionValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListContestSubmissionsResponse_SubmissionValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListContestSubmissionsResponse_SubmissionValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListContestSubmissionsResponse_SubmissionMultiError(errors)
	}

	return nil
}

// ListContestSubmissionsResponse_SubmissionMultiError is an error wrapping
// multiple validation errors returned by
// ListContestSubmissionsResponse_Submission.ValidateAll() if the designated
// constraints aren't met.
type ListContestSubmissionsResponse_SubmissionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListContestSubmissionsResponse_SubmissionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListContestSubmissionsResponse_SubmissionMultiError) AllErrors() []error { return m }

// ListContestSubmissionsResponse_SubmissionValidationError is the validation
// error returned by ListContestSubmissionsResponse_Submission.Validate if the
// designated constraints aren't met.
type ListContestSubmissionsResponse_SubmissionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListContestSubmissionsResponse_SubmissionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListContestSubmissionsResponse_SubmissionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListContestSubmissionsResponse_SubmissionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListContestSubmissionsResponse_SubmissionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListContestSubmissionsResponse_SubmissionValidationError) ErrorName() string {
	return "ListContestSubmissionsResponse_SubmissionValidationError"
}

// Error satisfies the builtin error interface
func (e ListContestSubmissionsResponse_SubmissionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListContestSubmissionsResponse_Submission.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListContestSubmissionsResponse_SubmissionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListContestSubmissionsResponse_SubmissionValidationError{}
