syntax = "proto3";

package jnoj.interface.v1;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "validate/validate.proto";

option go_package = "api/interface/v1;v1";

service ProblemService {
    // 题目列表
    rpc ListProblems (ListProblemsRequest) returns (ListProblemsResponse) {
        option (google.api.http) = {
            get: "/problems"
        };
    };
    // 题目详情
    rpc GetProblem (GetProblemRequest) returns (Problem) {
        option (google.api.http) = {
            get: "/problems/{id}"
        };
    };
    // 创建题目
    rpc CreateProblem (CreateProblemRequest) returns (CreateProblemResponse) {
        option (google.api.http) = {
            post: "/problems"
            body: "*"
        };
    };
    // 修改题目
    rpc UpdateProblem (UpdateProblemRequest) returns (Problem) {
        option (google.api.http) = {
            put: "/problems/{id}"
            body: "*"
        };
    };
    // 获取题目描述列表
    rpc ListProblemStatements (ListProblemStatementsRequest) returns (ListProblemStatementsResponse) {
        option (google.api.http) = {
            get: "/problems/{id}/statements"
        };
    };
    // 获取题目描述详情
    rpc GetProblemStatement (GetProblemStatementRequest) returns (ProblemStatement) {
        option (google.api.http) = {
            get: "/problems/{id}/statements"
        };
    };
    // 创建题目描述
    rpc CreateProblemStatement (CreateProblemStatementRequest) returns (ProblemStatement) {
        option (google.api.http) = {
            post: "/problems/{id}/statements"
            body: "*"
        };
    };
    // 更新题目描述
    rpc UpdateProblemStatement (UpdateProblemStatementRequest) returns (ProblemStatement) {
        option (google.api.http) = {
            put: "/problems/{id}/statements/{sid}"
            body: "*"
        };
    }
    // 删除题目描述
    rpc DeleteProblemStatement (DeleteProblemStatementRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/problems/{id}/statements/{sid}"
        };
    }
    // 获取题目测试点列表
    rpc ListProblemTests (ListProblemTestsRequest) returns (ListProblemTestsResponse) {
        option (google.api.http) = {
            get: "/problems/{id}/tests"
        };
    };
    // 获取题目测试点详情
    rpc GetProblemTest (GetProblemTestRequest) returns (ProblemTest) {
        option (google.api.http) = {
            get: "/problems/{id}/tests"
        };
    };
    // 创建题目测试点
    rpc CreateProblemTest (CreateProblemTestRequest) returns (ProblemTest) {
        option (google.api.http) = {
            post: "/problems/{id}/tests"
            body: "*"
        };
    };
    // 更新题目测试点
    rpc UpdateProblemTest (UpdateProblemTestRequest) returns (ProblemTest) {
        option (google.api.http) = {
            put: "/problems/{id}/tests/{tid}"
            body: "*"
        };
    }
    // 删除题目测试点
    rpc DeleteProblemTest (DeleteProblemTestRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/problems/{id}/tests/{tid}"
        };
    }
    // 对题目测试点进行排序
    rpc SortProblemTests (SortProblemTestsRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/problems/{id}/test/sort"
            body: "*"
        };
    };
    // 获取题目文件列表
    rpc ListProblemFiles (ListProblemFilesRequest) returns (ListProblemFilesResponse) {
        option (google.api.http) = {
            get: "/problems/{id}/files"
        };
    };
    // 获取题目文件详情
    rpc GetProblemFile (GetProblemFileRequest) returns (ProblemFile) {
        option (google.api.http) = {
            get: "/problems/{id}/files/{sid}"
        };
    };
    // 创建题目文件
    rpc CreateProblemFile (CreateProblemFileRequest) returns (ProblemFile) {
        option (google.api.http) = {
            post: "/problems/{id}/files"
            body: "*"
        };
    };
    // 更新题目文件
    rpc UpdateProblemFile (UpdateProblemFileRequest) returns (ProblemFile) {
        option (google.api.http) = {
            put: "/problems/{id}/files/{sid}"
            body: "*"
        };
    }
    // 删除题目文件
    rpc DeleteProblemFile (DeleteProblemFileRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/problems/{id}/files/{sid}"
        };
    }
    // 运行题目文件
    rpc RunProblemFile (RunProblemFileRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/problem_files/{sid}/run"
            body: "*"
        };
    }
    // 语言列表
    rpc ListProblemLanguages (ListProblemLanguagesRequest) returns (ListProblemLanguagesResponse) {
        option (google.api.http) = {
            get: "/problems/{problem_id}/languages"
        };
    }
    // 语言文件详情
    rpc GetProblemLanguage (GetProblemLanguageRequest) returns (ProblemLanguage) {
        option (google.api.http) = {
            get: "/problems/{problem_id}/languages/{id}"
        };
    }
    // 创建语言文件
    rpc CreateProblemLanguage (CreateProblemLanguageRequest) returns (ProblemLanguage) {
        option (google.api.http) = {
            post: "/problems/{problem_id}/languages"
            body: "*"
        };
    }
    // 修改语言文件
    rpc UpdateProblemLanguage (UpdateProblemLanguageRequest) returns (ProblemLanguage) {
        option (google.api.http) = {
            put: "/problems/{problem_id}/languages/{id}"
            body: "*"
        };
    }
    // 删除语言文件
    rpc DeleteProblemLanguage (DeleteProblemLanguageRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/problems/{problem_id}/languages/{id}"
        };
    }
    // 获取std裁判程序
    rpc ListProblemStdCheckers (ListProblemStdCheckersRequest) returns (ListProblemStdCheckersResponse) {
        option (google.api.http) = {
            get: "/problems/{id}/std_checkers"
        };
    }
    // 设置裁判程序
    rpc UpdateProblemChecker (UpdateProblemCheckerRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/problems/{id}/checkers"
            body: "*"
        };
    }
    // 验证题目完整性
    rpc VerifyProblem (VerifyProblemRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/problems/{id}/verify"
            body: "*"
        };
    }
    // 打包题目
    rpc PackProblem (PackProblemRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/problems/{id}/pack"
            body: "*"
        };
    }
    // 获取题目验证状态
    rpc GetProblemVerification (GetProblemVerificationRequest) returns (ProblemVerification) {
        option (google.api.http) = {
            get: "/problems/{id}/verification"
        };
    }
    // 题单列表
    rpc ListProblemsets (ListProblemsetsRequest) returns (ListProblemsetsResponse) {
        option (google.api.http) = {
            get: "/problemsets"
        };
    }
    // 获取题单
    rpc GetProblemset (GetProblemsetRequest) returns (Problemset) {
        option (google.api.http) = {
            get: "/problemsets/{id}"
        };
    }
    // 创建题单
    rpc CreateProblemset (CreateProblemsetRequest) returns (Problemset) {
        option (google.api.http) = {
            post: "/problemsets"
            body: "*"
        };
    }
    // 删除题单
    rpc DeleteProblemset (DeleteProblemsetRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/problemsets/{id}"
        };
    }
    // 修改题单
    rpc UpdateProblemset (UpdateProblemsetRequest) returns (Problemset) {
        option (google.api.http) = {
            put: "/problemsets/{id}"
            body: "*"
        };
    }
    // 获取题单的题目
    rpc ListProblemsetProblems (ListProblemsetProblemsRequest) returns (ListProblemsetProblemsResponse) {
        option (google.api.http) = {
            get: "/problemsets/{id}/problems"
        };
    }
    // 获取题单的题目
    rpc GetProblemsetProblem (GetProblemsetProblemRequest) returns (Problem) {
        option (google.api.http) = {
            get: "/problemsets/{id}/problems/{pid}"
        };
    }
    // 获取旁边的题目，上一题、下一题
    rpc GetProblemsetLateralProblem (GetProblemsetLateralProblemRequest) returns (GetProblemsetLateralProblemResponse) {
        option (google.api.http) = {
            get: "/problemsets/{id}/problems/{pid}/lateral"
        };
    };
    // 添加题目到题单
    rpc AddProblemToProblemset (AddProblemToProblemsetRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/problemsets/{id}/problems"
            body: "*"
        };
    }
    // 上传Excel，预览批量添加题目到题单的结果
    rpc BatchAddProblemToProblemsetPreview (BatchAddProblemToProblemsetPreviewRequest) returns (BatchAddProblemToProblemsetPreviewResponse) {
        option (google.api.http) = {
            post: "/problemsets/{id}/batch_problems_preview"
            body: "*"
        };
    }
    // 批量创建题单
    rpc BatchAddProblemToProblemset(BatchAddProblemToProblemsetRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/problemsets/{id}/batch_problems"
            body: "*"
        };
    }
    // 从题单中删除题目
    rpc DeleteProblemFromProblemset (DeleteProblemFromProblemsetRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/problemsets/{id}/problems/{problem_id}"
        };
    }
    // 对题单的题目进行排序
    rpc SortProblemsetProblems (SortProblemsetProblemsRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/problemsets/{id}/problem/sort"
            body: "*"
        };
    };
    // 下载题目
    rpc DownloadProblems (DownloadProblemsRequest) returns (DownloadProblemsResponse) {
        option (google.api.http) = {
            post: "/download_problems"
            body: "*"
        };
    };
}


// 题目类型：标准输入输出、函数题、客观题
enum ProblemType {
    DEFAULT = 0; // 标准输入输出
    FUNCTION = 1; // 函数题
    OBJECTIVE = 2; // 客观题
}

// 题目
message Problem {
    // 题目ID
    int32 id = 1;
    // 名称
    string name = 2;
    ProblemType type = 3;
    // 时间限制
    int32 time_limit = 4;
    // 内存限制
    int32 memory_limit = 5;
    // 题目描述
    repeated ProblemStatement statements = 6;
    int32 accepted_count = 7;
    int32 submit_count = 8;
    int32 status = 9;
    int32 checker_id = 10;
    // 题目来源
    string source = 11;
    repeated string tags = 12;
    int32 user_id = 13;
    string nickname = 14;
    bool allow_download = 15;
    // 样例
    message SampleTest {
        string input = 1;
        string output = 2;
    }
    repeated SampleTest sample_tests = 16;
    google.protobuf.Timestamp created_at = 17;
    google.protobuf.Timestamp updated_at = 19;
}

enum ProblemStatementType {
    CHOICE = 0; // 单选题
    MULTIPLE = 1; // 多选题
    FILLBLANK = 2; // 填空题
}

// 题目描述
message ProblemStatement {
    int32 id = 1;
    int32 problem_id = 2;
    string language = 3;
    string name = 4;
    string legend = 5;
    string input = 6;
    string output = 7;
    string note = 8;
    ProblemStatementType type = 9;
}

message ListProblemsRequest {
    int32 id = 1;
    string keyword = 2;
    enum Author {
        ALL = 0;
        ONLYME = 1;
    }
    Author author = 3;
    string username = 4;
    repeated int32 status = 5;
    repeated int32 type = 6;
    string filter = 7;
    optional string order_by = 8;
    int32 page = 9;
    int32 per_page = 10;
}

message ListProblemsResponse {
    repeated Problem data = 1; // 题目列表
    int64 total = 2; // 总数
}

message GetProblemRequest {
    int32 id = 1;
}

message CreateProblemRequest {
    // 题目名称
    string name = 1;
    // 题目类型
    ProblemType type = 2;
}

message CreateProblemResponse {
    // 题目ID
    int32 id = 1;
}

message UpdateProblemRequest {
    int32 id = 1;
    string name = 2;
    int64 time_limit = 3 [(validate.rules).int64 = {gte:250, lte: 15000}];
    int64 memory_limit = 4 [(validate.rules).int64 = {gte:4, lte: 1024}];
    int32 status = 5;
    string source = 6;
    repeated string tags = 7;
}

message ListProblemStatementsRequest {
    int32 id = 1;
    int32 page = 2;
    int32 per_page = 3;
}

message ListProblemStatementsResponse {
    repeated ProblemStatement data = 1;
    int64 total = 2;
}

message GetProblemStatementRequest {
    int32 id = 1;
}

message CreateProblemStatementRequest {
    int32 id = 1;
    string language = 2;
}

message UpdateProblemStatementRequest {
    int32 id = 1;
    int32 sid = 2;
    string language = 3;
    string name = 4;
    string input = 5;
    string output = 6;
    string note = 7;
    string legend = 8;
    ProblemStatementType type = 9;
}

message DeleteProblemStatementRequest {
    int32 id = 1;
    int32 sid = 2;
}

message ListProblemTestsRequest {
    int32 id = 1;
    int32 page = 2;
    int32 per_page = 3;
}

message ListProblemTestsResponse {
    repeated ProblemTest data = 1;
    int64 total = 2;
    bool is_sample_first = 3;
}

message GetProblemTestRequest {
    int32 id = 1;
}

message ProblemTest {
    int32 id = 1;
    int32 order = 2;
    int32 problem_id = 3;
    bool is_example = 4;
    bool is_test_point = 5;
    string name = 6;
    int64 input_size = 7;
    string input_preview = 8;
    bytes input_file_content = 9;
    int64 output_size = 10;
    string output_preview = 11;
    bytes output_file_content = 12;
    string remark = 13;
    google.protobuf.Timestamp created_at = 14;
    google.protobuf.Timestamp updated_at = 15;
}

message CreateProblemTestRequest {
    int32 id = 1;
    bytes file_content = 2;
    string filename = 3;
}

message UpdateProblemTestRequest {
    int32 id = 1;
    int32 tid = 2;
    bool is_example = 3;
    bool is_test_point = 4;
    string remark = 5;
}

message DeleteProblemTestRequest {
    int32 id = 1;
    int32 tid = 2;
}

message SortProblemTestsRequest {
    int32 id = 1;
    optional bool set_sample_first = 2;
    optional bool sort_by_name = 3;
    repeated int32 ids = 4;
}

message ListProblemFilesRequest {
    int32 id = 1;
    string file_type = 2;
    string type = 3;
    string name = 4;
    int32 page = 5;
    int32 per_page = 6;
}

message ListProblemFilesResponse {
    repeated ProblemFile data = 1;
    int64 total = 2;
}

message GetProblemFileRequest {
    int32 id = 1;
    int32 sid = 2;
}

message ProblemFile {
    int32 id = 1;
    string name = 2;
    int32 language = 3;
    string content = 4;
    string type = 5;
    int32 user_id = 6;
    string file_type = 7;
    int64 file_size = 8;
    google.protobuf.Timestamp created_at = 9;
    google.protobuf.Timestamp updated_at = 10;
}

message CreateProblemFileRequest {
    int32 id = 1;
    string name = 2;
    int32 language = 3;
    string content = 4;
    string type = 5;
    string file_type = 6;
    string filename = 7;
    bytes file_content = 8;
}

message UpdateProblemFileRequest {
    int32 id = 1;
    int32 sid = 2;
    string name = 3;
    string content = 4;
    string type = 5;
}

message DeleteProblemFileRequest {
    int32 id = 1;
    int32 sid = 2;
}

message RunProblemFileRequest {
    int32 sid = 1;
}

message ListProblemStdCheckersRequest {
    int32 id = 1;
}
message ListProblemStdCheckersResponse {
    repeated ProblemFile data = 1;
}

message UpdateProblemCheckerRequest {
    int32 id = 1;
    int32 checker_id = 2;
}

message VerifyProblemRequest {
    int32 id = 1;
}

message PackProblemRequest {
    int32 id = 1;
}

message GetProblemVerificationRequest {
    int32 id = 1;
}

message ProblemVerification {
    int32 id = 1;
    int32 problem_id = 2;
    int32 verification_status = 3;
    message VerificaitionInfo {
        string action = 1;
        string error_message = 2;
    }
    repeated VerificaitionInfo verificaiton_info = 4;
}

enum ProblemsetType {
    SIMPLE = 0;
    EXAM = 1;
}

message Problemset {
    message User {
        int32 id = 1;
        string nickname = 2;
        string username = 3;
    }
    int32 id = 1;
    string name = 2;
    ProblemsetType type = 3;
    User user = 4;
    string description = 5;
    int32 problem_count = 6;
    repeated ProblemsetProblem problems = 7;
    google.protobuf.Timestamp created_at = 8;
    google.protobuf.Timestamp updated_at = 9;
}

message ListProblemsetsRequest {
    string name = 1;
    repeated ProblemsetType type = 2;
    int32 page = 3;
    int32 per_page = 4;
}

message ListProblemsetsResponse {
    repeated Problemset data = 1;
    int64 total = 2;
}

message GetProblemsetRequest {
    int32 id = 1;
}

message CreateProblemsetRequest {
    string name = 1;
    string description = 2;
    ProblemsetType type = 3;
}

message DeleteProblemsetRequest {
    int32 id = 1;
}

message UpdateProblemsetRequest {
    int32 id = 1;
    string name = 2;
    string description = 3;
}

message ListProblemsetProblemsRequest {
    int32 id = 1;
    string keyword = 2;
    int32 page = 3;
    int32 per_page = 4;
}

message ProblemsetProblem {
    // 题目ID
    int32 id = 1;
    // 名称
    string name = 2;
    // 次序
    int32 order = 3;
    // 时间限制
    int32 time_limit = 4;
    // 内存限制
    int32 memory_limit = 5;
    int32 accepted_count = 6;
    int32 submit_count = 7;
    int32 problemset_id = 8;
    int32 problem_id = 9;
    // 题目来源
    string source = 10;
    enum Status {
        NOT_START = 0;
        ATTEMPTED = 1;
        SOLVED = 2;
    }
    Status status = 11;
    // 题目类型：标准输入输出、函数题、客观题
    ProblemType type = 12;
    // 客观题内容
    ProblemStatement statement = 13;
    repeated string tags = 14;
}

message ListProblemsetProblemsResponse {
    repeated ProblemsetProblem data = 1;
    int64 total = 2;
}

message GetProblemsetProblemRequest {
    int32 id = 1;
    int32 pid = 2;
}

message GetProblemsetLateralProblemRequest {
    int32 id = 1;
    int32 pid = 2;
}

message GetProblemsetLateralProblemResponse {
    int32 previous = 1;
    int32 next = 2;
}

message AddProblemToProblemsetRequest {
    int32 id = 1;
    int32 problem_id = 2;
}

message BatchAddProblemToProblemsetPreviewRequest {
    enum Method {
        EXCEL = 0;
    }
    int32 id = 1;
    Method method = 2;
    string content = 3;
}

message BatchAddProblemToProblemsetPreviewResponse {
    repeated ProblemsetProblem problems = 1;
    int32 total = 2;
    repeated string failed_reason = 3;
}

message BatchAddProblemToProblemsetRequest {
    int32 id = 1;
    repeated ProblemsetProblem problems = 2;
}

message DeleteProblemFromProblemsetRequest {
    int32 id = 1;
    int32 problem_id = 2;
}

message SortProblemsetProblemsRequest {
    int32 id = 1;
    message ProblemsetProblems {
        int32 order = 1;
        int32 id = 2;
    }
    repeated ProblemsetProblems ids = 2;
}

message ProblemLanguage {
    int32 id = 1;
    int32 language_code = 2;
    string language_name = 3;
    string user_content = 4;
    string main_content = 5;
}

message ListProblemLanguagesRequest {
    int32 problem_id = 1;
}

message ListProblemLanguagesResponse {
    repeated ProblemLanguage data = 1;
    int64 total = 2;
}

message GetProblemLanguageRequest {
    int32 problem_id = 1;
    int32 id =2;
}

message CreateProblemLanguageRequest {
    int32 problem_id = 1;
    string user_content = 2;
    string main_content = 3;
    int32 language = 4;
}

message UpdateProblemLanguageRequest {
    int32 problem_id = 1;
    int32 id = 2;
    string user_content = 3;
    string main_content = 4;
}

message DeleteProblemLanguageRequest {
    int32 problem_id = 1;
    int32 id = 2;
}

message DownloadProblemsRequest {
    repeated int32 ids = 1;
}

message DownloadProblemsResponse {
    string url = 1;
}
