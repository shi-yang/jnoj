// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package v1

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

func IsUnknownError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ProblemErrorReason_UNKNOWN_ERROR.String() && e.Code == 500
}

func ErrorUnknownError(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ProblemErrorReason_UNKNOWN_ERROR.String(), fmt.Sprintf(format, args...))
}

func IsPermissionDenied(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ProblemErrorReason_PERMISSION_DENIED.String() && e.Code == 403
}

func ErrorPermissionDenied(format string, args ...interface{}) *errors.Error {
	return errors.New(403, ProblemErrorReason_PERMISSION_DENIED.String(), fmt.Sprintf(format, args...))
}

func IsProblemNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ProblemErrorReason_PROBLEM_NOT_FOUND.String() && e.Code == 404
}

func ErrorProblemNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ProblemErrorReason_PROBLEM_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsProblemNotVerification(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ProblemErrorReason_PROBLEM_NOT_VERIFICATION.String() && e.Code == 400
}

func ErrorProblemNotVerification(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ProblemErrorReason_PROBLEM_NOT_VERIFICATION.String(), fmt.Sprintf(format, args...))
}

func IsProblemTestSampleNotAllowed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ProblemErrorReason_PROBLEM_TEST_SAMPLE_NOT_ALLOWED.String() && e.Code == 400
}

func ErrorProblemTestSampleNotAllowed(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ProblemErrorReason_PROBLEM_TEST_SAMPLE_NOT_ALLOWED.String(), fmt.Sprintf(format, args...))
}

func IsProblemPackageNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ProblemErrorReason_PROBLEM_PACKAGE_NOT_FOUND.String() && e.Code == 400
}

func ErrorProblemPackageNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ProblemErrorReason_PROBLEM_PACKAGE_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}
