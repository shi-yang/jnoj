// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: v1/problem.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProblemServiceClient is the client API for ProblemService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProblemServiceClient interface {
	// 题目列表
	ListProblems(ctx context.Context, in *ListProblemsRequest, opts ...grpc.CallOption) (*ListProblemsResponse, error)
	// 题目详情
	GetProblem(ctx context.Context, in *GetProblemRequest, opts ...grpc.CallOption) (*Problem, error)
	// 创建题目
	CreateProblem(ctx context.Context, in *CreateProblemRequest, opts ...grpc.CallOption) (*CreateProblemResponse, error)
	// 创建题目
	UpdateProblem(ctx context.Context, in *UpdateProblemRequest, opts ...grpc.CallOption) (*Problem, error)
	// 获取题目描述列表
	ListProblemStatements(ctx context.Context, in *ListProblemStatementsRequest, opts ...grpc.CallOption) (*ListProblemStatementsResponse, error)
	// 获取题目描述详情
	GetProblemStatement(ctx context.Context, in *GetProblemStatementRequest, opts ...grpc.CallOption) (*ProblemStatement, error)
	// 创建题目描述
	CreateProblemStatement(ctx context.Context, in *CreateProblemStatementRequest, opts ...grpc.CallOption) (*ProblemStatement, error)
	// 更新题目描述
	UpdateProblemStatement(ctx context.Context, in *UpdateProblemStatementRequest, opts ...grpc.CallOption) (*ProblemStatement, error)
	// 删除题目描述
	DeleteProblemStatement(ctx context.Context, in *DeleteProblemStatementRequest, opts ...grpc.CallOption) (*ProblemStatement, error)
	// 获取题目裁判程序列表
	ListProblemCheckers(ctx context.Context, in *ListProblemCheckersRequest, opts ...grpc.CallOption) (*ListProblemCheckersResponse, error)
	// 获取题目裁判程序
	GetProblemChecker(ctx context.Context, in *GetProblemCheckerRequest, opts ...grpc.CallOption) (*ProblemChecker, error)
	// 创建题目裁判程序
	CreateProblemChecker(ctx context.Context, in *CreateProblemCheckerRequest, opts ...grpc.CallOption) (*ProblemChecker, error)
	// 更新题目裁判程序
	UpdateProblemChecker(ctx context.Context, in *UpdateProblemCheckerRequest, opts ...grpc.CallOption) (*ProblemChecker, error)
	// 获取题目测试点列表
	ListProblemTests(ctx context.Context, in *ListProblemTestsRequest, opts ...grpc.CallOption) (*ListProblemTestsResponse, error)
	// 获取题目测试点详情
	GetProblemTest(ctx context.Context, in *GetProblemTestRequest, opts ...grpc.CallOption) (*ProblemTest, error)
	// 创建题目测试点
	CreateProblemTest(ctx context.Context, in *CreateProblemTestRequest, opts ...grpc.CallOption) (*ProblemTest, error)
	// 更新题目测试点
	UpdateProblemTest(ctx context.Context, in *UpdateProblemTestRequest, opts ...grpc.CallOption) (*ProblemTest, error)
	// 删除题目测试点
	DeleteProblemTest(ctx context.Context, in *DeleteProblemTestRequest, opts ...grpc.CallOption) (*ProblemTest, error)
	// 获取题目解答程序列表
	ListProblemSolutions(ctx context.Context, in *ListProblemSolutionsRequest, opts ...grpc.CallOption) (*ListProblemSolutionsResponse, error)
	// 获取题目解答程序详情
	GetProblemSolution(ctx context.Context, in *GetProblemSolutionRequest, opts ...grpc.CallOption) (*ProblemSolution, error)
	// 创建题目解答程序
	CreateProblemSolution(ctx context.Context, in *CreateProblemSolutionRequest, opts ...grpc.CallOption) (*ProblemSolution, error)
	// 更新题目解答程序
	UpdateProblemSolution(ctx context.Context, in *UpdateProblemSolutionRequest, opts ...grpc.CallOption) (*ProblemSolution, error)
	// 删除题目解答程序
	DeleteProblemSolution(ctx context.Context, in *DeleteProblemSolutionRequest, opts ...grpc.CallOption) (*ProblemSolution, error)
}

type problemServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProblemServiceClient(cc grpc.ClientConnInterface) ProblemServiceClient {
	return &problemServiceClient{cc}
}

func (c *problemServiceClient) ListProblems(ctx context.Context, in *ListProblemsRequest, opts ...grpc.CallOption) (*ListProblemsResponse, error) {
	out := new(ListProblemsResponse)
	err := c.cc.Invoke(ctx, "/jnoj.interface.v1.ProblemService/ListProblems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemServiceClient) GetProblem(ctx context.Context, in *GetProblemRequest, opts ...grpc.CallOption) (*Problem, error) {
	out := new(Problem)
	err := c.cc.Invoke(ctx, "/jnoj.interface.v1.ProblemService/GetProblem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemServiceClient) CreateProblem(ctx context.Context, in *CreateProblemRequest, opts ...grpc.CallOption) (*CreateProblemResponse, error) {
	out := new(CreateProblemResponse)
	err := c.cc.Invoke(ctx, "/jnoj.interface.v1.ProblemService/CreateProblem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemServiceClient) UpdateProblem(ctx context.Context, in *UpdateProblemRequest, opts ...grpc.CallOption) (*Problem, error) {
	out := new(Problem)
	err := c.cc.Invoke(ctx, "/jnoj.interface.v1.ProblemService/UpdateProblem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemServiceClient) ListProblemStatements(ctx context.Context, in *ListProblemStatementsRequest, opts ...grpc.CallOption) (*ListProblemStatementsResponse, error) {
	out := new(ListProblemStatementsResponse)
	err := c.cc.Invoke(ctx, "/jnoj.interface.v1.ProblemService/ListProblemStatements", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemServiceClient) GetProblemStatement(ctx context.Context, in *GetProblemStatementRequest, opts ...grpc.CallOption) (*ProblemStatement, error) {
	out := new(ProblemStatement)
	err := c.cc.Invoke(ctx, "/jnoj.interface.v1.ProblemService/GetProblemStatement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemServiceClient) CreateProblemStatement(ctx context.Context, in *CreateProblemStatementRequest, opts ...grpc.CallOption) (*ProblemStatement, error) {
	out := new(ProblemStatement)
	err := c.cc.Invoke(ctx, "/jnoj.interface.v1.ProblemService/CreateProblemStatement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemServiceClient) UpdateProblemStatement(ctx context.Context, in *UpdateProblemStatementRequest, opts ...grpc.CallOption) (*ProblemStatement, error) {
	out := new(ProblemStatement)
	err := c.cc.Invoke(ctx, "/jnoj.interface.v1.ProblemService/UpdateProblemStatement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemServiceClient) DeleteProblemStatement(ctx context.Context, in *DeleteProblemStatementRequest, opts ...grpc.CallOption) (*ProblemStatement, error) {
	out := new(ProblemStatement)
	err := c.cc.Invoke(ctx, "/jnoj.interface.v1.ProblemService/DeleteProblemStatement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemServiceClient) ListProblemCheckers(ctx context.Context, in *ListProblemCheckersRequest, opts ...grpc.CallOption) (*ListProblemCheckersResponse, error) {
	out := new(ListProblemCheckersResponse)
	err := c.cc.Invoke(ctx, "/jnoj.interface.v1.ProblemService/ListProblemCheckers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemServiceClient) GetProblemChecker(ctx context.Context, in *GetProblemCheckerRequest, opts ...grpc.CallOption) (*ProblemChecker, error) {
	out := new(ProblemChecker)
	err := c.cc.Invoke(ctx, "/jnoj.interface.v1.ProblemService/GetProblemChecker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemServiceClient) CreateProblemChecker(ctx context.Context, in *CreateProblemCheckerRequest, opts ...grpc.CallOption) (*ProblemChecker, error) {
	out := new(ProblemChecker)
	err := c.cc.Invoke(ctx, "/jnoj.interface.v1.ProblemService/CreateProblemChecker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemServiceClient) UpdateProblemChecker(ctx context.Context, in *UpdateProblemCheckerRequest, opts ...grpc.CallOption) (*ProblemChecker, error) {
	out := new(ProblemChecker)
	err := c.cc.Invoke(ctx, "/jnoj.interface.v1.ProblemService/UpdateProblemChecker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemServiceClient) ListProblemTests(ctx context.Context, in *ListProblemTestsRequest, opts ...grpc.CallOption) (*ListProblemTestsResponse, error) {
	out := new(ListProblemTestsResponse)
	err := c.cc.Invoke(ctx, "/jnoj.interface.v1.ProblemService/ListProblemTests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemServiceClient) GetProblemTest(ctx context.Context, in *GetProblemTestRequest, opts ...grpc.CallOption) (*ProblemTest, error) {
	out := new(ProblemTest)
	err := c.cc.Invoke(ctx, "/jnoj.interface.v1.ProblemService/GetProblemTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemServiceClient) CreateProblemTest(ctx context.Context, in *CreateProblemTestRequest, opts ...grpc.CallOption) (*ProblemTest, error) {
	out := new(ProblemTest)
	err := c.cc.Invoke(ctx, "/jnoj.interface.v1.ProblemService/CreateProblemTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemServiceClient) UpdateProblemTest(ctx context.Context, in *UpdateProblemTestRequest, opts ...grpc.CallOption) (*ProblemTest, error) {
	out := new(ProblemTest)
	err := c.cc.Invoke(ctx, "/jnoj.interface.v1.ProblemService/UpdateProblemTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemServiceClient) DeleteProblemTest(ctx context.Context, in *DeleteProblemTestRequest, opts ...grpc.CallOption) (*ProblemTest, error) {
	out := new(ProblemTest)
	err := c.cc.Invoke(ctx, "/jnoj.interface.v1.ProblemService/DeleteProblemTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemServiceClient) ListProblemSolutions(ctx context.Context, in *ListProblemSolutionsRequest, opts ...grpc.CallOption) (*ListProblemSolutionsResponse, error) {
	out := new(ListProblemSolutionsResponse)
	err := c.cc.Invoke(ctx, "/jnoj.interface.v1.ProblemService/ListProblemSolutions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemServiceClient) GetProblemSolution(ctx context.Context, in *GetProblemSolutionRequest, opts ...grpc.CallOption) (*ProblemSolution, error) {
	out := new(ProblemSolution)
	err := c.cc.Invoke(ctx, "/jnoj.interface.v1.ProblemService/GetProblemSolution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemServiceClient) CreateProblemSolution(ctx context.Context, in *CreateProblemSolutionRequest, opts ...grpc.CallOption) (*ProblemSolution, error) {
	out := new(ProblemSolution)
	err := c.cc.Invoke(ctx, "/jnoj.interface.v1.ProblemService/CreateProblemSolution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemServiceClient) UpdateProblemSolution(ctx context.Context, in *UpdateProblemSolutionRequest, opts ...grpc.CallOption) (*ProblemSolution, error) {
	out := new(ProblemSolution)
	err := c.cc.Invoke(ctx, "/jnoj.interface.v1.ProblemService/UpdateProblemSolution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemServiceClient) DeleteProblemSolution(ctx context.Context, in *DeleteProblemSolutionRequest, opts ...grpc.CallOption) (*ProblemSolution, error) {
	out := new(ProblemSolution)
	err := c.cc.Invoke(ctx, "/jnoj.interface.v1.ProblemService/DeleteProblemSolution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProblemServiceServer is the server API for ProblemService service.
// All implementations must embed UnimplementedProblemServiceServer
// for forward compatibility
type ProblemServiceServer interface {
	// 题目列表
	ListProblems(context.Context, *ListProblemsRequest) (*ListProblemsResponse, error)
	// 题目详情
	GetProblem(context.Context, *GetProblemRequest) (*Problem, error)
	// 创建题目
	CreateProblem(context.Context, *CreateProblemRequest) (*CreateProblemResponse, error)
	// 创建题目
	UpdateProblem(context.Context, *UpdateProblemRequest) (*Problem, error)
	// 获取题目描述列表
	ListProblemStatements(context.Context, *ListProblemStatementsRequest) (*ListProblemStatementsResponse, error)
	// 获取题目描述详情
	GetProblemStatement(context.Context, *GetProblemStatementRequest) (*ProblemStatement, error)
	// 创建题目描述
	CreateProblemStatement(context.Context, *CreateProblemStatementRequest) (*ProblemStatement, error)
	// 更新题目描述
	UpdateProblemStatement(context.Context, *UpdateProblemStatementRequest) (*ProblemStatement, error)
	// 删除题目描述
	DeleteProblemStatement(context.Context, *DeleteProblemStatementRequest) (*ProblemStatement, error)
	// 获取题目裁判程序列表
	ListProblemCheckers(context.Context, *ListProblemCheckersRequest) (*ListProblemCheckersResponse, error)
	// 获取题目裁判程序
	GetProblemChecker(context.Context, *GetProblemCheckerRequest) (*ProblemChecker, error)
	// 创建题目裁判程序
	CreateProblemChecker(context.Context, *CreateProblemCheckerRequest) (*ProblemChecker, error)
	// 更新题目裁判程序
	UpdateProblemChecker(context.Context, *UpdateProblemCheckerRequest) (*ProblemChecker, error)
	// 获取题目测试点列表
	ListProblemTests(context.Context, *ListProblemTestsRequest) (*ListProblemTestsResponse, error)
	// 获取题目测试点详情
	GetProblemTest(context.Context, *GetProblemTestRequest) (*ProblemTest, error)
	// 创建题目测试点
	CreateProblemTest(context.Context, *CreateProblemTestRequest) (*ProblemTest, error)
	// 更新题目测试点
	UpdateProblemTest(context.Context, *UpdateProblemTestRequest) (*ProblemTest, error)
	// 删除题目测试点
	DeleteProblemTest(context.Context, *DeleteProblemTestRequest) (*ProblemTest, error)
	// 获取题目解答程序列表
	ListProblemSolutions(context.Context, *ListProblemSolutionsRequest) (*ListProblemSolutionsResponse, error)
	// 获取题目解答程序详情
	GetProblemSolution(context.Context, *GetProblemSolutionRequest) (*ProblemSolution, error)
	// 创建题目解答程序
	CreateProblemSolution(context.Context, *CreateProblemSolutionRequest) (*ProblemSolution, error)
	// 更新题目解答程序
	UpdateProblemSolution(context.Context, *UpdateProblemSolutionRequest) (*ProblemSolution, error)
	// 删除题目解答程序
	DeleteProblemSolution(context.Context, *DeleteProblemSolutionRequest) (*ProblemSolution, error)
	mustEmbedUnimplementedProblemServiceServer()
}

// UnimplementedProblemServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProblemServiceServer struct {
}

func (UnimplementedProblemServiceServer) ListProblems(context.Context, *ListProblemsRequest) (*ListProblemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProblems not implemented")
}
func (UnimplementedProblemServiceServer) GetProblem(context.Context, *GetProblemRequest) (*Problem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProblem not implemented")
}
func (UnimplementedProblemServiceServer) CreateProblem(context.Context, *CreateProblemRequest) (*CreateProblemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProblem not implemented")
}
func (UnimplementedProblemServiceServer) UpdateProblem(context.Context, *UpdateProblemRequest) (*Problem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProblem not implemented")
}
func (UnimplementedProblemServiceServer) ListProblemStatements(context.Context, *ListProblemStatementsRequest) (*ListProblemStatementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProblemStatements not implemented")
}
func (UnimplementedProblemServiceServer) GetProblemStatement(context.Context, *GetProblemStatementRequest) (*ProblemStatement, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProblemStatement not implemented")
}
func (UnimplementedProblemServiceServer) CreateProblemStatement(context.Context, *CreateProblemStatementRequest) (*ProblemStatement, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProblemStatement not implemented")
}
func (UnimplementedProblemServiceServer) UpdateProblemStatement(context.Context, *UpdateProblemStatementRequest) (*ProblemStatement, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProblemStatement not implemented")
}
func (UnimplementedProblemServiceServer) DeleteProblemStatement(context.Context, *DeleteProblemStatementRequest) (*ProblemStatement, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProblemStatement not implemented")
}
func (UnimplementedProblemServiceServer) ListProblemCheckers(context.Context, *ListProblemCheckersRequest) (*ListProblemCheckersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProblemCheckers not implemented")
}
func (UnimplementedProblemServiceServer) GetProblemChecker(context.Context, *GetProblemCheckerRequest) (*ProblemChecker, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProblemChecker not implemented")
}
func (UnimplementedProblemServiceServer) CreateProblemChecker(context.Context, *CreateProblemCheckerRequest) (*ProblemChecker, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProblemChecker not implemented")
}
func (UnimplementedProblemServiceServer) UpdateProblemChecker(context.Context, *UpdateProblemCheckerRequest) (*ProblemChecker, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProblemChecker not implemented")
}
func (UnimplementedProblemServiceServer) ListProblemTests(context.Context, *ListProblemTestsRequest) (*ListProblemTestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProblemTests not implemented")
}
func (UnimplementedProblemServiceServer) GetProblemTest(context.Context, *GetProblemTestRequest) (*ProblemTest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProblemTest not implemented")
}
func (UnimplementedProblemServiceServer) CreateProblemTest(context.Context, *CreateProblemTestRequest) (*ProblemTest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProblemTest not implemented")
}
func (UnimplementedProblemServiceServer) UpdateProblemTest(context.Context, *UpdateProblemTestRequest) (*ProblemTest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProblemTest not implemented")
}
func (UnimplementedProblemServiceServer) DeleteProblemTest(context.Context, *DeleteProblemTestRequest) (*ProblemTest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProblemTest not implemented")
}
func (UnimplementedProblemServiceServer) ListProblemSolutions(context.Context, *ListProblemSolutionsRequest) (*ListProblemSolutionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProblemSolutions not implemented")
}
func (UnimplementedProblemServiceServer) GetProblemSolution(context.Context, *GetProblemSolutionRequest) (*ProblemSolution, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProblemSolution not implemented")
}
func (UnimplementedProblemServiceServer) CreateProblemSolution(context.Context, *CreateProblemSolutionRequest) (*ProblemSolution, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProblemSolution not implemented")
}
func (UnimplementedProblemServiceServer) UpdateProblemSolution(context.Context, *UpdateProblemSolutionRequest) (*ProblemSolution, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProblemSolution not implemented")
}
func (UnimplementedProblemServiceServer) DeleteProblemSolution(context.Context, *DeleteProblemSolutionRequest) (*ProblemSolution, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProblemSolution not implemented")
}
func (UnimplementedProblemServiceServer) mustEmbedUnimplementedProblemServiceServer() {}

// UnsafeProblemServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProblemServiceServer will
// result in compilation errors.
type UnsafeProblemServiceServer interface {
	mustEmbedUnimplementedProblemServiceServer()
}

func RegisterProblemServiceServer(s grpc.ServiceRegistrar, srv ProblemServiceServer) {
	s.RegisterService(&ProblemService_ServiceDesc, srv)
}

func _ProblemService_ListProblems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProblemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemServiceServer).ListProblems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jnoj.interface.v1.ProblemService/ListProblems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemServiceServer).ListProblems(ctx, req.(*ListProblemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemService_GetProblem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProblemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemServiceServer).GetProblem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jnoj.interface.v1.ProblemService/GetProblem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemServiceServer).GetProblem(ctx, req.(*GetProblemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemService_CreateProblem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProblemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemServiceServer).CreateProblem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jnoj.interface.v1.ProblemService/CreateProblem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemServiceServer).CreateProblem(ctx, req.(*CreateProblemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemService_UpdateProblem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProblemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemServiceServer).UpdateProblem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jnoj.interface.v1.ProblemService/UpdateProblem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemServiceServer).UpdateProblem(ctx, req.(*UpdateProblemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemService_ListProblemStatements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProblemStatementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemServiceServer).ListProblemStatements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jnoj.interface.v1.ProblemService/ListProblemStatements",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemServiceServer).ListProblemStatements(ctx, req.(*ListProblemStatementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemService_GetProblemStatement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProblemStatementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemServiceServer).GetProblemStatement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jnoj.interface.v1.ProblemService/GetProblemStatement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemServiceServer).GetProblemStatement(ctx, req.(*GetProblemStatementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemService_CreateProblemStatement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProblemStatementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemServiceServer).CreateProblemStatement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jnoj.interface.v1.ProblemService/CreateProblemStatement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemServiceServer).CreateProblemStatement(ctx, req.(*CreateProblemStatementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemService_UpdateProblemStatement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProblemStatementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemServiceServer).UpdateProblemStatement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jnoj.interface.v1.ProblemService/UpdateProblemStatement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemServiceServer).UpdateProblemStatement(ctx, req.(*UpdateProblemStatementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemService_DeleteProblemStatement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProblemStatementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemServiceServer).DeleteProblemStatement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jnoj.interface.v1.ProblemService/DeleteProblemStatement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemServiceServer).DeleteProblemStatement(ctx, req.(*DeleteProblemStatementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemService_ListProblemCheckers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProblemCheckersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemServiceServer).ListProblemCheckers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jnoj.interface.v1.ProblemService/ListProblemCheckers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemServiceServer).ListProblemCheckers(ctx, req.(*ListProblemCheckersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemService_GetProblemChecker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProblemCheckerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemServiceServer).GetProblemChecker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jnoj.interface.v1.ProblemService/GetProblemChecker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemServiceServer).GetProblemChecker(ctx, req.(*GetProblemCheckerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemService_CreateProblemChecker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProblemCheckerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemServiceServer).CreateProblemChecker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jnoj.interface.v1.ProblemService/CreateProblemChecker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemServiceServer).CreateProblemChecker(ctx, req.(*CreateProblemCheckerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemService_UpdateProblemChecker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProblemCheckerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemServiceServer).UpdateProblemChecker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jnoj.interface.v1.ProblemService/UpdateProblemChecker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemServiceServer).UpdateProblemChecker(ctx, req.(*UpdateProblemCheckerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemService_ListProblemTests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProblemTestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemServiceServer).ListProblemTests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jnoj.interface.v1.ProblemService/ListProblemTests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemServiceServer).ListProblemTests(ctx, req.(*ListProblemTestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemService_GetProblemTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProblemTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemServiceServer).GetProblemTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jnoj.interface.v1.ProblemService/GetProblemTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemServiceServer).GetProblemTest(ctx, req.(*GetProblemTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemService_CreateProblemTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProblemTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemServiceServer).CreateProblemTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jnoj.interface.v1.ProblemService/CreateProblemTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemServiceServer).CreateProblemTest(ctx, req.(*CreateProblemTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemService_UpdateProblemTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProblemTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemServiceServer).UpdateProblemTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jnoj.interface.v1.ProblemService/UpdateProblemTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemServiceServer).UpdateProblemTest(ctx, req.(*UpdateProblemTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemService_DeleteProblemTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProblemTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemServiceServer).DeleteProblemTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jnoj.interface.v1.ProblemService/DeleteProblemTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemServiceServer).DeleteProblemTest(ctx, req.(*DeleteProblemTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemService_ListProblemSolutions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProblemSolutionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemServiceServer).ListProblemSolutions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jnoj.interface.v1.ProblemService/ListProblemSolutions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemServiceServer).ListProblemSolutions(ctx, req.(*ListProblemSolutionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemService_GetProblemSolution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProblemSolutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemServiceServer).GetProblemSolution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jnoj.interface.v1.ProblemService/GetProblemSolution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemServiceServer).GetProblemSolution(ctx, req.(*GetProblemSolutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemService_CreateProblemSolution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProblemSolutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemServiceServer).CreateProblemSolution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jnoj.interface.v1.ProblemService/CreateProblemSolution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemServiceServer).CreateProblemSolution(ctx, req.(*CreateProblemSolutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemService_UpdateProblemSolution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProblemSolutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemServiceServer).UpdateProblemSolution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jnoj.interface.v1.ProblemService/UpdateProblemSolution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemServiceServer).UpdateProblemSolution(ctx, req.(*UpdateProblemSolutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemService_DeleteProblemSolution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProblemSolutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemServiceServer).DeleteProblemSolution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jnoj.interface.v1.ProblemService/DeleteProblemSolution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemServiceServer).DeleteProblemSolution(ctx, req.(*DeleteProblemSolutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProblemService_ServiceDesc is the grpc.ServiceDesc for ProblemService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProblemService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "jnoj.interface.v1.ProblemService",
	HandlerType: (*ProblemServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListProblems",
			Handler:    _ProblemService_ListProblems_Handler,
		},
		{
			MethodName: "GetProblem",
			Handler:    _ProblemService_GetProblem_Handler,
		},
		{
			MethodName: "CreateProblem",
			Handler:    _ProblemService_CreateProblem_Handler,
		},
		{
			MethodName: "UpdateProblem",
			Handler:    _ProblemService_UpdateProblem_Handler,
		},
		{
			MethodName: "ListProblemStatements",
			Handler:    _ProblemService_ListProblemStatements_Handler,
		},
		{
			MethodName: "GetProblemStatement",
			Handler:    _ProblemService_GetProblemStatement_Handler,
		},
		{
			MethodName: "CreateProblemStatement",
			Handler:    _ProblemService_CreateProblemStatement_Handler,
		},
		{
			MethodName: "UpdateProblemStatement",
			Handler:    _ProblemService_UpdateProblemStatement_Handler,
		},
		{
			MethodName: "DeleteProblemStatement",
			Handler:    _ProblemService_DeleteProblemStatement_Handler,
		},
		{
			MethodName: "ListProblemCheckers",
			Handler:    _ProblemService_ListProblemCheckers_Handler,
		},
		{
			MethodName: "GetProblemChecker",
			Handler:    _ProblemService_GetProblemChecker_Handler,
		},
		{
			MethodName: "CreateProblemChecker",
			Handler:    _ProblemService_CreateProblemChecker_Handler,
		},
		{
			MethodName: "UpdateProblemChecker",
			Handler:    _ProblemService_UpdateProblemChecker_Handler,
		},
		{
			MethodName: "ListProblemTests",
			Handler:    _ProblemService_ListProblemTests_Handler,
		},
		{
			MethodName: "GetProblemTest",
			Handler:    _ProblemService_GetProblemTest_Handler,
		},
		{
			MethodName: "CreateProblemTest",
			Handler:    _ProblemService_CreateProblemTest_Handler,
		},
		{
			MethodName: "UpdateProblemTest",
			Handler:    _ProblemService_UpdateProblemTest_Handler,
		},
		{
			MethodName: "DeleteProblemTest",
			Handler:    _ProblemService_DeleteProblemTest_Handler,
		},
		{
			MethodName: "ListProblemSolutions",
			Handler:    _ProblemService_ListProblemSolutions_Handler,
		},
		{
			MethodName: "GetProblemSolution",
			Handler:    _ProblemService_GetProblemSolution_Handler,
		},
		{
			MethodName: "CreateProblemSolution",
			Handler:    _ProblemService_CreateProblemSolution_Handler,
		},
		{
			MethodName: "UpdateProblemSolution",
			Handler:    _ProblemService_UpdateProblemSolution_Handler,
		},
		{
			MethodName: "DeleteProblemSolution",
			Handler:    _ProblemService_DeleteProblemSolution_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/problem.proto",
}
