// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.4
// - protoc             v3.21.12
// source: v1/ranking.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	auth "jnoj/internal/middleware/auth"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

// auth.
const OperationRankingServiceListProblemRankings = "/jnoj.interface.v1.RankingService/ListProblemRankings"

type RankingServiceHTTPServer interface {
	ListProblemRankings(context.Context, *ListProblemRankingsRequest) (*ListProblemRankingsResponse, error)
}

func RegisterRankingServiceHTTPServer(s *http.Server, srv RankingServiceHTTPServer) {
	s.Use("/jnoj.interface.v1.RankingService/ListProblemRankings", auth.Guest())
	r := s.Route("/")
	r.GET("/problem_rankings", _RankingService_ListProblemRankings0_HTTP_Handler(srv))
}

func _RankingService_ListProblemRankings0_HTTP_Handler(srv RankingServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListProblemRankingsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRankingServiceListProblemRankings)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListProblemRankings(ctx, req.(*ListProblemRankingsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListProblemRankingsResponse)
		return ctx.Result(200, reply)
	}
}

type RankingServiceHTTPClient interface {
	ListProblemRankings(ctx context.Context, req *ListProblemRankingsRequest, opts ...http.CallOption) (rsp *ListProblemRankingsResponse, err error)
}

type RankingServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewRankingServiceHTTPClient(client *http.Client) RankingServiceHTTPClient {
	return &RankingServiceHTTPClientImpl{client}
}

func (c *RankingServiceHTTPClientImpl) ListProblemRankings(ctx context.Context, in *ListProblemRankingsRequest, opts ...http.CallOption) (*ListProblemRankingsResponse, error) {
	var out ListProblemRankingsResponse
	pattern := "/problem_rankings"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRankingServiceListProblemRankings))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
