// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/submission.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on RejudgeRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RejudgeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RejudgeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RejudgeRequestMultiError,
// or nil if none found.
func (m *RejudgeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RejudgeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	oneofIdPresent := false
	switch v := m.Id.(type) {
	case *RejudgeRequest_ContestId:
		if v == nil {
			err := RejudgeRequestValidationError{
				field:  "Id",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofIdPresent = true
		// no validation rules for ContestId
	case *RejudgeRequest_ProblemId:
		if v == nil {
			err := RejudgeRequestValidationError{
				field:  "Id",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofIdPresent = true
		// no validation rules for ProblemId
	case *RejudgeRequest_SubmissionId:
		if v == nil {
			err := RejudgeRequestValidationError{
				field:  "Id",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofIdPresent = true
		// no validation rules for SubmissionId
	default:
		_ = v // ensures v is used
	}
	if !oneofIdPresent {
		err := RejudgeRequestValidationError{
			field:  "Id",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RejudgeRequestMultiError(errors)
	}

	return nil
}

// RejudgeRequestMultiError is an error wrapping multiple validation errors
// returned by RejudgeRequest.ValidateAll() if the designated constraints
// aren't met.
type RejudgeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RejudgeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RejudgeRequestMultiError) AllErrors() []error { return m }

// RejudgeRequestValidationError is the validation error returned by
// RejudgeRequest.Validate if the designated constraints aren't met.
type RejudgeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RejudgeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RejudgeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RejudgeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RejudgeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RejudgeRequestValidationError) ErrorName() string { return "RejudgeRequestValidationError" }

// Error satisfies the builtin error interface
func (e RejudgeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRejudgeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RejudgeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RejudgeRequestValidationError{}

// Validate checks the field values on ListSubmissionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSubmissionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSubmissionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSubmissionsRequestMultiError, or nil if none found.
func (m *ListSubmissionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSubmissionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for PerPage

	// no validation rules for EntityId

	// no validation rules for ProblemId

	if m.EntityType != nil {
		// no validation rules for EntityType
	}

	if len(errors) > 0 {
		return ListSubmissionsRequestMultiError(errors)
	}

	return nil
}

// ListSubmissionsRequestMultiError is an error wrapping multiple validation
// errors returned by ListSubmissionsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListSubmissionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSubmissionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSubmissionsRequestMultiError) AllErrors() []error { return m }

// ListSubmissionsRequestValidationError is the validation error returned by
// ListSubmissionsRequest.Validate if the designated constraints aren't met.
type ListSubmissionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSubmissionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSubmissionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSubmissionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSubmissionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSubmissionsRequestValidationError) ErrorName() string {
	return "ListSubmissionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListSubmissionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSubmissionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSubmissionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSubmissionsRequestValidationError{}
