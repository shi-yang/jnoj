// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/user.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on User with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on User with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UserMultiError, or nil if none found.
func (m *User) ValidateAll() error {
	return m.validate(true)
}

func (m *User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Nickname

	// no validation rules for Username

	// no validation rules for Realname

	// no validation rules for Role

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserMultiError(errors)
	}

	return nil
}

// UserMultiError is an error wrapping multiple validation errors returned by
// User.ValidateAll() if the designated constraints aren't met.
type UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserMultiError) AllErrors() []error { return m }

// UserValidationError is the validation error returned by User.Validate if the
// designated constraints aren't met.
type UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserValidationError) ErrorName() string { return "UserValidationError" }

// Error satisfies the builtin error interface
func (e UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserValidationError{}

// Validate checks the field values on GetUserRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUserRequestMultiError,
// or nil if none found.
func (m *GetUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetUserRequestMultiError(errors)
	}

	return nil
}

// GetUserRequestMultiError is an error wrapping multiple validation errors
// returned by GetUserRequest.ValidateAll() if the designated constraints
// aren't met.
type GetUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserRequestMultiError) AllErrors() []error { return m }

// GetUserRequestValidationError is the validation error returned by
// GetUserRequest.Validate if the designated constraints aren't met.
type GetUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserRequestValidationError) ErrorName() string { return "GetUserRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserRequestValidationError{}

// Validate checks the field values on CreateUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserRequestMultiError, or nil if none found.
func (m *CreateUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_CreateUserRequest_Username_Pattern.MatchString(m.GetUsername()) {
		err := CreateUserRequestValidationError{
			field:  "Username",
			reason: "value does not match regex pattern \"^[a-zA-Z][a-zA-Z0-9_-]{4,15}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Nickname

	// no validation rules for Realname

	if l := utf8.RuneCountInString(m.GetPassword()); l < 6 || l > 16 {
		err := CreateUserRequestValidationError{
			field:  "Password",
			reason: "value length must be between 6 and 16 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	oneofIdPresent := false
	switch v := m.Id.(type) {
	case *CreateUserRequest_Phone:
		if v == nil {
			err := CreateUserRequestValidationError{
				field:  "Id",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofIdPresent = true

		if !_CreateUserRequest_Phone_Pattern.MatchString(m.GetPhone()) {
			err := CreateUserRequestValidationError{
				field:  "Phone",
				reason: "value does not match regex pattern \"^1[3456789][0-9]{9}$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	case *CreateUserRequest_Email:
		if v == nil {
			err := CreateUserRequestValidationError{
				field:  "Id",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofIdPresent = true

		if err := m._validateEmail(m.GetEmail()); err != nil {
			err = CreateUserRequestValidationError{
				field:  "Email",
				reason: "value must be a valid email address",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	default:
		_ = v // ensures v is used
	}
	if !oneofIdPresent {
		err := CreateUserRequestValidationError{
			field:  "Id",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateUserRequestMultiError(errors)
	}

	return nil
}

func (m *CreateUserRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *CreateUserRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// CreateUserRequestMultiError is an error wrapping multiple validation errors
// returned by CreateUserRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserRequestMultiError) AllErrors() []error { return m }

// CreateUserRequestValidationError is the validation error returned by
// CreateUserRequest.Validate if the designated constraints aren't met.
type CreateUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserRequestValidationError) ErrorName() string {
	return "CreateUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserRequestValidationError{}

var _CreateUserRequest_Phone_Pattern = regexp.MustCompile("^1[3456789][0-9]{9}$")

var _CreateUserRequest_Username_Pattern = regexp.MustCompile("^[a-zA-Z][a-zA-Z0-9_-]{4,15}$")

// Validate checks the field values on BatchCreateUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchCreateUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchCreateUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchCreateUserRequestMultiError, or nil if none found.
func (m *BatchCreateUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchCreateUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BatchCreateUserRequestValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BatchCreateUserRequestValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BatchCreateUserRequestValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return BatchCreateUserRequestMultiError(errors)
	}

	return nil
}

// BatchCreateUserRequestMultiError is an error wrapping multiple validation
// errors returned by BatchCreateUserRequest.ValidateAll() if the designated
// constraints aren't met.
type BatchCreateUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchCreateUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchCreateUserRequestMultiError) AllErrors() []error { return m }

// BatchCreateUserRequestValidationError is the validation error returned by
// BatchCreateUserRequest.Validate if the designated constraints aren't met.
type BatchCreateUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchCreateUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchCreateUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchCreateUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchCreateUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchCreateUserRequestValidationError) ErrorName() string {
	return "BatchCreateUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BatchCreateUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchCreateUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchCreateUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchCreateUserRequestValidationError{}

// Validate checks the field values on BatchCreateUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchCreateUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchCreateUserResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchCreateUserResponseMultiError, or nil if none found.
func (m *BatchCreateUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchCreateUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSuccess() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BatchCreateUserResponseValidationError{
						field:  fmt.Sprintf("Success[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BatchCreateUserResponseValidationError{
						field:  fmt.Sprintf("Success[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BatchCreateUserResponseValidationError{
					field:  fmt.Sprintf("Success[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetFailed() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BatchCreateUserResponseValidationError{
						field:  fmt.Sprintf("Failed[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BatchCreateUserResponseValidationError{
						field:  fmt.Sprintf("Failed[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BatchCreateUserResponseValidationError{
					field:  fmt.Sprintf("Failed[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return BatchCreateUserResponseMultiError(errors)
	}

	return nil
}

// BatchCreateUserResponseMultiError is an error wrapping multiple validation
// errors returned by BatchCreateUserResponse.ValidateAll() if the designated
// constraints aren't met.
type BatchCreateUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchCreateUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchCreateUserResponseMultiError) AllErrors() []error { return m }

// BatchCreateUserResponseValidationError is the validation error returned by
// BatchCreateUserResponse.Validate if the designated constraints aren't met.
type BatchCreateUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchCreateUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchCreateUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchCreateUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchCreateUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchCreateUserResponseValidationError) ErrorName() string {
	return "BatchCreateUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BatchCreateUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchCreateUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchCreateUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchCreateUserResponseValidationError{}

// Validate checks the field values on UpdateUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserRequestMultiError, or nil if none found.
func (m *UpdateUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if !_UpdateUserRequest_Username_Pattern.MatchString(m.GetUsername()) {
		err := UpdateUserRequestValidationError{
			field:  "Username",
			reason: "value does not match regex pattern \"^[a-zA-Z][a-zA-Z0-9_-]{4,15}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Nickname

	// no validation rules for Realname

	if l := utf8.RuneCountInString(m.GetPassword()); l < 6 || l > 16 {
		err := UpdateUserRequestValidationError{
			field:  "Password",
			reason: "value length must be between 6 and 16 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Role

	// no validation rules for Status

	if len(errors) > 0 {
		return UpdateUserRequestMultiError(errors)
	}

	return nil
}

// UpdateUserRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateUserRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserRequestMultiError) AllErrors() []error { return m }

// UpdateUserRequestValidationError is the validation error returned by
// UpdateUserRequest.Validate if the designated constraints aren't met.
type UpdateUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserRequestValidationError) ErrorName() string {
	return "UpdateUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserRequestValidationError{}

var _UpdateUserRequest_Username_Pattern = regexp.MustCompile("^[a-zA-Z][a-zA-Z0-9_-]{4,15}$")

// Validate checks the field values on ListUsersResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListUsersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUsersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUsersResponseMultiError, or nil if none found.
func (m *ListUsersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUsersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUsersResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUsersResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUsersResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListUsersResponseMultiError(errors)
	}

	return nil
}

// ListUsersResponseMultiError is an error wrapping multiple validation errors
// returned by ListUsersResponse.ValidateAll() if the designated constraints
// aren't met.
type ListUsersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUsersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUsersResponseMultiError) AllErrors() []error { return m }

// ListUsersResponseValidationError is the validation error returned by
// ListUsersResponse.Validate if the designated constraints aren't met.
type ListUsersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUsersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUsersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUsersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUsersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUsersResponseValidationError) ErrorName() string {
	return "ListUsersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListUsersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUsersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUsersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUsersResponseValidationError{}

// Validate checks the field values on ListUsersRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListUsersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUsersRequestMultiError, or nil if none found.
func (m *ListUsersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUsersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for Nickname

	// no validation rules for Realname

	// no validation rules for Page

	// no validation rules for PerPage

	if m.Role != nil {
		// no validation rules for Role
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if len(errors) > 0 {
		return ListUsersRequestMultiError(errors)
	}

	return nil
}

// ListUsersRequestMultiError is an error wrapping multiple validation errors
// returned by ListUsersRequest.ValidateAll() if the designated constraints
// aren't met.
type ListUsersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUsersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUsersRequestMultiError) AllErrors() []error { return m }

// ListUsersRequestValidationError is the validation error returned by
// ListUsersRequest.Validate if the designated constraints aren't met.
type ListUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUsersRequestValidationError) ErrorName() string { return "ListUsersRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUsersRequestValidationError{}

// Validate checks the field values on UserExpiration with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserExpiration) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserExpiration with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserExpirationMultiError,
// or nil if none found.
func (m *UserExpiration) ValidateAll() error {
	return m.validate(true)
}

func (m *UserExpiration) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for Type

	// no validation rules for PeriodValue

	// no validation rules for EndValue

	if all {
		switch v := interface{}(m.GetStartTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserExpirationValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserExpirationValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserExpirationValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserExpirationValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserExpirationValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserExpirationValidationError{
				field:  "EndTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserExpirationMultiError(errors)
	}

	return nil
}

// UserExpirationMultiError is an error wrapping multiple validation errors
// returned by UserExpiration.ValidateAll() if the designated constraints
// aren't met.
type UserExpirationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserExpirationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserExpirationMultiError) AllErrors() []error { return m }

// UserExpirationValidationError is the validation error returned by
// UserExpiration.Validate if the designated constraints aren't met.
type UserExpirationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserExpirationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserExpirationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserExpirationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserExpirationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserExpirationValidationError) ErrorName() string { return "UserExpirationValidationError" }

// Error satisfies the builtin error interface
func (e UserExpirationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserExpiration.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserExpirationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserExpirationValidationError{}

// Validate checks the field values on CreateUserExpirationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateUserExpirationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserExpirationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserExpirationRequestMultiError, or nil if none found.
func (m *CreateUserExpirationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserExpirationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for PeriodValue

	// no validation rules for EndValue

	if all {
		switch v := interface{}(m.GetStartTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateUserExpirationRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateUserExpirationRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateUserExpirationRequestValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateUserExpirationRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateUserExpirationRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateUserExpirationRequestValidationError{
				field:  "EndTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateUserExpirationRequestMultiError(errors)
	}

	return nil
}

// CreateUserExpirationRequestMultiError is an error wrapping multiple
// validation errors returned by CreateUserExpirationRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateUserExpirationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserExpirationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserExpirationRequestMultiError) AllErrors() []error { return m }

// CreateUserExpirationRequestValidationError is the validation error returned
// by CreateUserExpirationRequest.Validate if the designated constraints
// aren't met.
type CreateUserExpirationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserExpirationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserExpirationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserExpirationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserExpirationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserExpirationRequestValidationError) ErrorName() string {
	return "CreateUserExpirationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserExpirationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserExpirationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserExpirationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserExpirationRequestValidationError{}

// Validate checks the field values on DeleteUserExpirationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserExpirationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserExpirationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserExpirationRequestMultiError, or nil if none found.
func (m *DeleteUserExpirationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserExpirationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteUserExpirationRequestMultiError(errors)
	}

	return nil
}

// DeleteUserExpirationRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteUserExpirationRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteUserExpirationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserExpirationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserExpirationRequestMultiError) AllErrors() []error { return m }

// DeleteUserExpirationRequestValidationError is the validation error returned
// by DeleteUserExpirationRequest.Validate if the designated constraints
// aren't met.
type DeleteUserExpirationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserExpirationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserExpirationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserExpirationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserExpirationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserExpirationRequestValidationError) ErrorName() string {
	return "DeleteUserExpirationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserExpirationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserExpirationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserExpirationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserExpirationRequestValidationError{}

// Validate checks the field values on ListUserExpirationsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserExpirationsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserExpirationsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserExpirationsRequestMultiError, or nil if none found.
func (m *ListUserExpirationsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserExpirationsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListUserExpirationsRequestMultiError(errors)
	}

	return nil
}

// ListUserExpirationsRequestMultiError is an error wrapping multiple
// validation errors returned by ListUserExpirationsRequest.ValidateAll() if
// the designated constraints aren't met.
type ListUserExpirationsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserExpirationsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserExpirationsRequestMultiError) AllErrors() []error { return m }

// ListUserExpirationsRequestValidationError is the validation error returned
// by ListUserExpirationsRequest.Validate if the designated constraints aren't met.
type ListUserExpirationsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserExpirationsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserExpirationsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserExpirationsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserExpirationsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserExpirationsRequestValidationError) ErrorName() string {
	return "ListUserExpirationsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserExpirationsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserExpirationsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserExpirationsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserExpirationsRequestValidationError{}

// Validate checks the field values on ListUserExpirationsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserExpirationsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserExpirationsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserExpirationsResponseMultiError, or nil if none found.
func (m *ListUserExpirationsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserExpirationsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUserExpirationsResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUserExpirationsResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUserExpirationsResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListUserExpirationsResponseMultiError(errors)
	}

	return nil
}

// ListUserExpirationsResponseMultiError is an error wrapping multiple
// validation errors returned by ListUserExpirationsResponse.ValidateAll() if
// the designated constraints aren't met.
type ListUserExpirationsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserExpirationsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserExpirationsResponseMultiError) AllErrors() []error { return m }

// ListUserExpirationsResponseValidationError is the validation error returned
// by ListUserExpirationsResponse.Validate if the designated constraints
// aren't met.
type ListUserExpirationsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserExpirationsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserExpirationsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserExpirationsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserExpirationsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserExpirationsResponseValidationError) ErrorName() string {
	return "ListUserExpirationsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserExpirationsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserExpirationsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserExpirationsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserExpirationsResponseValidationError{}

// Validate checks the field values on UserBadge with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserBadge) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserBadge with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserBadgeMultiError, or nil
// if none found.
func (m *UserBadge) ValidateAll() error {
	return m.validate(true)
}

func (m *UserBadge) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Image

	// no validation rules for ImageGif

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserBadgeValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserBadgeValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserBadgeValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserBadgeMultiError(errors)
	}

	return nil
}

// UserBadgeMultiError is an error wrapping multiple validation errors returned
// by UserBadge.ValidateAll() if the designated constraints aren't met.
type UserBadgeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserBadgeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserBadgeMultiError) AllErrors() []error { return m }

// UserBadgeValidationError is the validation error returned by
// UserBadge.Validate if the designated constraints aren't met.
type UserBadgeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserBadgeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserBadgeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserBadgeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserBadgeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserBadgeValidationError) ErrorName() string { return "UserBadgeValidationError" }

// Error satisfies the builtin error interface
func (e UserBadgeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserBadge.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserBadgeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserBadgeValidationError{}

// Validate checks the field values on ListUserBadgesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserBadgesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserBadgesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserBadgesRequestMultiError, or nil if none found.
func (m *ListUserBadgesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserBadgesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Page

	// no validation rules for PerPage

	if m.Type != nil {
		// no validation rules for Type
	}

	if len(errors) > 0 {
		return ListUserBadgesRequestMultiError(errors)
	}

	return nil
}

// ListUserBadgesRequestMultiError is an error wrapping multiple validation
// errors returned by ListUserBadgesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListUserBadgesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserBadgesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserBadgesRequestMultiError) AllErrors() []error { return m }

// ListUserBadgesRequestValidationError is the validation error returned by
// ListUserBadgesRequest.Validate if the designated constraints aren't met.
type ListUserBadgesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserBadgesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserBadgesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserBadgesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserBadgesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserBadgesRequestValidationError) ErrorName() string {
	return "ListUserBadgesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserBadgesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserBadgesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserBadgesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserBadgesRequestValidationError{}

// Validate checks the field values on GetUserBadgeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserBadgeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserBadgeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserBadgeRequestMultiError, or nil if none found.
func (m *GetUserBadgeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserBadgeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetUserBadgeRequestMultiError(errors)
	}

	return nil
}

// GetUserBadgeRequestMultiError is an error wrapping multiple validation
// errors returned by GetUserBadgeRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserBadgeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserBadgeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserBadgeRequestMultiError) AllErrors() []error { return m }

// GetUserBadgeRequestValidationError is the validation error returned by
// GetUserBadgeRequest.Validate if the designated constraints aren't met.
type GetUserBadgeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserBadgeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserBadgeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserBadgeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserBadgeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserBadgeRequestValidationError) ErrorName() string {
	return "GetUserBadgeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserBadgeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserBadgeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserBadgeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserBadgeRequestValidationError{}

// Validate checks the field values on ListUserBadgesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserBadgesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserBadgesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserBadgesResponseMultiError, or nil if none found.
func (m *ListUserBadgesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserBadgesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUserBadgesResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUserBadgesResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUserBadgesResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListUserBadgesResponseMultiError(errors)
	}

	return nil
}

// ListUserBadgesResponseMultiError is an error wrapping multiple validation
// errors returned by ListUserBadgesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListUserBadgesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserBadgesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserBadgesResponseMultiError) AllErrors() []error { return m }

// ListUserBadgesResponseValidationError is the validation error returned by
// ListUserBadgesResponse.Validate if the designated constraints aren't met.
type ListUserBadgesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserBadgesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserBadgesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserBadgesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserBadgesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserBadgesResponseValidationError) ErrorName() string {
	return "ListUserBadgesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserBadgesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserBadgesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserBadgesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserBadgesResponseValidationError{}

// Validate checks the field values on CreateUserBadgeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateUserBadgeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserBadgeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserBadgeRequestMultiError, or nil if none found.
func (m *CreateUserBadgeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserBadgeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Image

	// no validation rules for ImageGif

	// no validation rules for Type

	if len(errors) > 0 {
		return CreateUserBadgeRequestMultiError(errors)
	}

	return nil
}

// CreateUserBadgeRequestMultiError is an error wrapping multiple validation
// errors returned by CreateUserBadgeRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateUserBadgeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserBadgeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserBadgeRequestMultiError) AllErrors() []error { return m }

// CreateUserBadgeRequestValidationError is the validation error returned by
// CreateUserBadgeRequest.Validate if the designated constraints aren't met.
type CreateUserBadgeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserBadgeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserBadgeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserBadgeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserBadgeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserBadgeRequestValidationError) ErrorName() string {
	return "CreateUserBadgeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserBadgeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserBadgeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserBadgeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserBadgeRequestValidationError{}

// Validate checks the field values on DeleteUserBadgeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserBadgeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserBadgeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserBadgeRequestMultiError, or nil if none found.
func (m *DeleteUserBadgeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserBadgeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteUserBadgeRequestMultiError(errors)
	}

	return nil
}

// DeleteUserBadgeRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteUserBadgeRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteUserBadgeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserBadgeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserBadgeRequestMultiError) AllErrors() []error { return m }

// DeleteUserBadgeRequestValidationError is the validation error returned by
// DeleteUserBadgeRequest.Validate if the designated constraints aren't met.
type DeleteUserBadgeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserBadgeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserBadgeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserBadgeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserBadgeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserBadgeRequestValidationError) ErrorName() string {
	return "DeleteUserBadgeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserBadgeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserBadgeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserBadgeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserBadgeRequestValidationError{}

// Validate checks the field values on UpdateUserBadgeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserBadgeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserBadgeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserBadgeRequestMultiError, or nil if none found.
func (m *UpdateUserBadgeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserBadgeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Image

	// no validation rules for ImageGif

	// no validation rules for Type

	if len(errors) > 0 {
		return UpdateUserBadgeRequestMultiError(errors)
	}

	return nil
}

// UpdateUserBadgeRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateUserBadgeRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateUserBadgeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserBadgeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserBadgeRequestMultiError) AllErrors() []error { return m }

// UpdateUserBadgeRequestValidationError is the validation error returned by
// UpdateUserBadgeRequest.Validate if the designated constraints aren't met.
type UpdateUserBadgeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserBadgeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserBadgeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserBadgeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserBadgeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserBadgeRequestValidationError) ErrorName() string {
	return "UpdateUserBadgeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserBadgeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserBadgeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserBadgeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserBadgeRequestValidationError{}

// Validate checks the field values on UserUserBadge with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserUserBadge) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserUserBadge with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserUserBadgeMultiError, or
// nil if none found.
func (m *UserUserBadge) ValidateAll() error {
	return m.validate(true)
}

func (m *UserUserBadge) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for BadgeId

	if all {
		switch v := interface{}(m.GetBadge()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserUserBadgeValidationError{
					field:  "Badge",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserUserBadgeValidationError{
					field:  "Badge",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBadge()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserUserBadgeValidationError{
				field:  "Badge",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserUserBadgeValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserUserBadgeValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserUserBadgeValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserUserBadgeMultiError(errors)
	}

	return nil
}

// UserUserBadgeMultiError is an error wrapping multiple validation errors
// returned by UserUserBadge.ValidateAll() if the designated constraints
// aren't met.
type UserUserBadgeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserUserBadgeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserUserBadgeMultiError) AllErrors() []error { return m }

// UserUserBadgeValidationError is the validation error returned by
// UserUserBadge.Validate if the designated constraints aren't met.
type UserUserBadgeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserUserBadgeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserUserBadgeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserUserBadgeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserUserBadgeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserUserBadgeValidationError) ErrorName() string { return "UserUserBadgeValidationError" }

// Error satisfies the builtin error interface
func (e UserUserBadgeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserUserBadge.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserUserBadgeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserUserBadgeValidationError{}

// Validate checks the field values on CreateUserUserBadgeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateUserUserBadgeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserUserBadgeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserUserBadgeRequestMultiError, or nil if none found.
func (m *CreateUserUserBadgeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserUserBadgeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for BadgeId

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateUserUserBadgeRequestValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateUserUserBadgeRequestValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateUserUserBadgeRequestValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateUserUserBadgeRequestMultiError(errors)
	}

	return nil
}

// CreateUserUserBadgeRequestMultiError is an error wrapping multiple
// validation errors returned by CreateUserUserBadgeRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateUserUserBadgeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserUserBadgeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserUserBadgeRequestMultiError) AllErrors() []error { return m }

// CreateUserUserBadgeRequestValidationError is the validation error returned
// by CreateUserUserBadgeRequest.Validate if the designated constraints aren't met.
type CreateUserUserBadgeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserUserBadgeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserUserBadgeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserUserBadgeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserUserBadgeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserUserBadgeRequestValidationError) ErrorName() string {
	return "CreateUserUserBadgeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserUserBadgeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserUserBadgeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserUserBadgeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserUserBadgeRequestValidationError{}

// Validate checks the field values on ListUserUserBadgesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserUserBadgesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserUserBadgesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserUserBadgesRequestMultiError, or nil if none found.
func (m *ListUserUserBadgesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserUserBadgesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Page

	// no validation rules for PerPage

	if len(errors) > 0 {
		return ListUserUserBadgesRequestMultiError(errors)
	}

	return nil
}

// ListUserUserBadgesRequestMultiError is an error wrapping multiple validation
// errors returned by ListUserUserBadgesRequest.ValidateAll() if the
// designated constraints aren't met.
type ListUserUserBadgesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserUserBadgesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserUserBadgesRequestMultiError) AllErrors() []error { return m }

// ListUserUserBadgesRequestValidationError is the validation error returned by
// ListUserUserBadgesRequest.Validate if the designated constraints aren't met.
type ListUserUserBadgesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserUserBadgesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserUserBadgesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserUserBadgesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserUserBadgesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserUserBadgesRequestValidationError) ErrorName() string {
	return "ListUserUserBadgesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserUserBadgesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserUserBadgesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserUserBadgesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserUserBadgesRequestValidationError{}

// Validate checks the field values on ListUserUserBadgesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserUserBadgesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserUserBadgesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserUserBadgesResponseMultiError, or nil if none found.
func (m *ListUserUserBadgesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserUserBadgesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUserUserBadgesResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUserUserBadgesResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUserUserBadgesResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListUserUserBadgesResponseMultiError(errors)
	}

	return nil
}

// ListUserUserBadgesResponseMultiError is an error wrapping multiple
// validation errors returned by ListUserUserBadgesResponse.ValidateAll() if
// the designated constraints aren't met.
type ListUserUserBadgesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserUserBadgesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserUserBadgesResponseMultiError) AllErrors() []error { return m }

// ListUserUserBadgesResponseValidationError is the validation error returned
// by ListUserUserBadgesResponse.Validate if the designated constraints aren't met.
type ListUserUserBadgesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserUserBadgesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserUserBadgesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserUserBadgesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserUserBadgesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserUserBadgesResponseValidationError) ErrorName() string {
	return "ListUserUserBadgesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserUserBadgesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserUserBadgesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserUserBadgesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserUserBadgesResponseValidationError{}

// Validate checks the field values on DeleteUserUserBadgeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserUserBadgeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserUserBadgeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserUserBadgeRequestMultiError, or nil if none found.
func (m *DeleteUserUserBadgeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserUserBadgeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteUserUserBadgeRequestMultiError(errors)
	}

	return nil
}

// DeleteUserUserBadgeRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteUserUserBadgeRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteUserUserBadgeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserUserBadgeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserUserBadgeRequestMultiError) AllErrors() []error { return m }

// DeleteUserUserBadgeRequestValidationError is the validation error returned
// by DeleteUserUserBadgeRequest.Validate if the designated constraints aren't met.
type DeleteUserUserBadgeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserUserBadgeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserUserBadgeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserUserBadgeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserUserBadgeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserUserBadgeRequestValidationError) ErrorName() string {
	return "DeleteUserUserBadgeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserUserBadgeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserUserBadgeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserUserBadgeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserUserBadgeRequestValidationError{}

// Validate checks the field values on BatchCreateUserRequest_User with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchCreateUserRequest_User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchCreateUserRequest_User with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchCreateUserRequest_UserMultiError, or nil if none found.
func (m *BatchCreateUserRequest_User) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchCreateUserRequest_User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for Nickname

	if len(errors) > 0 {
		return BatchCreateUserRequest_UserMultiError(errors)
	}

	return nil
}

// BatchCreateUserRequest_UserMultiError is an error wrapping multiple
// validation errors returned by BatchCreateUserRequest_User.ValidateAll() if
// the designated constraints aren't met.
type BatchCreateUserRequest_UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchCreateUserRequest_UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchCreateUserRequest_UserMultiError) AllErrors() []error { return m }

// BatchCreateUserRequest_UserValidationError is the validation error returned
// by BatchCreateUserRequest_User.Validate if the designated constraints
// aren't met.
type BatchCreateUserRequest_UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchCreateUserRequest_UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchCreateUserRequest_UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchCreateUserRequest_UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchCreateUserRequest_UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchCreateUserRequest_UserValidationError) ErrorName() string {
	return "BatchCreateUserRequest_UserValidationError"
}

// Error satisfies the builtin error interface
func (e BatchCreateUserRequest_UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchCreateUserRequest_User.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchCreateUserRequest_UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchCreateUserRequest_UserValidationError{}

// Validate checks the field values on BatchCreateUserResponse_User with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchCreateUserResponse_User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchCreateUserResponse_User with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchCreateUserResponse_UserMultiError, or nil if none found.
func (m *BatchCreateUserResponse_User) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchCreateUserResponse_User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for Password

	// no validation rules for Reason

	if len(errors) > 0 {
		return BatchCreateUserResponse_UserMultiError(errors)
	}

	return nil
}

// BatchCreateUserResponse_UserMultiError is an error wrapping multiple
// validation errors returned by BatchCreateUserResponse_User.ValidateAll() if
// the designated constraints aren't met.
type BatchCreateUserResponse_UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchCreateUserResponse_UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchCreateUserResponse_UserMultiError) AllErrors() []error { return m }

// BatchCreateUserResponse_UserValidationError is the validation error returned
// by BatchCreateUserResponse_User.Validate if the designated constraints
// aren't met.
type BatchCreateUserResponse_UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchCreateUserResponse_UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchCreateUserResponse_UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchCreateUserResponse_UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchCreateUserResponse_UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchCreateUserResponse_UserValidationError) ErrorName() string {
	return "BatchCreateUserResponse_UserValidationError"
}

// Error satisfies the builtin error interface
func (e BatchCreateUserResponse_UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchCreateUserResponse_User.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchCreateUserResponse_UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchCreateUserResponse_UserValidationError{}
