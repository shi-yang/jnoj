// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.4
// - protoc             v4.23.4
// source: v1/user.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	auth "jnoj/internal/middleware/auth"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

// auth.
const OperationUserServiceBatchCreateUser = "/jnoj.admin.v1.UserService/BatchCreateUser"
const OperationUserServiceCreateUser = "/jnoj.admin.v1.UserService/CreateUser"
const OperationUserServiceCreateUserBadge = "/jnoj.admin.v1.UserService/CreateUserBadge"
const OperationUserServiceCreateUserExpiration = "/jnoj.admin.v1.UserService/CreateUserExpiration"
const OperationUserServiceCreateUserUserBadge = "/jnoj.admin.v1.UserService/CreateUserUserBadge"
const OperationUserServiceDeleteUserBadge = "/jnoj.admin.v1.UserService/DeleteUserBadge"
const OperationUserServiceDeleteUserExpiration = "/jnoj.admin.v1.UserService/DeleteUserExpiration"
const OperationUserServiceDeleteUserUserBadge = "/jnoj.admin.v1.UserService/DeleteUserUserBadge"
const OperationUserServiceGetUser = "/jnoj.admin.v1.UserService/GetUser"
const OperationUserServiceGetUserBadge = "/jnoj.admin.v1.UserService/GetUserBadge"
const OperationUserServiceListUserBadges = "/jnoj.admin.v1.UserService/ListUserBadges"
const OperationUserServiceListUserExpirations = "/jnoj.admin.v1.UserService/ListUserExpirations"
const OperationUserServiceListUserUserBadges = "/jnoj.admin.v1.UserService/ListUserUserBadges"
const OperationUserServiceListUsers = "/jnoj.admin.v1.UserService/ListUsers"
const OperationUserServiceUpdateUser = "/jnoj.admin.v1.UserService/UpdateUser"
const OperationUserServiceUpdateUserBadge = "/jnoj.admin.v1.UserService/UpdateUserBadge"

type UserServiceHTTPServer interface {
	BatchCreateUser(context.Context, *BatchCreateUserRequest) (*BatchCreateUserResponse, error)
	CreateUser(context.Context, *CreateUserRequest) (*User, error)
	CreateUserBadge(context.Context, *CreateUserBadgeRequest) (*UserBadge, error)
	CreateUserExpiration(context.Context, *CreateUserExpirationRequest) (*emptypb.Empty, error)
	CreateUserUserBadge(context.Context, *CreateUserUserBadgeRequest) (*UserUserBadge, error)
	DeleteUserBadge(context.Context, *DeleteUserBadgeRequest) (*emptypb.Empty, error)
	DeleteUserExpiration(context.Context, *DeleteUserExpirationRequest) (*emptypb.Empty, error)
	DeleteUserUserBadge(context.Context, *DeleteUserUserBadgeRequest) (*emptypb.Empty, error)
	GetUser(context.Context, *GetUserRequest) (*User, error)
	GetUserBadge(context.Context, *GetUserBadgeRequest) (*UserBadge, error)
	ListUserBadges(context.Context, *ListUserBadgesRequest) (*ListUserBadgesResponse, error)
	ListUserExpirations(context.Context, *ListUserExpirationsRequest) (*ListUserExpirationsResponse, error)
	ListUserUserBadges(context.Context, *ListUserUserBadgesRequest) (*ListUserUserBadgesResponse, error)
	ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*User, error)
	UpdateUserBadge(context.Context, *UpdateUserBadgeRequest) (*UserUserBadge, error)
}

func RegisterUserServiceHTTPServer(s *http.Server, srv UserServiceHTTPServer) {
	s.Use("/jnoj.admin.v1.UserService/GetUserInfo", auth.User())
	r := s.Route("/")
	r.GET("/users/{id}", _UserService_GetUser0_HTTP_Handler(srv))
	r.POST("/users", _UserService_CreateUser0_HTTP_Handler(srv))
	r.POST("/batch_users", _UserService_BatchCreateUser0_HTTP_Handler(srv))
	r.PUT("/users/{id}", _UserService_UpdateUser0_HTTP_Handler(srv))
	r.GET("/users", _UserService_ListUsers0_HTTP_Handler(srv))
	r.POST("/user_expirations", _UserService_CreateUserExpiration0_HTTP_Handler(srv))
	r.DELETE("/user_expirations/{id}", _UserService_DeleteUserExpiration0_HTTP_Handler(srv))
	r.GET("/user_expirations", _UserService_ListUserExpirations0_HTTP_Handler(srv))
	r.GET("/user_badges", _UserService_ListUserBadges0_HTTP_Handler(srv))
	r.GET("/user_badges/{id}", _UserService_GetUserBadge0_HTTP_Handler(srv))
	r.POST("/user_badges_json", _UserService_CreateUserBadge0_HTTP_Handler(srv))
	r.DELETE("/user_badges/{id}", _UserService_DeleteUserBadge0_HTTP_Handler(srv))
	r.PUT("/user_badges_json/{id}", _UserService_UpdateUserBadge0_HTTP_Handler(srv))
	r.POST("/users/{user_id}/user_badges", _UserService_CreateUserUserBadge0_HTTP_Handler(srv))
	r.GET("/users/{user_id}/user_badges", _UserService_ListUserUserBadges0_HTTP_Handler(srv))
	r.DELETE("/users/{user_id}/user_badges/{id}", _UserService_DeleteUserUserBadge0_HTTP_Handler(srv))
}

func _UserService_GetUser0_HTTP_Handler(srv UserServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserServiceGetUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUser(ctx, req.(*GetUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*User)
		return ctx.Result(200, reply)
	}
}

func _UserService_CreateUser0_HTTP_Handler(srv UserServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateUserRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserServiceCreateUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateUser(ctx, req.(*CreateUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*User)
		return ctx.Result(200, reply)
	}
}

func _UserService_BatchCreateUser0_HTTP_Handler(srv UserServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BatchCreateUserRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserServiceBatchCreateUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BatchCreateUser(ctx, req.(*BatchCreateUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BatchCreateUserResponse)
		return ctx.Result(200, reply)
	}
}

func _UserService_UpdateUser0_HTTP_Handler(srv UserServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateUserRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserServiceUpdateUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateUser(ctx, req.(*UpdateUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*User)
		return ctx.Result(200, reply)
	}
}

func _UserService_ListUsers0_HTTP_Handler(srv UserServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListUsersRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserServiceListUsers)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListUsers(ctx, req.(*ListUsersRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListUsersResponse)
		return ctx.Result(200, reply)
	}
}

func _UserService_CreateUserExpiration0_HTTP_Handler(srv UserServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateUserExpirationRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserServiceCreateUserExpiration)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateUserExpiration(ctx, req.(*CreateUserExpirationRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _UserService_DeleteUserExpiration0_HTTP_Handler(srv UserServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteUserExpirationRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserServiceDeleteUserExpiration)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteUserExpiration(ctx, req.(*DeleteUserExpirationRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _UserService_ListUserExpirations0_HTTP_Handler(srv UserServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListUserExpirationsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserServiceListUserExpirations)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListUserExpirations(ctx, req.(*ListUserExpirationsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListUserExpirationsResponse)
		return ctx.Result(200, reply)
	}
}

func _UserService_ListUserBadges0_HTTP_Handler(srv UserServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListUserBadgesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserServiceListUserBadges)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListUserBadges(ctx, req.(*ListUserBadgesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListUserBadgesResponse)
		return ctx.Result(200, reply)
	}
}

func _UserService_GetUserBadge0_HTTP_Handler(srv UserServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserBadgeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserServiceGetUserBadge)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserBadge(ctx, req.(*GetUserBadgeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserBadge)
		return ctx.Result(200, reply)
	}
}

func _UserService_CreateUserBadge0_HTTP_Handler(srv UserServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateUserBadgeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserServiceCreateUserBadge)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateUserBadge(ctx, req.(*CreateUserBadgeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserBadge)
		return ctx.Result(200, reply)
	}
}

func _UserService_DeleteUserBadge0_HTTP_Handler(srv UserServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteUserBadgeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserServiceDeleteUserBadge)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteUserBadge(ctx, req.(*DeleteUserBadgeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _UserService_UpdateUserBadge0_HTTP_Handler(srv UserServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateUserBadgeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserServiceUpdateUserBadge)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateUserBadge(ctx, req.(*UpdateUserBadgeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserUserBadge)
		return ctx.Result(200, reply)
	}
}

func _UserService_CreateUserUserBadge0_HTTP_Handler(srv UserServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateUserUserBadgeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserServiceCreateUserUserBadge)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateUserUserBadge(ctx, req.(*CreateUserUserBadgeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserUserBadge)
		return ctx.Result(200, reply)
	}
}

func _UserService_ListUserUserBadges0_HTTP_Handler(srv UserServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListUserUserBadgesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserServiceListUserUserBadges)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListUserUserBadges(ctx, req.(*ListUserUserBadgesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListUserUserBadgesResponse)
		return ctx.Result(200, reply)
	}
}

func _UserService_DeleteUserUserBadge0_HTTP_Handler(srv UserServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteUserUserBadgeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserServiceDeleteUserUserBadge)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteUserUserBadge(ctx, req.(*DeleteUserUserBadgeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

type UserServiceHTTPClient interface {
	BatchCreateUser(ctx context.Context, req *BatchCreateUserRequest, opts ...http.CallOption) (rsp *BatchCreateUserResponse, err error)
	CreateUser(ctx context.Context, req *CreateUserRequest, opts ...http.CallOption) (rsp *User, err error)
	CreateUserBadge(ctx context.Context, req *CreateUserBadgeRequest, opts ...http.CallOption) (rsp *UserBadge, err error)
	CreateUserExpiration(ctx context.Context, req *CreateUserExpirationRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	CreateUserUserBadge(ctx context.Context, req *CreateUserUserBadgeRequest, opts ...http.CallOption) (rsp *UserUserBadge, err error)
	DeleteUserBadge(ctx context.Context, req *DeleteUserBadgeRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DeleteUserExpiration(ctx context.Context, req *DeleteUserExpirationRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DeleteUserUserBadge(ctx context.Context, req *DeleteUserUserBadgeRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	GetUser(ctx context.Context, req *GetUserRequest, opts ...http.CallOption) (rsp *User, err error)
	GetUserBadge(ctx context.Context, req *GetUserBadgeRequest, opts ...http.CallOption) (rsp *UserBadge, err error)
	ListUserBadges(ctx context.Context, req *ListUserBadgesRequest, opts ...http.CallOption) (rsp *ListUserBadgesResponse, err error)
	ListUserExpirations(ctx context.Context, req *ListUserExpirationsRequest, opts ...http.CallOption) (rsp *ListUserExpirationsResponse, err error)
	ListUserUserBadges(ctx context.Context, req *ListUserUserBadgesRequest, opts ...http.CallOption) (rsp *ListUserUserBadgesResponse, err error)
	ListUsers(ctx context.Context, req *ListUsersRequest, opts ...http.CallOption) (rsp *ListUsersResponse, err error)
	UpdateUser(ctx context.Context, req *UpdateUserRequest, opts ...http.CallOption) (rsp *User, err error)
	UpdateUserBadge(ctx context.Context, req *UpdateUserBadgeRequest, opts ...http.CallOption) (rsp *UserUserBadge, err error)
}

type UserServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewUserServiceHTTPClient(client *http.Client) UserServiceHTTPClient {
	return &UserServiceHTTPClientImpl{client}
}

func (c *UserServiceHTTPClientImpl) BatchCreateUser(ctx context.Context, in *BatchCreateUserRequest, opts ...http.CallOption) (*BatchCreateUserResponse, error) {
	var out BatchCreateUserResponse
	pattern := "/batch_users"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserServiceBatchCreateUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserServiceHTTPClientImpl) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...http.CallOption) (*User, error) {
	var out User
	pattern := "/users"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserServiceCreateUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserServiceHTTPClientImpl) CreateUserBadge(ctx context.Context, in *CreateUserBadgeRequest, opts ...http.CallOption) (*UserBadge, error) {
	var out UserBadge
	pattern := "/user_badges_json"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserServiceCreateUserBadge))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserServiceHTTPClientImpl) CreateUserExpiration(ctx context.Context, in *CreateUserExpirationRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/user_expirations"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserServiceCreateUserExpiration))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserServiceHTTPClientImpl) CreateUserUserBadge(ctx context.Context, in *CreateUserUserBadgeRequest, opts ...http.CallOption) (*UserUserBadge, error) {
	var out UserUserBadge
	pattern := "/users/{user_id}/user_badges"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserServiceCreateUserUserBadge))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserServiceHTTPClientImpl) DeleteUserBadge(ctx context.Context, in *DeleteUserBadgeRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/user_badges/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserServiceDeleteUserBadge))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserServiceHTTPClientImpl) DeleteUserExpiration(ctx context.Context, in *DeleteUserExpirationRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/user_expirations/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserServiceDeleteUserExpiration))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserServiceHTTPClientImpl) DeleteUserUserBadge(ctx context.Context, in *DeleteUserUserBadgeRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/users/{user_id}/user_badges/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserServiceDeleteUserUserBadge))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserServiceHTTPClientImpl) GetUser(ctx context.Context, in *GetUserRequest, opts ...http.CallOption) (*User, error) {
	var out User
	pattern := "/users/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserServiceGetUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserServiceHTTPClientImpl) GetUserBadge(ctx context.Context, in *GetUserBadgeRequest, opts ...http.CallOption) (*UserBadge, error) {
	var out UserBadge
	pattern := "/user_badges/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserServiceGetUserBadge))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserServiceHTTPClientImpl) ListUserBadges(ctx context.Context, in *ListUserBadgesRequest, opts ...http.CallOption) (*ListUserBadgesResponse, error) {
	var out ListUserBadgesResponse
	pattern := "/user_badges"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserServiceListUserBadges))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserServiceHTTPClientImpl) ListUserExpirations(ctx context.Context, in *ListUserExpirationsRequest, opts ...http.CallOption) (*ListUserExpirationsResponse, error) {
	var out ListUserExpirationsResponse
	pattern := "/user_expirations"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserServiceListUserExpirations))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserServiceHTTPClientImpl) ListUserUserBadges(ctx context.Context, in *ListUserUserBadgesRequest, opts ...http.CallOption) (*ListUserUserBadgesResponse, error) {
	var out ListUserUserBadgesResponse
	pattern := "/users/{user_id}/user_badges"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserServiceListUserUserBadges))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserServiceHTTPClientImpl) ListUsers(ctx context.Context, in *ListUsersRequest, opts ...http.CallOption) (*ListUsersResponse, error) {
	var out ListUsersResponse
	pattern := "/users"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserServiceListUsers))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserServiceHTTPClientImpl) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...http.CallOption) (*User, error) {
	var out User
	pattern := "/users/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserServiceUpdateUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserServiceHTTPClientImpl) UpdateUserBadge(ctx context.Context, in *UpdateUserBadgeRequest, opts ...http.CallOption) (*UserUserBadge, error) {
	var out UserUserBadge
	pattern := "/user_badges_json/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserServiceUpdateUserBadge))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
