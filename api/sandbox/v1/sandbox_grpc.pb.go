// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: v1/sandbox.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SandboxServiceClient is the client API for SandboxService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SandboxServiceClient interface {
	Run(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (*RunResponse, error)
	RunSubmission(ctx context.Context, in *RunSubmissionRequest, opts ...grpc.CallOption) (*RunSubmissionResponse, error)
	RunProblemFile(ctx context.Context, in *RunProblemFileRequest, opts ...grpc.CallOption) (*RunProblemFileResponse, error)
}

type sandboxServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSandboxServiceClient(cc grpc.ClientConnInterface) SandboxServiceClient {
	return &sandboxServiceClient{cc}
}

func (c *sandboxServiceClient) Run(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (*RunResponse, error) {
	out := new(RunResponse)
	err := c.cc.Invoke(ctx, "/jnoj.sandbox.v1.SandboxService/Run", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sandboxServiceClient) RunSubmission(ctx context.Context, in *RunSubmissionRequest, opts ...grpc.CallOption) (*RunSubmissionResponse, error) {
	out := new(RunSubmissionResponse)
	err := c.cc.Invoke(ctx, "/jnoj.sandbox.v1.SandboxService/RunSubmission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sandboxServiceClient) RunProblemFile(ctx context.Context, in *RunProblemFileRequest, opts ...grpc.CallOption) (*RunProblemFileResponse, error) {
	out := new(RunProblemFileResponse)
	err := c.cc.Invoke(ctx, "/jnoj.sandbox.v1.SandboxService/RunProblemFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SandboxServiceServer is the server API for SandboxService service.
// All implementations must embed UnimplementedSandboxServiceServer
// for forward compatibility
type SandboxServiceServer interface {
	Run(context.Context, *RunRequest) (*RunResponse, error)
	RunSubmission(context.Context, *RunSubmissionRequest) (*RunSubmissionResponse, error)
	RunProblemFile(context.Context, *RunProblemFileRequest) (*RunProblemFileResponse, error)
	mustEmbedUnimplementedSandboxServiceServer()
}

// UnimplementedSandboxServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSandboxServiceServer struct {
}

func (UnimplementedSandboxServiceServer) Run(context.Context, *RunRequest) (*RunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Run not implemented")
}
func (UnimplementedSandboxServiceServer) RunSubmission(context.Context, *RunSubmissionRequest) (*RunSubmissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunSubmission not implemented")
}
func (UnimplementedSandboxServiceServer) RunProblemFile(context.Context, *RunProblemFileRequest) (*RunProblemFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunProblemFile not implemented")
}
func (UnimplementedSandboxServiceServer) mustEmbedUnimplementedSandboxServiceServer() {}

// UnsafeSandboxServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SandboxServiceServer will
// result in compilation errors.
type UnsafeSandboxServiceServer interface {
	mustEmbedUnimplementedSandboxServiceServer()
}

func RegisterSandboxServiceServer(s grpc.ServiceRegistrar, srv SandboxServiceServer) {
	s.RegisterService(&SandboxService_ServiceDesc, srv)
}

func _SandboxService_Run_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SandboxServiceServer).Run(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jnoj.sandbox.v1.SandboxService/Run",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SandboxServiceServer).Run(ctx, req.(*RunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SandboxService_RunSubmission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunSubmissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SandboxServiceServer).RunSubmission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jnoj.sandbox.v1.SandboxService/RunSubmission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SandboxServiceServer).RunSubmission(ctx, req.(*RunSubmissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SandboxService_RunProblemFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunProblemFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SandboxServiceServer).RunProblemFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jnoj.sandbox.v1.SandboxService/RunProblemFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SandboxServiceServer).RunProblemFile(ctx, req.(*RunProblemFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SandboxService_ServiceDesc is the grpc.ServiceDesc for SandboxService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SandboxService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "jnoj.sandbox.v1.SandboxService",
	HandlerType: (*SandboxServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Run",
			Handler:    _SandboxService_Run_Handler,
		},
		{
			MethodName: "RunSubmission",
			Handler:    _SandboxService_RunSubmission_Handler,
		},
		{
			MethodName: "RunProblemFile",
			Handler:    _SandboxService_RunProblemFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/sandbox.proto",
}
