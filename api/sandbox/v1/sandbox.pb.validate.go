// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/sandbox.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on RunRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RunRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RunRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RunRequestMultiError, or
// nil if none found.
func (m *RunRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RunRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Source

	// no validation rules for Language

	// no validation rules for MemoryLimit

	// no validation rules for TimeLimit

	if m.Answer != nil {
		// no validation rules for Answer
	}

	if m.CheckerSource != nil {
		// no validation rules for CheckerSource
	}

	if m.CheckerLanguage != nil {
		// no validation rules for CheckerLanguage
	}

	if len(errors) > 0 {
		return RunRequestMultiError(errors)
	}

	return nil
}

// RunRequestMultiError is an error wrapping multiple validation errors
// returned by RunRequest.ValidateAll() if the designated constraints aren't met.
type RunRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RunRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RunRequestMultiError) AllErrors() []error { return m }

// RunRequestValidationError is the validation error returned by
// RunRequest.Validate if the designated constraints aren't met.
type RunRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RunRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RunRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RunRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RunRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RunRequestValidationError) ErrorName() string { return "RunRequestValidationError" }

// Error satisfies the builtin error interface
func (e RunRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRunRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RunRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RunRequestValidationError{}

// Validate checks the field values on RunResult with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RunResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RunResult with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RunResultMultiError, or nil
// if none found.
func (m *RunResult) ValidateAll() error {
	return m.validate(true)
}

func (m *RunResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Stdout

	// no validation rules for Stderr

	// no validation rules for Time

	// no validation rules for Memory

	// no validation rules for ExitCode

	// no validation rules for ErrMsg

	// no validation rules for CheckerStdout

	// no validation rules for CheckerExitCode

	if len(errors) > 0 {
		return RunResultMultiError(errors)
	}

	return nil
}

// RunResultMultiError is an error wrapping multiple validation errors returned
// by RunResult.ValidateAll() if the designated constraints aren't met.
type RunResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RunResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RunResultMultiError) AllErrors() []error { return m }

// RunResultValidationError is the validation error returned by
// RunResult.Validate if the designated constraints aren't met.
type RunResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RunResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RunResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RunResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RunResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RunResultValidationError) ErrorName() string { return "RunResultValidationError" }

// Error satisfies the builtin error interface
func (e RunResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRunResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RunResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RunResultValidationError{}

// Validate checks the field values on RunResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RunResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RunResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RunResponseMultiError, or
// nil if none found.
func (m *RunResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RunResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RunResponseValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RunResponseValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RunResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for CompileMsg

	if len(errors) > 0 {
		return RunResponseMultiError(errors)
	}

	return nil
}

// RunResponseMultiError is an error wrapping multiple validation errors
// returned by RunResponse.ValidateAll() if the designated constraints aren't met.
type RunResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RunResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RunResponseMultiError) AllErrors() []error { return m }

// RunResponseValidationError is the validation error returned by
// RunResponse.Validate if the designated constraints aren't met.
type RunResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RunResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RunResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RunResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RunResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RunResponseValidationError) ErrorName() string { return "RunResponseValidationError" }

// Error satisfies the builtin error interface
func (e RunResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRunResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RunResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RunResponseValidationError{}

// Validate checks the field values on RunSubmissionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RunSubmissionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RunSubmissionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RunSubmissionRequestMultiError, or nil if none found.
func (m *RunSubmissionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RunSubmissionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SubmissionId

	if len(errors) > 0 {
		return RunSubmissionRequestMultiError(errors)
	}

	return nil
}

// RunSubmissionRequestMultiError is an error wrapping multiple validation
// errors returned by RunSubmissionRequest.ValidateAll() if the designated
// constraints aren't met.
type RunSubmissionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RunSubmissionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RunSubmissionRequestMultiError) AllErrors() []error { return m }

// RunSubmissionRequestValidationError is the validation error returned by
// RunSubmissionRequest.Validate if the designated constraints aren't met.
type RunSubmissionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RunSubmissionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RunSubmissionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RunSubmissionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RunSubmissionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RunSubmissionRequestValidationError) ErrorName() string {
	return "RunSubmissionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RunSubmissionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRunSubmissionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RunSubmissionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RunSubmissionRequestValidationError{}

// Validate checks the field values on RunSubmissionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RunSubmissionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RunSubmissionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RunSubmissionResponseMultiError, or nil if none found.
func (m *RunSubmissionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RunSubmissionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RunSubmissionResponseMultiError(errors)
	}

	return nil
}

// RunSubmissionResponseMultiError is an error wrapping multiple validation
// errors returned by RunSubmissionResponse.ValidateAll() if the designated
// constraints aren't met.
type RunSubmissionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RunSubmissionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RunSubmissionResponseMultiError) AllErrors() []error { return m }

// RunSubmissionResponseValidationError is the validation error returned by
// RunSubmissionResponse.Validate if the designated constraints aren't met.
type RunSubmissionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RunSubmissionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RunSubmissionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RunSubmissionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RunSubmissionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RunSubmissionResponseValidationError) ErrorName() string {
	return "RunSubmissionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RunSubmissionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRunSubmissionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RunSubmissionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RunSubmissionResponseValidationError{}

// Validate checks the field values on RunProblemFileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RunProblemFileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RunProblemFileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RunProblemFileRequestMultiError, or nil if none found.
func (m *RunProblemFileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RunProblemFileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProblemId

	// no validation rules for ProblemFileId

	if len(errors) > 0 {
		return RunProblemFileRequestMultiError(errors)
	}

	return nil
}

// RunProblemFileRequestMultiError is an error wrapping multiple validation
// errors returned by RunProblemFileRequest.ValidateAll() if the designated
// constraints aren't met.
type RunProblemFileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RunProblemFileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RunProblemFileRequestMultiError) AllErrors() []error { return m }

// RunProblemFileRequestValidationError is the validation error returned by
// RunProblemFileRequest.Validate if the designated constraints aren't met.
type RunProblemFileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RunProblemFileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RunProblemFileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RunProblemFileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RunProblemFileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RunProblemFileRequestValidationError) ErrorName() string {
	return "RunProblemFileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RunProblemFileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRunProblemFileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RunProblemFileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RunProblemFileRequestValidationError{}

// Validate checks the field values on RunProblemFileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RunProblemFileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RunProblemFileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RunProblemFileResponseMultiError, or nil if none found.
func (m *RunProblemFileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RunProblemFileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RunProblemFileResponseMultiError(errors)
	}

	return nil
}

// RunProblemFileResponseMultiError is an error wrapping multiple validation
// errors returned by RunProblemFileResponse.ValidateAll() if the designated
// constraints aren't met.
type RunProblemFileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RunProblemFileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RunProblemFileResponseMultiError) AllErrors() []error { return m }

// RunProblemFileResponseValidationError is the validation error returned by
// RunProblemFileResponse.Validate if the designated constraints aren't met.
type RunProblemFileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RunProblemFileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RunProblemFileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RunProblemFileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RunProblemFileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RunProblemFileResponseValidationError) ErrorName() string {
	return "RunProblemFileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RunProblemFileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRunProblemFileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RunProblemFileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RunProblemFileResponseValidationError{}

// Validate checks the field values on GetSystemInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSystemInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSystemInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSystemInfoRequestMultiError, or nil if none found.
func (m *GetSystemInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSystemInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetSystemInfoRequestMultiError(errors)
	}

	return nil
}

// GetSystemInfoRequestMultiError is an error wrapping multiple validation
// errors returned by GetSystemInfoRequest.ValidateAll() if the designated
// constraints aren't met.
type GetSystemInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSystemInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSystemInfoRequestMultiError) AllErrors() []error { return m }

// GetSystemInfoRequestValidationError is the validation error returned by
// GetSystemInfoRequest.Validate if the designated constraints aren't met.
type GetSystemInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSystemInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSystemInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSystemInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSystemInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSystemInfoRequestValidationError) ErrorName() string {
	return "GetSystemInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSystemInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSystemInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSystemInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSystemInfoRequestValidationError{}

// Validate checks the field values on GetSystemInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSystemInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSystemInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSystemInfoResponseMultiError, or nil if none found.
func (m *GetSystemInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSystemInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetHost()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSystemInfoResponseValidationError{
					field:  "Host",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSystemInfoResponseValidationError{
					field:  "Host",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHost()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSystemInfoResponseValidationError{
				field:  "Host",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCpu()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSystemInfoResponseValidationError{
					field:  "Cpu",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSystemInfoResponseValidationError{
					field:  "Cpu",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCpu()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSystemInfoResponseValidationError{
				field:  "Cpu",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMemory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSystemInfoResponseValidationError{
					field:  "Memory",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSystemInfoResponseValidationError{
					field:  "Memory",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMemory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSystemInfoResponseValidationError{
				field:  "Memory",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDisk()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSystemInfoResponseValidationError{
					field:  "Disk",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSystemInfoResponseValidationError{
					field:  "Disk",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDisk()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSystemInfoResponseValidationError{
				field:  "Disk",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetSystemInfoResponseMultiError(errors)
	}

	return nil
}

// GetSystemInfoResponseMultiError is an error wrapping multiple validation
// errors returned by GetSystemInfoResponse.ValidateAll() if the designated
// constraints aren't met.
type GetSystemInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSystemInfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSystemInfoResponseMultiError) AllErrors() []error { return m }

// GetSystemInfoResponseValidationError is the validation error returned by
// GetSystemInfoResponse.Validate if the designated constraints aren't met.
type GetSystemInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSystemInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSystemInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSystemInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSystemInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSystemInfoResponseValidationError) ErrorName() string {
	return "GetSystemInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSystemInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSystemInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSystemInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSystemInfoResponseValidationError{}

// Validate checks the field values on GetSystemInfoResponse_Host with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSystemInfoResponse_Host) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSystemInfoResponse_Host with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSystemInfoResponse_HostMultiError, or nil if none found.
func (m *GetSystemInfoResponse_Host) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSystemInfoResponse_Host) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInfoStat()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSystemInfoResponse_HostValidationError{
					field:  "InfoStat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSystemInfoResponse_HostValidationError{
					field:  "InfoStat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfoStat()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSystemInfoResponse_HostValidationError{
				field:  "InfoStat",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetSystemInfoResponse_HostMultiError(errors)
	}

	return nil
}

// GetSystemInfoResponse_HostMultiError is an error wrapping multiple
// validation errors returned by GetSystemInfoResponse_Host.ValidateAll() if
// the designated constraints aren't met.
type GetSystemInfoResponse_HostMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSystemInfoResponse_HostMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSystemInfoResponse_HostMultiError) AllErrors() []error { return m }

// GetSystemInfoResponse_HostValidationError is the validation error returned
// by GetSystemInfoResponse_Host.Validate if the designated constraints aren't met.
type GetSystemInfoResponse_HostValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSystemInfoResponse_HostValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSystemInfoResponse_HostValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSystemInfoResponse_HostValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSystemInfoResponse_HostValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSystemInfoResponse_HostValidationError) ErrorName() string {
	return "GetSystemInfoResponse_HostValidationError"
}

// Error satisfies the builtin error interface
func (e GetSystemInfoResponse_HostValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSystemInfoResponse_Host.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSystemInfoResponse_HostValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSystemInfoResponse_HostValidationError{}

// Validate checks the field values on GetSystemInfoResponse_Cpu with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSystemInfoResponse_Cpu) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSystemInfoResponse_Cpu with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSystemInfoResponse_CpuMultiError, or nil if none found.
func (m *GetSystemInfoResponse_Cpu) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSystemInfoResponse_Cpu) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Counts

	// no validation rules for Percent

	for idx, item := range m.GetInfoStat() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetSystemInfoResponse_CpuValidationError{
						field:  fmt.Sprintf("InfoStat[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetSystemInfoResponse_CpuValidationError{
						field:  fmt.Sprintf("InfoStat[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSystemInfoResponse_CpuValidationError{
					field:  fmt.Sprintf("InfoStat[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetSystemInfoResponse_CpuMultiError(errors)
	}

	return nil
}

// GetSystemInfoResponse_CpuMultiError is an error wrapping multiple validation
// errors returned by GetSystemInfoResponse_Cpu.ValidateAll() if the
// designated constraints aren't met.
type GetSystemInfoResponse_CpuMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSystemInfoResponse_CpuMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSystemInfoResponse_CpuMultiError) AllErrors() []error { return m }

// GetSystemInfoResponse_CpuValidationError is the validation error returned by
// GetSystemInfoResponse_Cpu.Validate if the designated constraints aren't met.
type GetSystemInfoResponse_CpuValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSystemInfoResponse_CpuValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSystemInfoResponse_CpuValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSystemInfoResponse_CpuValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSystemInfoResponse_CpuValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSystemInfoResponse_CpuValidationError) ErrorName() string {
	return "GetSystemInfoResponse_CpuValidationError"
}

// Error satisfies the builtin error interface
func (e GetSystemInfoResponse_CpuValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSystemInfoResponse_Cpu.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSystemInfoResponse_CpuValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSystemInfoResponse_CpuValidationError{}

// Validate checks the field values on GetSystemInfoResponse_Memory with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSystemInfoResponse_Memory) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSystemInfoResponse_Memory with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSystemInfoResponse_MemoryMultiError, or nil if none found.
func (m *GetSystemInfoResponse_Memory) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSystemInfoResponse_Memory) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSwapDevice() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetSystemInfoResponse_MemoryValidationError{
						field:  fmt.Sprintf("SwapDevice[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetSystemInfoResponse_MemoryValidationError{
						field:  fmt.Sprintf("SwapDevice[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSystemInfoResponse_MemoryValidationError{
					field:  fmt.Sprintf("SwapDevice[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetVirtualMemory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSystemInfoResponse_MemoryValidationError{
					field:  "VirtualMemory",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSystemInfoResponse_MemoryValidationError{
					field:  "VirtualMemory",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVirtualMemory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSystemInfoResponse_MemoryValidationError{
				field:  "VirtualMemory",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetSystemInfoResponse_MemoryMultiError(errors)
	}

	return nil
}

// GetSystemInfoResponse_MemoryMultiError is an error wrapping multiple
// validation errors returned by GetSystemInfoResponse_Memory.ValidateAll() if
// the designated constraints aren't met.
type GetSystemInfoResponse_MemoryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSystemInfoResponse_MemoryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSystemInfoResponse_MemoryMultiError) AllErrors() []error { return m }

// GetSystemInfoResponse_MemoryValidationError is the validation error returned
// by GetSystemInfoResponse_Memory.Validate if the designated constraints
// aren't met.
type GetSystemInfoResponse_MemoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSystemInfoResponse_MemoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSystemInfoResponse_MemoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSystemInfoResponse_MemoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSystemInfoResponse_MemoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSystemInfoResponse_MemoryValidationError) ErrorName() string {
	return "GetSystemInfoResponse_MemoryValidationError"
}

// Error satisfies the builtin error interface
func (e GetSystemInfoResponse_MemoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSystemInfoResponse_Memory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSystemInfoResponse_MemoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSystemInfoResponse_MemoryValidationError{}

// Validate checks the field values on GetSystemInfoResponse_Disk with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSystemInfoResponse_Disk) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSystemInfoResponse_Disk with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSystemInfoResponse_DiskMultiError, or nil if none found.
func (m *GetSystemInfoResponse_Disk) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSystemInfoResponse_Disk) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUsageStat()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSystemInfoResponse_DiskValidationError{
					field:  "UsageStat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSystemInfoResponse_DiskValidationError{
					field:  "UsageStat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUsageStat()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSystemInfoResponse_DiskValidationError{
				field:  "UsageStat",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetSystemInfoResponse_DiskMultiError(errors)
	}

	return nil
}

// GetSystemInfoResponse_DiskMultiError is an error wrapping multiple
// validation errors returned by GetSystemInfoResponse_Disk.ValidateAll() if
// the designated constraints aren't met.
type GetSystemInfoResponse_DiskMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSystemInfoResponse_DiskMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSystemInfoResponse_DiskMultiError) AllErrors() []error { return m }

// GetSystemInfoResponse_DiskValidationError is the validation error returned
// by GetSystemInfoResponse_Disk.Validate if the designated constraints aren't met.
type GetSystemInfoResponse_DiskValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSystemInfoResponse_DiskValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSystemInfoResponse_DiskValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSystemInfoResponse_DiskValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSystemInfoResponse_DiskValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSystemInfoResponse_DiskValidationError) ErrorName() string {
	return "GetSystemInfoResponse_DiskValidationError"
}

// Error satisfies the builtin error interface
func (e GetSystemInfoResponse_DiskValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSystemInfoResponse_Disk.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSystemInfoResponse_DiskValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSystemInfoResponse_DiskValidationError{}

// Validate checks the field values on GetSystemInfoResponse_Host_InfoStat with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetSystemInfoResponse_Host_InfoStat) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSystemInfoResponse_Host_InfoStat
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetSystemInfoResponse_Host_InfoStatMultiError, or nil if none found.
func (m *GetSystemInfoResponse_Host_InfoStat) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSystemInfoResponse_Host_InfoStat) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Hostname

	// no validation rules for Uptime

	// no validation rules for BootTime

	// no validation rules for Procs

	// no validation rules for Os

	// no validation rules for Platform

	// no validation rules for PlatformFamily

	// no validation rules for PlatformVersion

	// no validation rules for KernelVersion

	// no validation rules for KernelArch

	// no validation rules for VirtualizationSystem

	// no validation rules for VirtualizationRole

	// no validation rules for HostId

	if len(errors) > 0 {
		return GetSystemInfoResponse_Host_InfoStatMultiError(errors)
	}

	return nil
}

// GetSystemInfoResponse_Host_InfoStatMultiError is an error wrapping multiple
// validation errors returned by
// GetSystemInfoResponse_Host_InfoStat.ValidateAll() if the designated
// constraints aren't met.
type GetSystemInfoResponse_Host_InfoStatMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSystemInfoResponse_Host_InfoStatMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSystemInfoResponse_Host_InfoStatMultiError) AllErrors() []error { return m }

// GetSystemInfoResponse_Host_InfoStatValidationError is the validation error
// returned by GetSystemInfoResponse_Host_InfoStat.Validate if the designated
// constraints aren't met.
type GetSystemInfoResponse_Host_InfoStatValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSystemInfoResponse_Host_InfoStatValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSystemInfoResponse_Host_InfoStatValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSystemInfoResponse_Host_InfoStatValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSystemInfoResponse_Host_InfoStatValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSystemInfoResponse_Host_InfoStatValidationError) ErrorName() string {
	return "GetSystemInfoResponse_Host_InfoStatValidationError"
}

// Error satisfies the builtin error interface
func (e GetSystemInfoResponse_Host_InfoStatValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSystemInfoResponse_Host_InfoStat.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSystemInfoResponse_Host_InfoStatValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSystemInfoResponse_Host_InfoStatValidationError{}

// Validate checks the field values on GetSystemInfoResponse_Cpu_InfoStat with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetSystemInfoResponse_Cpu_InfoStat) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSystemInfoResponse_Cpu_InfoStat
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetSystemInfoResponse_Cpu_InfoStatMultiError, or nil if none found.
func (m *GetSystemInfoResponse_Cpu_InfoStat) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSystemInfoResponse_Cpu_InfoStat) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Cpu

	// no validation rules for VendorId

	// no validation rules for Family

	// no validation rules for Model

	// no validation rules for Stepping

	// no validation rules for PhysicalId

	// no validation rules for CoreId

	// no validation rules for Cores

	// no validation rules for ModelName

	// no validation rules for Mhz

	// no validation rules for CacheSize

	// no validation rules for Microcode

	if len(errors) > 0 {
		return GetSystemInfoResponse_Cpu_InfoStatMultiError(errors)
	}

	return nil
}

// GetSystemInfoResponse_Cpu_InfoStatMultiError is an error wrapping multiple
// validation errors returned by
// GetSystemInfoResponse_Cpu_InfoStat.ValidateAll() if the designated
// constraints aren't met.
type GetSystemInfoResponse_Cpu_InfoStatMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSystemInfoResponse_Cpu_InfoStatMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSystemInfoResponse_Cpu_InfoStatMultiError) AllErrors() []error { return m }

// GetSystemInfoResponse_Cpu_InfoStatValidationError is the validation error
// returned by GetSystemInfoResponse_Cpu_InfoStat.Validate if the designated
// constraints aren't met.
type GetSystemInfoResponse_Cpu_InfoStatValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSystemInfoResponse_Cpu_InfoStatValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSystemInfoResponse_Cpu_InfoStatValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSystemInfoResponse_Cpu_InfoStatValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSystemInfoResponse_Cpu_InfoStatValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSystemInfoResponse_Cpu_InfoStatValidationError) ErrorName() string {
	return "GetSystemInfoResponse_Cpu_InfoStatValidationError"
}

// Error satisfies the builtin error interface
func (e GetSystemInfoResponse_Cpu_InfoStatValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSystemInfoResponse_Cpu_InfoStat.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSystemInfoResponse_Cpu_InfoStatValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSystemInfoResponse_Cpu_InfoStatValidationError{}

// Validate checks the field values on GetSystemInfoResponse_Memory_SwapDevice
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetSystemInfoResponse_Memory_SwapDevice) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetSystemInfoResponse_Memory_SwapDevice with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// GetSystemInfoResponse_Memory_SwapDeviceMultiError, or nil if none found.
func (m *GetSystemInfoResponse_Memory_SwapDevice) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSystemInfoResponse_Memory_SwapDevice) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for UsedBytes

	// no validation rules for FreeBytes

	if len(errors) > 0 {
		return GetSystemInfoResponse_Memory_SwapDeviceMultiError(errors)
	}

	return nil
}

// GetSystemInfoResponse_Memory_SwapDeviceMultiError is an error wrapping
// multiple validation errors returned by
// GetSystemInfoResponse_Memory_SwapDevice.ValidateAll() if the designated
// constraints aren't met.
type GetSystemInfoResponse_Memory_SwapDeviceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSystemInfoResponse_Memory_SwapDeviceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSystemInfoResponse_Memory_SwapDeviceMultiError) AllErrors() []error { return m }

// GetSystemInfoResponse_Memory_SwapDeviceValidationError is the validation
// error returned by GetSystemInfoResponse_Memory_SwapDevice.Validate if the
// designated constraints aren't met.
type GetSystemInfoResponse_Memory_SwapDeviceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSystemInfoResponse_Memory_SwapDeviceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSystemInfoResponse_Memory_SwapDeviceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSystemInfoResponse_Memory_SwapDeviceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSystemInfoResponse_Memory_SwapDeviceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSystemInfoResponse_Memory_SwapDeviceValidationError) ErrorName() string {
	return "GetSystemInfoResponse_Memory_SwapDeviceValidationError"
}

// Error satisfies the builtin error interface
func (e GetSystemInfoResponse_Memory_SwapDeviceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSystemInfoResponse_Memory_SwapDevice.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSystemInfoResponse_Memory_SwapDeviceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSystemInfoResponse_Memory_SwapDeviceValidationError{}

// Validate checks the field values on
// GetSystemInfoResponse_Memory_VirtualMemoryStat with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetSystemInfoResponse_Memory_VirtualMemoryStat) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetSystemInfoResponse_Memory_VirtualMemoryStat with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// GetSystemInfoResponse_Memory_VirtualMemoryStatMultiError, or nil if none found.
func (m *GetSystemInfoResponse_Memory_VirtualMemoryStat) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSystemInfoResponse_Memory_VirtualMemoryStat) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	// no validation rules for Available

	// no validation rules for Used

	// no validation rules for UsedPercent

	// no validation rules for Free

	// no validation rules for Active

	// no validation rules for Inactive

	// no validation rules for SwapTotal

	// no validation rules for SwapFree

	if len(errors) > 0 {
		return GetSystemInfoResponse_Memory_VirtualMemoryStatMultiError(errors)
	}

	return nil
}

// GetSystemInfoResponse_Memory_VirtualMemoryStatMultiError is an error
// wrapping multiple validation errors returned by
// GetSystemInfoResponse_Memory_VirtualMemoryStat.ValidateAll() if the
// designated constraints aren't met.
type GetSystemInfoResponse_Memory_VirtualMemoryStatMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSystemInfoResponse_Memory_VirtualMemoryStatMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSystemInfoResponse_Memory_VirtualMemoryStatMultiError) AllErrors() []error { return m }

// GetSystemInfoResponse_Memory_VirtualMemoryStatValidationError is the
// validation error returned by
// GetSystemInfoResponse_Memory_VirtualMemoryStat.Validate if the designated
// constraints aren't met.
type GetSystemInfoResponse_Memory_VirtualMemoryStatValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSystemInfoResponse_Memory_VirtualMemoryStatValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSystemInfoResponse_Memory_VirtualMemoryStatValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetSystemInfoResponse_Memory_VirtualMemoryStatValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSystemInfoResponse_Memory_VirtualMemoryStatValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSystemInfoResponse_Memory_VirtualMemoryStatValidationError) ErrorName() string {
	return "GetSystemInfoResponse_Memory_VirtualMemoryStatValidationError"
}

// Error satisfies the builtin error interface
func (e GetSystemInfoResponse_Memory_VirtualMemoryStatValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSystemInfoResponse_Memory_VirtualMemoryStat.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSystemInfoResponse_Memory_VirtualMemoryStatValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSystemInfoResponse_Memory_VirtualMemoryStatValidationError{}

// Validate checks the field values on GetSystemInfoResponse_Disk_UsageStat
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetSystemInfoResponse_Disk_UsageStat) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSystemInfoResponse_Disk_UsageStat
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetSystemInfoResponse_Disk_UsageStatMultiError, or nil if none found.
func (m *GetSystemInfoResponse_Disk_UsageStat) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSystemInfoResponse_Disk_UsageStat) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Path

	// no validation rules for Fst

	// no validation rules for Total

	// no validation rules for Free

	// no validation rules for Used

	// no validation rules for UsedPercent

	// no validation rules for InodesTotal

	// no validation rules for InodesUsed

	// no validation rules for InodesFree

	// no validation rules for InodesUsedPercent

	if len(errors) > 0 {
		return GetSystemInfoResponse_Disk_UsageStatMultiError(errors)
	}

	return nil
}

// GetSystemInfoResponse_Disk_UsageStatMultiError is an error wrapping multiple
// validation errors returned by
// GetSystemInfoResponse_Disk_UsageStat.ValidateAll() if the designated
// constraints aren't met.
type GetSystemInfoResponse_Disk_UsageStatMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSystemInfoResponse_Disk_UsageStatMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSystemInfoResponse_Disk_UsageStatMultiError) AllErrors() []error { return m }

// GetSystemInfoResponse_Disk_UsageStatValidationError is the validation error
// returned by GetSystemInfoResponse_Disk_UsageStat.Validate if the designated
// constraints aren't met.
type GetSystemInfoResponse_Disk_UsageStatValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSystemInfoResponse_Disk_UsageStatValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSystemInfoResponse_Disk_UsageStatValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSystemInfoResponse_Disk_UsageStatValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSystemInfoResponse_Disk_UsageStatValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSystemInfoResponse_Disk_UsageStatValidationError) ErrorName() string {
	return "GetSystemInfoResponse_Disk_UsageStatValidationError"
}

// Error satisfies the builtin error interface
func (e GetSystemInfoResponse_Disk_UsageStatValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSystemInfoResponse_Disk_UsageStat.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSystemInfoResponse_Disk_UsageStatValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSystemInfoResponse_Disk_UsageStatValidationError{}
