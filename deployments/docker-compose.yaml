version: '3'

# 创建一个锚点，用于限制docker输出日志的大小
x-logging: &default-logging  
  driver: json-file
  options:
    max-size: "20m"
    max-file: "3"

services:
  # 前端项目
  web:
    container_name: jnoj-web
    build:
      context: ../web
      dockerfile: Dockerfile
    ports:
      - "8091:3000"
    environment:
      NODE_ENV: production
      API_BASE_URL: ${JNOJ_HOST}/api
      API_WS_URL: ${JNOJ_WS_HOST}/api/ws
      ADMIN_API_BASE_URL: ${JNOJ_HOST}/admin-api
    restart: always
    logging: *default-logging

  # 后端 api 接口
  interface-api:
    container_name: jnoj-interface-api
    build:
      context: .
      dockerfile: Dockerfile
    command: bash -c "cd app/interface && make build && ./bin/server -conf ./configs/config.yaml"
    environment:
      MYSQL_SOURCE: ${MYSQL_SOURCE}
      REDIS_ADDR: ${REDIS_ADDR}
      JNOJ_HOST: ${JNOJ_HOST}
      JWT_SECRET: ${JWT_SECRET}
      # s3 私有桶
      S3_PRIVATE_BUCKET_NAME: ${S3_PRIVATE_BUCKET_NAME}
      S3_PRIVATE_SECRET_ID: ${S3_PRIVATE_SECRET_ID}
      S3_PRIVATE_SECRET_KEY: ${S3_PRIVATE_SECRET_KEY}
      S3_PRIVATE_ENDPOINT: ${S3_PRIVATE_ENDPOINT}
      # s3 公开桶
      S3_PUBLIC_BUCKET_NAME: ${S3_PUBLIC_BUCKET_NAME}
      S3_PUBLIC_SECRET_ID: ${S3_PUBLIC_SECRET_ID}
      S3_PUBLIC_SECRET_KEY: ${S3_PUBLIC_SECRET_KEY}
      S3_PUBLIC_ENDPOINT: ${S3_PUBLIC_ENDPOINT}
    ports:
      - 8092:8000
    volumes:
      - ..:/go/src/jnoj
    restart: always
    logging: *default-logging

  # 管理后台 api 接口
  admin-api:
    container_name: jnoj-admin-api
    build:
      context: .
      dockerfile: Dockerfile
    command: bash -c "cd app/admin && make build && ./bin/server -conf ./configs/config.yaml"
    environment:
      MYSQL_SOURCE: ${MYSQL_SOURCE}
      REDIS_ADDR: ${REDIS_ADDR}
      JNOJ_HOST: ${JNOJ_HOST}
      JWT_SECRET: ${JWT_SECRET}
      # s3 私有桶
      S3_PRIVATE_BUCKET_NAME: ${S3_PRIVATE_BUCKET_NAME}
      S3_PRIVATE_SECRET_ID: ${S3_PRIVATE_SECRET_ID}
      S3_PRIVATE_SECRET_KEY: ${S3_PRIVATE_SECRET_KEY}
      S3_PRIVATE_ENDPOINT: ${S3_PRIVATE_ENDPOINT}
      # s3 公开桶
      S3_PUBLIC_BUCKET_NAME: ${S3_PUBLIC_BUCKET_NAME}
      S3_PUBLIC_SECRET_ID: ${S3_PUBLIC_SECRET_ID}
      S3_PUBLIC_SECRET_KEY: ${S3_PUBLIC_SECRET_KEY}
      S3_PUBLIC_ENDPOINT: ${S3_PUBLIC_ENDPOINT}
    ports:
      - 8093:8000
    volumes:
      - ..:/go/src/jnoj
    restart: always
    logging: *default-logging

  # 测评沙箱
  sandbox:
    container_name: jnoj-sandbox-api
    build:
      context: .
      dockerfile: DockerfileSandbox
    command: bash -c "cd app/sandbox && make build && ./bin/server -conf ./configs/config.yaml"
    environment:
      MYSQL_SOURCE: ${MYSQL_SOURCE}
      REDIS_ADDR: ${REDIS_ADDR}
      JNOJ_HOST: ${JNOJ_HOST}
      # s3 私有桶
      S3_PRIVATE_BUCKET_NAME: ${S3_PRIVATE_BUCKET_NAME}
      S3_PRIVATE_SECRET_ID: ${S3_PRIVATE_SECRET_ID}
      S3_PRIVATE_SECRET_KEY: ${S3_PRIVATE_SECRET_KEY}
      S3_PRIVATE_ENDPOINT: ${S3_PRIVATE_ENDPOINT}
      # s3 公开桶
      S3_PUBLIC_BUCKET_NAME: ${S3_PUBLIC_BUCKET_NAME}
      S3_PUBLIC_SECRET_ID: ${S3_PUBLIC_SECRET_ID}
      S3_PUBLIC_SECRET_KEY: ${S3_PUBLIC_SECRET_KEY}
      S3_PUBLIC_ENDPOINT: ${S3_PUBLIC_ENDPOINT}
    volumes:
      - ..:/go/src/sandbox
    restart: always
    privileged: true
    logging: *default-logging

  # nginx 反向代理，用于将以上定义的 web、interface-api、admin-api 文件储存，聚合在一个端口中
  nginx:
    container_name: jnoj-nginx
    image: nginx:latest
    ports:
      - "8011:80"
    volumes:
      - ./default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - web
      - interface-api
      - admin-api
    restart: always
    logging: *default-logging

networks:
  jnoj_net:
